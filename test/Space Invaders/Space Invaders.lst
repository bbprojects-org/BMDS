//
// Assembler for processor 8080
//
// File "Space Invaders.asm"
// 02 Feb 2016, 21:24
//

0001                    ;===============================================================================
0002                    ;
0003                    ;  Code for TAITO Space Invaders from 1978
0004                    ;
0005                    ;  Based on http://www.computerarcheology.com/Arcade/SpaceInvaders/Code.html
0006                    ;
0007                    ;===============================================================================
0008                    
0009                    ; It is never completely finished:
0010                    ;  * TODO Look at the various versions of the ROMs and see what's different
0011                    ;  * TODO Check all X/Y references and make !Xr/Yr or !Xn/Yn
0012                    
0013                    ; A word on coordinates. Sometimes the code is easier to understand in the
0014                    ; context of the screen in standard (no rotated) position. The comments will
0015                    ; refer to Xn (X not-rotated) and Yn. In other instances the code is easier
0016                    ; to understand in the context of the rotated screen. The comments will refer
0017                    ; to Xr (X rotated) and Yr.
0018                    
0019                    ;
0020                    ; DEFINE SYSTEM VARIABLES
0021                    ;
0022                    
0023    2000                               ORG   $2000,RAM     ; Variables in RAM start at $2000
0024                    
0025    2000            WaitOnDraw         DS    2             ; Cleared by alien-draw and set by next-alien. This
0026                                                           ; ensures no alien gets missed while drawing
0027    2002            AlienIsExploding   DS    1             ; Not 0 if an alien is exploding, 0 if not exploding
0028    2003            ExpAlienTimer      DS    1             ; Time (ISR ticks) left in alien-explosion
0029    2004            AlienRow           DS    1             ; Row number of current alien (cursor)
0030    2005            AlienFrame         DS    1             ; Animation frame number (0 or 1) for current alien (cursor)
0031    2006            AlienCurIndex      DS    1             ; Alien cursor index (from 0 to 54)
0032    2007            RefAlienDYr        DS    1             ; Reference alien delta Yr
0033    2008            RefAlienDXr        DS    1             ; Reference alien deltaXr
0034    2009            RefAlienYr         DS    1             ; Reference alien Yr coordinate
0035    200A            RefAlienXr         DS    1             ; Reference alien Xr coordinate
0036    200B            AlienPos           DS    2             ; Alien cursor bit pos
0037    200D            RackDirection      DS    1             ; 0 if rack moving right, 1 if moving left
0038    200E            RackDownDelta      DS    2             ; Constant value of alien rack dropping after
0039                                                           ; bumping screen edge
0040                    
0041                    ; GameObject0 (Move/draw the player)
0042                    
0043    2010            Obj0Timer          DS    2             ; Wait 128 interrupts (~2s) before player task starts
0044    2012            Obj0TimerExtra     DS    1
0045    2013            Obj0Handler        DS    2             ; Player handler code at 028E
0046    2015            PlayerAlive        DS    1             ; Player is alive (FF=alive). Toggles between 0 and 1
0047                                                           ; for blow-up images
0048    2016            ExpAnimateTimer    DS    1             ; Time till next blow-up sprite change (reloaded to 5)
0049    2017            ExpAnimateCnt      DS    1             ; Number of changes left in blow-up sequence
0050    2018            PlayerSprPic       DS    2             ; Player sprite descriptor... picture
0051    201A            PlayerYr           DS    1             ; Player sprite descriptor... location
0052    201B            PlayerXr           DS    1             ; Player sprite descriptor... location
0053    201C            PlyrSprSiz         DS    1             ; Player sprite descriptor... size of sprite
0054    201D            NextDemoCmd        DS    1             ; Next movement command for demo
0055    201E            HidMessSeq         DS    1             ; Set to 1 after 1st of 2 sequences are entered for
0056                                                           ; hidden-message display
0057                    
0058    201F                               DS    1             ; Unused?
0059                    
0060                    ; GameObject1 (Move/draw the player shot)
0061                    
0062    2020            Obj1Timer          DS    2
0063    2022            Obj1TimerExtra     DS    1             ; All 0's... run immediately
0064    2023            Obj1Handler        DS    2             ; Shot handler code at 03BB
0065    2025            PlyrShotStatus     DS    1             ; 0 if available,
0066                                                           ; 1 if just initiated,
0067                                                           ; 2 moving normally,
0068                                                           ; 3 hit something besides alien,
0069                                                           ; 4 if alien has exploded (remove from active duty)
0070                                                           ; 5 if alien explosion is in progress
0071    2026            BlowUpTimer        DS    1             ; Sprite blow-up timer
0072    2027            Obj1Image          DS    2             ; Sprite image at 1C90 (just one byte)
0073    2029            Obj1CoorYr         DS    1             ; Player shot Y coordinate
0074    202A            Obj1CoorXr         DS    1             ; Player shot X coordinate
0075    202B            Obj1ImageSize      DS    1             ; Size of shot image (just one byte)
0076    202C            ShotDeltaX         DS    1             ; Shot's delta X
0077    202D            FireBounce         DS    1             ; 1 if button has been handled but remains down
0078                    
0079    202E                               DS    2             ; Unused?
0080                    
0081                    ; GameObject2 (Alien rolling-shot)
0082                    
0083    2030            Obj2Timer          DS    2
0084    2032            Obj2TimerExtra     DS    1             ; GO-3 runs when this is 1. GO-4 runs when this
0085                                                           ; is 2. (copied to 2080 in game loop)
0086    2033            Obj2Handler        DS    2             ; Handler code at 0476
0087    2035            RolShotStatus      DS    1
0088    2036            RolShotStepCnt     DS    1
0089    2037            RolShotTrack       DS    1             ; A 0 means this shot tracks the player
0090    2038            RolShotColFirTbl   DS    2             ; Pointer to column-firing table (not used for targeting)
0091    203A            RolShotBlowCnt     DS    1
0092    203B            RolShotImage       DS    2
0093    203D            RolShotYr          DS    1
0094    203E            RolShotXr          DS    1
0095    203F            RolShotSize        DS    1
0096                    
0097                    ; GameObject3 (Alien plunger-shot)
0098                    
0099    2040            Obj3Timer          DS    2
0100    2042            Obj3TimerExtra     DS    1
0101    2043            Obj3Handler        DS    2             ; Handler code at 04B6
0102    2045            PluShotStatus      DS    1
0103    2046            PluShotStepCnt     DS    1
0104    2047            PluShotTrack       DS    1             ; A 1 means this shot does not track the player
0105    2048            PluShotColFirTbl   DS    2             ; Pointer to column-firing table
0106    204A            PluShotBlowCnt     DS    1
0107    204B            PluShotImage       DS    2
0108    204D            PluShotYr          DS    1
0109    204E            PluSHotXr          DS    1
0110    204F            PluShotSize        DS    1
0111                    
0112                    ; GameObject4 (Flying saucer OR alien squiggly shot)
0113                    
0114    2050            Obj4Timer          DS    2
0115    2052            Obj4TimerExtra     DS    1
0116    2053            Obj4Handler        DS    2             ; Handler code at 0682
0117    2055            SquShotStatus      DS    1
0118    2056            SquShotStepCnt     DS    1
0119    2057            SquShotTrack       DS    1             ; A 1 means this shot does not track the player
0120    2058            SquShotColFirTbl   DS    2             ; Pointer to column-firing table
0121    205A            SquShotBlowCnt     DS    1
0122    205B            SquShotImage       DS    2
0123    205D            SquShotYr          DS    1
0124    205E            SquShotXr          DS    1
0125    205F            SquShotSize        DS    1
0126                    
0127    2060            EndOfTasks         DS    1             ; FF marks the end of the tasks list
0128    2061            Collision          DS    1             ; Set to 1 if sprite-draw detects collision
0129    2062            ExpAlien           DS    2             ; Exploding alien picture 1CC0
0130    2064            ExpAlienYr         DS    1             ; Y coordinate of exploding alien
0131    2065            ExpAlienXr         DS    1             ; X coordinate of exploding alien
0132    2066            ExpAlienSize       DS    1             ; Size of exploding alien sprite (16 bytes)
0133    2067            PlayerDataMSB      DS    1             ; Current player's data-pointer MSB (21xx or 22xx)
0134    2068            PlayerOK           DS    1             ; 1 means OK, 0 means blowing up
0135    2069            EnableAlienFire    DS    1             ; 1 means aliens can fire, 0 means not
0136    206A            AlienFireDelay     DS    1             ; Count down till aliens can fire (2069 flag is then set)
0137    206B            OneAlien           DS    1             ; 1 when only one alien is on screen
0138    206C            Temp206C           DS    1             ; Holds the value ten... number of characters in each
0139                                                           ; '=xx POINTS' string but gets set to 18 in mem
0140                                                           ; copy before game
0141    206D            Invaded            DS    1             ; Set to 1 when player blows up because rack has
0142                                                           ; reached bottom
0143    206E            SkipPlunger        DS    1             ; When there is only one alien left this goes to 1
0144                                                           ; to disable the plunger-shot when it ends
0145                    
0146    206F                               DS    1             ; Unused?
0147                    
0148    2070            OtherShot1         DS    1             ; When processing a shot, this holds one of the
0149                                                           ; other shot's info
0150    2071            OtherShot2         DS    1             ; Ditto
0151    2072            VBlankStatus       DS    1             ; 80=screen is being drawn (don't touch),
0152                                                           ; 0=blanking in progress (ok to change)
0153                    
0154                    ; Alien shot information (copied from the 3 actual structures when processed)
0155                    
0156    2073            AlienShotStatus    DS    1             ; Bit 0 set if shot is blowing up,
0157                                                           ; bit 7 set if active
0158    2074            AlienShotStepCnt   DS    1             ; Count of steps made by shot (used for fire
0159                                                           ; reload rate)
0160    2075            AlienShotTrack     DS    1             ; 0 if shot tracks player or 1 if uses the column-fire table
0161    2076            AlienShotColFirTbl DS    2             ; Pointer to column-firing table
0162    2078            AlienShotBlowCnt   DS    1             ; Alien shot blow up counter. At 3 the explosion is
0163                                                           ; drawn. At 0 it is done
0164    2079            AlienShotImage     DS    2             ; Alien shot image
0165    207B            AlienShotYr        DS    1             ; Alien shot delta Y
0166    207C            AlienShotXr        DS    1             ; Alien shot delta X
0167    207D            AlienShotSize      DS    1             ; Alien shot size
0168    207E            AlienShotDelta     DS    1             ; Alien shot speed. Normally -1 but set to -4 with
0169                                                           ; less than 9 aliens
0170    207F            ShotPicEnd         DS    1             ; The last picture in the current alien shot animation
0171    2080            ShotSync           DS    1             ; All 3 shots are synchronized to the GO-2 timer,
0172                                                           ; this is copied from timer in the game loop
0173    2081            Tmp2081            DS    1             ; Used to hold the remember/restore flag in
0174                                                           ; shield-copy routine
0175    2082            NumAliens          DS    1             ; Number of aliens on screen
0176                    
0177    2083            SaucerStart        DS    1             ; Flag to start saucer (set to 1 when 2091:2092 counts down to 0)
0178    2084            SaucerActive       DS    1             ; Saucer is on screen (1 means yes)
0179    2085            SaucerHit          DS    1             ; Saucer has been hit (1 means draw it but don't move it)
0180    2086            SaucerHitTime      DS    1             ; Hit-sequence timer (explosion drawn at 1F, score drawn at 18)
0181                    
0182    2087            SaucerPriLoc       DS    2             ; Mystery ship print descriptor... coordinate
0183    2089            SaucerPriPicLSB    DS    1             ; Mystery ship print descriptor... message
0184    208A            SaucerPriPicMSB    DS    1
0185    208B            SaucerPriSize      DS    1             ; Mystery ship print descriptor ... number of characters
0186    208C            SaucerDeltaY       DS    1             ; Mystery ship delta Y
0187    208D            SaucerScore        DS    2             ; Pointer into mystery-ship score table
0188    208F            ShotCount          DS    2             ; Bumped every shot-removal. Saucer's direction
0189                                                           ; is bit 0 (0=2/29, 1=-2/E0)
0190    2091            TillSaucer         DS    2             ; Count down every game loop. When it reaches
0191                                                           ; 0 saucer is triggered. Reset to 600.
0192    2093            WaitStartLoop      DS    1             ; 1=in wait-for-start loop, 0=in splash screens
0193                    
0194    2094            SoundPort3         DS    1             ; Current status of sound port (out $03)
0195    2095            ChangeFleetSnd     DS    1             ; Set to 1 in ISR if time to change the fleet sound
0196    2096            FleetSndCnt        DS    1             ; Delay until next fleet movement tone
0197    2097            FleetSndReload     DS    1             ; Reload value for fleet sound counter
0198    2098            SoundPort5         DS    1             ; Current status of sound port (out $05)
0199    2099            ExtraHold          DS    1             ; Duration counter for extra-ship sound
0200    209A            Tilt               DS    1             ; 1 if tilt handling is in progress
0201    209B            FleetSndHold       DS    1             ; Time to hold fleet-sound at each change
0202                    
0203    209C                               DS    5             ; Unused?
0204                    
0205                    ; In the ROM mirror copied to RAM this is the image of the alien sprite pulling the upside down Y.
0206                    ; The code expects it to be 0030 below the second animation picture at $1BD0. This RAM area must be
0207                    ; unused. The copy is wasted
0208                    
0209    20A1                               DS    31
0210                    
0211                    ; End of initalisation copy from ROM mirror
0212                    ; These are copied once from ROM at startup ($01E6)
0213                    
0214    20C0            IsrDelay           DS    1             ; Delay counter decremented in ISR
0215    20C1            IsrSplashTask      DS    1             ; 1=In demo, 2=Little-alien and Y, 4=shooting extra 'C'
0216                    
0217                    ; Splash screen animation structure
0218                    
0219    20C2            SplashAnForm       DS    1             ; Image form (increments each draw)
0220    20C3            SplashDeltaX       DS    1             ; Delta X
0221    20C4            SplashDeltaY       DS    1             ; Delta Y
0222    20C5            SplashYr           DS    1             ; Y coordinate
0223    20C6            SplashXr           DS    1             ; X coordinate
0224    20C7            SplashImage        DS    2             ; Base image
0225    20C9            SplashImageSize    DS    1             ; Size of image (16 bytes)
0226    20CA            SplashTargetY      DS    1             ; Target Y coordinate
0227    20CB            SplashReached      DS    1             ; Reached target Y flag (1 when reached)
0228    20CC            SplashImageRest    DS    2             ; Base image for restore
0229                    
0230    20CE            TwoPlayers         DS    1             ; 1 for two players, 0 for 1 player
0231    20CF            AlienShotRelRate   DS    1             ; Based on the MSB of the player's score...
0232                                                           ; how fast the aliens reload their shots
0233                    
0234    20D0                               DS    21            ; This is where the alien-sprite-carrying-Y lives in ROM
0235                    
0236    20E5            Player1Ex          DS    1             ; Extra ship has been awarded = 0
0237    20E6            Player2Ex          DS    1             ; ditto
0238    20E7            Player1Alive       DS    1             ; 1 if player is alive, 0 if dead (after last man)
0239    20E8            Player2Alive       DS    1             ; ditto
0240    20E9            SuspendPlay        DS    1             ; 1=game things moving, 0=game things suspended
0241    20EA            CoinSwitch         DS    1             ; 1=switch down, 0=switch up (used to debounce switch)
0242    20EB            NumCoins           DS    1             ; number of coin credits in BCD format (99 max)
0243    20EC            SplashAnimate      DS    1             ; 0 for animation during splash and 1 for not,
0244                                                           ; this alternates after every cycle
0245    20ED            DemoCmdPtr         DS    2             ; pointer to demo commands 1663
0246    20EF            GameMode           DS    1             ; 1=game running, 0=demo or splash screens
0247                    
0248    20F0                               DS    1             ; Unused?
0249                    
0250    20F1            AdjustScore        DS    1             ; Set to 1 if score needs adjusting
0251    20F2            ScoreDelta         DS    2             ; Score adjustment
0252    20F4            HiScore            DS    2             ; Hi-score descriptor... value
0253    20F6            HiScoreLoc         DS    2             ; Hi-score descriptor... location
0254    20F8            P1Score            DS    2             ; Hi-score descriptor... value
0255    20FA            P1ScoreLoc         DS    2             ; Hi-score descriptor... location
0256    20FC            P2Score            DS    2             ; Hi-score descriptor... value
0257    20FE            P2ScoreLoc         DS    2             ; Hi-score descriptor... location
0258                    
0259                    ; Player 1 specific data
0260                    
0261    2100            P1_Data            DS    55            ; Player 1 alien ship indicators (0=dead) 11*5 = 55
0262                    
0263    2137                               DS    11            ; Unused 11 bytes (room for another row of aliens?)
0264                    
0265    2142            P1_Shields         DS    176           ; Player 1 shields remembered between rounds
0266                                                           ; 44 bytes * 4 shields ($B0 bytes)
0267                    
0268    21F2                               DS    9             ; Unused?
0269                    
0270    21FB            P1RefAlienDX       DS    1             ; Player 1 reference-alien delta X
0271    21FC            P1RefAlienY        DS    1             ; Player 1 reference-alien Y coordinate
0272    21FD            P1RefAlienX        DS    1             ; Player 1 reference-alien X coordiante
0273    21FE            P1RackCnt          DS    1             ; Player 1 rack-count (starts at 0 but gets
0274                                                           ; incremented to 1-8)
0275    21FF            P1ShipsRem         DS    1             ; Ships remaining after current dies
0276                    
0277                    ; Player 2 specific data
0278                    
0279    2200            P2_Data            DS    55            ; Player 2 alien ship indicators (0=dead) 11*5 = 55
0280                    
0281    2237                               DS    11            ; Unused 11 bytes (room for another row of aliens?)
0282                    
0283    2242            P2_Shields         DS    176           ; Player 2 shields remembered between rounds
0284                                                           ; 44 bytes * 4 shields ($B0 bytes)
0285                    
0286    22F2                               DS    9             ; Unused?
0287                    
0288    22FB            P2RefAlienDX       DS    1             ; Player 2 reference-alien delta X
0289    22FC            P2RefAlienYr       DS    1             ; Player 2 reference-alien Y coordinate
0290    22FD            P2RefAlienXr       DS    1             ; Player 2 reference-alien X coordinate
0291    22FE            P2RackCnt          DS    1             ; Player 2 rack-count (starts at 0 but gets
0292                                                           ; incremented to 1-8)
0293    22FF            P2ShipsRem         DS    1             ; Ships remaining after current dies
0294                    
0295                    ;
0296                    ; DEFINE SYSTEM CONSTANTS
0297                    ;
0298                    
0299    0000            INP0               EQU    0            ; Read, mapped in hardware but never used by the code
0300    0001            INP1               EQU    1            ; Read
0301    0002            INP2               EQU    2            ; Read
0302    0003            SHFT_IN            EQU    3            ; Read
0303                    
0304    0002            SHFT_AMNT          EQU    2            ; Write
0305    0003            SOUND1             EQU    3            ; Write
0306    0004            SHFT_DATA          EQU    4            ; Write
0307    0005            SOUND2             EQU    5            ; Write
0308    0006            WATCHDOG           EQU    6            ; Write
0309                    
0310    2400            STACK_TOP          EQU    $2400        ; 2300:23DD unused, 23DE:23FF in the emulator the
0311                                                           ; stack consumes this area (roughly 16 levels)
0312                    
0313                    
0314                    ;===============================================================================
0315                    ; START OF PROGRAM
0316                    ;===============================================================================
0317                    
0318    0000                               ORG $0000,CODE                ; Code resides from $0000 upwards
0319                    
0320                    ; Execution begins here on power-up and reset
0321                    
0322    0000  00        Reset              NOP                           ; This provides a slot ...
0323    0001  00                           NOP                           ; ... to put in a JP for ...
0324    0002  00                           NOP                           ; ... development
0325    0003  C3 D4 18                     JP    Initialise              ; Continue startup at 18D4
0326    0006  00                           NOP                           ; Padding before next fixed ISR address
0327    0007  00                           NOP
0328                    
0329                    ; Interrupt brings us here when the beam is *near* the middle of the screen.
0330                    ; The real middle would be 224/2 = 112. The code pretends this interrupt
0331                    ; happens at line 128
0332                    
0333    0008  F5        ScanLine96         PUSH  AF                      ; Save ...
0334    0009  C5                           PUSH  BC                      ; ...
0335    000A  D5                           PUSH  DE                      ; ...
0336    000B  E5                           PUSH  HL                      ; ... everything
0337    000C  C3 8C 00                     JP    ContScanLine96          ; Continue ISR at $008C
0338    000F  00                           NOP                           ; Padding before fixed ISR address
0339                    
0340                    ; Interrupt brings us here when the beam is at the end of the screen (line 224) when the
0341                    ; VBLANK begins
0342                    
0343    0010  F5        ScanLine224        PUSH  AF                      ; Save ...
0344    0011  C5                           PUSH  BC                      ; ...
0345    0012  D5                           PUSH  DE                      ; ...
0346    0013  E5                           PUSH  HL                      ; ... everything
0347    0014  3E 80                        LD    A,$80                   ; Flag that tells objects on the lower ...
0348    0016  32 72 20                     LD    (VBlankStatus),A        ; ... half of the screen to draw/move
0349    0019  21 C0 20                     LD    HL,IsrDelay             ; Decrement the general ...
0350    001C  35                           DEC   (HL)                    ; ... countdown (used for pauses)
0351    001D  CD CD 17                     CALL  CheckHandleTilt         ; Check and handle TILT
0352    0020  DB 01                        IN    A,(INP1)                ; Read coin switch
0353    0022  0F                           RRCA                          ; Has a coin been deposited (bit 0)?
0354    0023  DA 67 00                     JP    C,CoinDeposited         ; Yes... note that switch is closed and
0355                                                                     ; continue with A=1
0356    0026  3A EA 20                     LD    A,(CoinSwitch)          ; Switch is now open. Was it ...
0357    0029  A7                           AND   A                       ; ... closed last time?
0358    002A  CA 42 00                     JP    Z,Temp_0042             ; No ... skip registering the credit
0359                    
0360                    ; Handle bumping credit count
0361                    
0362    002D  3A EB 20                     LD    A,(NumCoins)            ; Number of credits in BCD
0363    0030  FE 99                        CP    $99                     ; 99 credits already?
0364    0032  CA 3E 00                     JP    Z,Already99             ; Yes ... ignore this (better than rolling over to 00)
0365    0035  C6 01                        ADD   A,$01                   ; Bump number of credits
0366    0037  27                           DAA                           ; Make it binary coded decimal
0367    0038  32 EB 20                     LD    (NumCoins),A            ; New number of credits
0368    003B  CD 47 19                     CALL  DrawNumCredits          ; Draw credits on screen
0369    003E  AF        Already99          XOR   A                       ; Credit switch ...
0370    003F  32 EA 20  Temp_003F          LD    (CoinSwitch),A          ; ... has opened
0371                    
0372    0042  3A E9 20  Temp_0042          LD    A,(SuspendPlay)         ; Are we moving ...
0373    0045  A7                           AND   A                       ; ... game objects?
0374    0046  CA 82 00                     JP    Z,Temp_0082             ; No ... restore registers and out
0375    0049  3A EF 20                     LD    A,(GameMode)            ; Are we in ...
0376    004C  A7                           AND   A                       ; ... game mode?
0377    004D  C2 6F 00                     JP    NZ,MainGameLoop         ; Yes ... go process game-play things and out
0378    0050  3A EB 20                     LD    A,(NumCoins)            ; Number of credits
0379    0053  A7                           AND   A                       ; Are there any credits (player standing there)?
0380    0054  C2 5D 00                     JP    NZ,Temp_005D            ; Yes ... skip any ISR animations for the splash screens
0381    0057  CD BF 0A                     CALL  ISRSplTasks             ; Process ISR tasks for splash screens
0382    005A  C3 82 00                     JP    $0082                   ; Restore registers and out
0383                    
0384                    ; At this point no game is going and there are credits
0385                    
0386    005D  3A 93 20  Temp_005D          LD    A,(WaitStartLoop)       ; Are we in the ...
0387    0060  A7                           AND   A                       ; ... 'press start' loop?
0388    0061  C2 82 00                     JP    NZ,Temp_0082            ; Yes ... restore registers and out
0389    0064  C3 65 07                     JP    WaitForStart            ; Start the 'press start' loop
0390                    
0391                    ; Mark credit as needing registering
0392                    
0393    0067  3E 01     CoinDeposited      LD    A,$01                   ; Remember switch ...
0394    0069  32 EA 20                     LD    (CoinSwitch),A          ; ... state for debounce
0395    006C  C3 3F 00                     JP    Temp_003F               ; Continue
0396                    
0397                    ; Main game-play timing loop
0398                    
0399    006F  CD 40 17  MainGameLoop       CALL  TimeFleetSound          ; Time down fleet sound and sets flag if needs new
0400    0072  3A 32 20                     LD    A,(Obj2TimerExtra)      ; Use rolling shot's timer to sync ...
0401    0075  32 80 20                     LD    (ShotSync),A            ; ... other two shots
0402    0078  CD 00 01                     CALL  DrawAlien               ; Draw the current alien (or exploding alien)
0403    007B  CD 48 02                     CALL  RunGameObjs             ; Process game objects (including player object)
0404    007E  CD 13 09                     CALL  TimeToSaucer            ; Count down time to saucer
0405                    
0406    0081  00                           NOP
0407                    
0408    0082  E1        Temp_0082          POP   HL                      ; Restore ...
0409    0083  D1                           POP   DE                      ; ...
0410    0084  C1                           POP   BC                      ; ...
0411    0085  F1                           POP   AF                      ; ... everything
0412    0086  FB                           EI                            ; Enable interrupts
0413    0087  C9                           RET                           ; Done
0414                    
0415    0088  00                           NOP
0416    0089  00                           NOP
0417    008A  00                           NOP
0418    008B  00                           NOP
0419                    
0420                    ; Continues here from scanline 96 ISR
0421                    
0422    008C  AF        ContScanLine96     XOR   A                       ; Flag that tells ...
0423    008D  32 72 20                     LD    (VBlankStatus),A        ; ... objects on the upper half of screen to draw/move
0424    0090  3A E9 20                     LD    A,(SuspendPlay)         ; Are we moving ...
0425    0093  A7                           AND   A                       ; ... game objects?
0426    0094  CA 82 00                     JP    Z,$0082                 ; No ... restore and return
0427    0097  3A EF 20                     LD    A,(GameMode)            ; Are we in ...
0428    009A  A7                           AND   A                       ; ... game mode?
0429    009B  C2 A5 00                     JP    NZ,$00A5                ; Yes .... process game objects and out
0430    009E  3A C1 20                     LD    A,(IsrSplashTask)       ; Splash-animation tasks
0431    00A1  0F                           RRCA                          ; If we are in demo-mode then we'll process the tasks anyway
0432    00A2  D2 82 00                     JP    NC,$0082                ; Not in demo mode ... done
0433                    ;
0434    00A5  21 20 20                     LD    HL,Obj1Timer            ; Game object table (skip player-object at 2010)
0435    00A8  CD 4B 02                     CALL  $024B                   ; Process all game objects (except player object)
0436    00AB  CD 41 01                     CALL  CursorNextAlien         ; Advance cursor to next alien (move the alien if it is last one)
0437    00AE  C3 82 00                     JP    $0082                   ; Restore and return
0438                    ;
0439                    ; Initialize the player's rack of aliens. Copy the reference-location and deltas from the player's data bank
0440                    ;
0441    00B1  CD 86 08  InitRack           CALL  GetAlRefPtr             ; 2xFC Get current player's ref-alien position pointer
0442    00B4  E5                           PUSH  HL                      ; Hold pointer
0443    00B5  7E                           LD    A,(HL)                  ; Get player's ...
0444    00B6  23                           INC   HL                      ; ... ref-alien ...
0445    00B7  66                           LD    H,(HL)                  ; ...
0446    00B8  6F                           LD    L,A                     ; ... coordinates
0447    00B9  22 09 20                     LD    (RefAlienYr),HL         ; Set game's reference alien's X,Y
0448    00BC  22 0B 20                     LD    (AlienPos),HL           ; Set game's alien cursor bit position
0449    00BF  E1                           POP   HL                      ; Restore pointer
0450    00C0  2B                           DEC   HL                      ; 21FB or 22FB ref alien's delta (left or right)
0451    00C1  7E                           LD    A,(HL)                  ; Get ref alien's delta X
0452    00C2  FE 03                        CP    $03                     ; If there is one alien it will move right at 3
0453    00C4  C2 C8 00                     JP    NZ,$00C8                ; Not 3 ... keep it
0454    00C7  3D                           DEC   A                       ; If it is 3, back it down to 2 until it switches again
0455    00C8  32 08 20                     LD    (RefAlienDXr),A         ; Store alien deltaY
0456    00CB  FE FE                        CP    $00FE                   ; Moving left?
0457    00CD  3E 00                        LD    A,$0000                 ; Value of 0 for rack-moving-right (not XOR so flags are unaffected)
0458    00CF  C2 D3 00                     JP    NZ,$00D3                ; Not FE ... keep the value 0 for right
0459    00D2  3C                           INC   A                       ; It IS FE ... use 1 for left
0460    00D3  32 0D 20                     LD    (RackDirection),A       ; Store rack direction
0461    00D6  C9                           RET                           ; Done
0462                    
0463    00D7  3E 02                        LD    A,$02                   ; Set ...
0464    00D9  32 FB 21                     LD    (P1RefAlienDX),A        ; ... player 1 and 2 ...
0465    00DC  32 FB 22                     LD    (P2RefAlienDX),A        ; ... alien delta to 2 (right 2 pixels)
0466    00DF  C3 E4 08                     JP    $08E4                   ;
0467                    
0468    00E2                               DS    30, 0                   ; Unused space?
0469                    
0470                    ; This is heavily patched from a previous version of the code. There was a test here to
0471                    ; jump to a self-test routine on startup (based on a dip switch). Even the original code
0472                    ; padded with zeros to make the next function begin at 0100. Room for expansion?
0473                    
0474                    ; 2006 holds the index into the alien flag data grid. 2067 holds the MSB of the pointer
0475                    ; (21xx or 22xx). If there is an alien exploding time it down. Otherwise draw the alien
0476                    ; if it alive (or skip if it isn't). If an alien is drawn (or blank) then the 2000
0477                    ; alien-drawing flag is cleared
0478                    
0479    0100  21 02 20  DrawAlien          LD    HL,AlienIsExploding     ; Is there an ...
0480    0103  7E                           LD    A,(HL)                  ; ... alien ...
0481    0104  A7                           AND   A                       ; ... exploding?
0482    0105  C2 38 15                     JP    NZ,AlienExplodeTime     ; Yes ... go time it down and out
0483                    
0484    0108  E5                           PUSH  HL                      ; 2002 on the stack
0485    0109  3A 06 20                     LD    A,(AlienCurIndex)       ; Get alien index ...
0486    010C  6F                           LD    L,A                     ; ... for the 21xx or 22xx pointer
0487    010D  3A 67 20                     LD    A,(PlayerDataMSB)       ; Get MSB...
0488    0110  67                           LD    H,A                     ; ... of data area (21xx or 22xx)
0489    0111  7E                           LD    A,(HL)                  ; Get alien status flag
0490    0112  A7                           AND   A                       ; Is the alien alive?
0491    0113  E1                           POP   HL                      ; HL=2002
0492    0114  CA 36 01                     JP    Z,$0136                 ; No alien ... skip drawing alien sprite (but flag done)
0493    0117  23                           INC   HL                      ; HL=2003 Bump descriptor
0494    0118  23                           INC   HL                      ; HL=2004 Point to alien's row
0495    0119  7E                           LD    A,(HL)                  ; Get alien type
0496    011A  23                           INC   HL                      ; HL=2005 Bump descriptor
0497    011B  46                           LD    B,(HL)                  ; Get animation number
0498    011C  E6 FE                        AND   $FE                     ; Translate row to type offset as follows: ...
0499    011E  07                           RLCA                          ; ... 0,1 -> 32 (type 1) ...
0500    011F  07                           RLCA                          ; ... 2,3 -> 16 (type 2) ...
0501    0120  07                           RLCA                          ; ...   4 -> 32 (type 3) on top row
0502    0121  5F                           LD    E,A                     ; Sprite offset LSB
0503    0122  16 00                        LD    D,$00                   ; MSB is 0
0504    0124  21 00 1C                     LD    HL,AlienSprAPos0        ; Position 0 alien sprites
0505    0127  19                           ADD   HL,DE                   ; Offset to sprite type
0506    0128  EB                           EX    DE,HL                   ; Sprite offset to DE
0507    0129  78                           LD    A,B                     ; Animation frame number
0508    012A  A7                           AND   A                       ; Is it position 0?
0509    012B  C4 3B 01                     CALL  NZ,$013B                ; No ... add 30 and use position 1 alien sprites
0510    012E  2A 0B 20                     LD    HL,(AlienPos)           ; Pixel position
0511    0131  06 10                        LD    B,$10                   ; 16 rows in alien sprites
0512    0133  CD D3 15                     CALL  DrawSprite              ; Draw shifted sprite
0513                    
0514    0136  AF                           XOR   A                       ; Let the ISR routine ...
0515    0137  32 00 20                     LD    (WaitOnDraw),A          ; ... advance the cursor to the next alien
0516    013A  C9                           RET                           ; Done
0517                    
0518    013B  21 30 00                     LD    HL,$0030                ; Offset sprite pointer ...
0519    013E  19                           ADD   HL,DE                   ; ... to animation frame 1 sprites
0520    013F  EB                           EX    DE,HL                   ; Back to DE
0521    0140  C9                           RET                           ; Done
0522                    
0523                    ; This is called from the mid-screen ISR to set the cursor for the next alien to draw.
0524                    ; When the cursor moves over all aliens then it is reset to the beginning and the reference
0525                    ; alien is moved to its next position
0526                    
0527                    ; The flag at 2000 keeps this in sync with the alien-draw routine called from the end-screen ISR.
0528                    ; When the cursor is moved here then the flag at 2000 is set to 1. This routine will not change
0529                    ; the cursor until the alien-draw routine at 100 clears the flag. Thus no alien is skipped
0530                    
0531    0141  3A 68 20  CursorNextAlien    LD    A,(PlayerOK)            ; Is the player ...
0532    0144  A7                           AND   A                       ; ... blowing up?
0533    0145  C8                           RET   Z                       ; Yes ... ignore the aliens
0534    0146  3A 00 20                     LD    A,(WaitOnDraw)          ; Still waiting on ...
0535    0149  A7                           AND   A                       ; ... this alien to be drawn?
0536    014A  C0                           RET   NZ                      ; Yes ... leave cursor in place
0537    014B  3A 67 20                     LD    A,(PlayerDataMSB)       ; Load alien-data ...
0538    014E  67                           LD    H,A                     ; ... MSB (either 21xx or 22xx)
0539    014F  3A 06 20                     LD    A,(AlienCurIndex)       ; Load the xx part of the alien flag pointer
0540    0152  16 02                        LD    D,$02                   ; When all are gone this triggers 1A1 to return from this stack frame
0541    0154  3C                           INC   A                       ; Have we drawn all aliens ...
0542    0155  FE 37                        CP    $37                     ; ... at last position?
0543    0157  CC A1 01                     CALL  Z,MoveRefAlien          ; Yes ... move the bottom/right alien and reset index to 0
0544    015A  6F                           LD    L,A                     ; HL now points to alien flag
0545    015B  46                           LD    B,(HL)                  ; Is alien ...
0546    015C  05                           DEC   B                       ; ... alive?
0547    015D  C2 54 01                     JP    NZ,$0154                ; No ... skip to next alien
0548    0160  32 06 20                     LD    (AlienCurIndex),A       ; New alien index
0549    0163  CD 7A 01                     CALL  GetAlienCoords          ; Calculate bit position and type for index
0550    0166  61                           LD    H,C                     ; The calculation returns the MSB in C
0551    0167  22 0B 20                     LD    (AlienPos),HL           ; Store new bit position
0552    016A  7D                           LD    A,L                     ; Has this alien ...
0553    016B  FE 28                        CP    $28                     ; ... reached the end of screen?
0554    016D  DA 71 19                     JP    C,$1971                 ; Yes ... kill the player
0555    0170  7A                           LD    A,D                     ; This alien's ...
0556    0171  32 04 20                     LD    (AlienRow),A            ; ... row index
0557    0174  3E 01                        LD    A,$01                   ; Set the wait-flag for the ...
0558    0176  32 00 20                     LD    (WaitOnDraw),A          ; ... draw-alien routine to clear
0559    0179  C9                           RET                           ; Done
0560                    
0561                    ; Convert alien index in L to screen bit position in C,L
0562                    ; Return alien row index (converts to type) in D
0563                    
0564    017A  16 00     GetAlienCoords     LD    D,$00                   ; Row 0
0565    017C  7D                           LD    A,L                     ; Hold onto alien index
0566    017D  21 09 20                     LD    HL,RefAlienYr           ; Get alien Y ...
0567    0180  46                           LD    B,(HL)                  ; ... to B
0568    0181  23                           INC   HL                      ; Get alien X ...
0569    0182  4E                           LD    C,(HL)                  ; ... to C
0570    0183  FE 0B                        CP    $0B                     ; Can we take a full row off of index?
0571    0185  FA 94 01                     JP    M,$0194                 ; No ... we have the row
0572    0188  DE 0B                        SBC   A,$0B                   ; Subtract off 11 (one whole row)
0573    018A  5F                           LD    E,A                     ; Hold the new index
0574    018B  78                           LD    A,B                     ; Add ...
0575    018C  C6 10                        ADD   A,$10                   ; ... 16 to bit ...
0576    018E  47                           LD    B,A                     ; ... position Y (1 row in rack)
0577    018F  7B                           LD    A,E                     ; Restore tallied index
0578    0190  14                           INC   D                       ; Next row
0579    0191  C3 83 01                     JP    $0183                   ; Keep skipping whole rows
0580                    
0581    0194  68                           LD    L,B                     ; We have the LSB (the row)
0582    0195  A7                           AND   A                       ; Are we in the right column?
0583    0196  C8                           RET   Z                       ; Yes ... X and Y are right
0584    0197  5F                           LD    E,A                     ; Hold index
0585    0198  79                           LD    A,C                     ; Add ...
0586    0199  C6 10                        ADD   A,$10                   ; ... 16 to bit ...
0587    019B  4F                           LD    C,A                     ; ... position X (1 column in rack)
0588    019C  7B                           LD    A,E                     ; Restore index
0589    019D  3D                           DEC   A                       ; We adjusted for 1 column
0590    019E  C3 95 01                     JP    $0195                   ; Keep moving over column
0591                    
0592                    ; The 'reference alien' is the bottom left. All other aliens are drawn relative to this
0593                    ; reference. This routine moves the reference alien (the delta is set elsewhere) and toggles
0594                    ; the animation frame number between 0 and 1
0595                    
0596    01A1  15        MoveRefAlien       DEC   D                       ; This decrements with each call to move
0597    01A2  CA CD 01                     JP    Z,ReturnTwo             ; Return out of TWO call frames (only used if no aliens left)
0598    01A5  21 06 20                     LD    HL,AlienCurIndex        ; Set current alien index ...
0599    01A8  36 00                        LD    (HL),$00                ; ... to 0
0600    01AA  23                           INC   HL                      ; Point to DeltaX
0601    01AB  4E                           LD    C,(HL)                  ; Load DX into C
0602    01AC  36 00                        LD    (HL),$00                ; Set DX to 0
0603    01AE  CD D9 01                     CALL  AddDelta                ; Move alien
0604    01B1  21 05 20                     LD    HL,AlienFrame           ; Alien animation frame number
0605    01B4  7E                           LD    A,(HL)                  ; Toggle ...
0606    01B5  3C                           INC   A                       ; ... animation ...
0607    01B6  E6 01                        AND   $01                     ; ... number between ...
0608    01B8  77                           LD    (HL),A                  ; ... 0 and 1
0609    01B9  AF                           XOR   A                       ; Alien index in A is now 0
0610    01BA  21 67 20                     LD    HL,PlayerDataMSB        ; Restore H ...
0611    01BD  66                           LD    H,(HL)                  ; ... to player data MSB (21 or 22)
0612    01BE  C9                           RET                           ; Done
0613                    
0614    01BF  00                           NOP
0615                    
0616                    ; Initialize the 55 aliens from last to first. 1 means alive
0617                    
0618    01C0  21 00 21  InitAliens         LD    HL,$2100                ; Start of alien structures (this is the last alien)
0619    01C3  06 37                        LD    B,$37                   ; Count to 55 (that's five rows of 11 aliens)
0620    01C5  36 01                        LD    (HL),$01                ; Bring alien to live
0621    01C7  23                           INC   HL                      ; Next alien
0622    01C8  05                           DEC   B                       ; All done?
0623    01C9  C2 C5 01                     JP    NZ,$01C5                ; No ... keep looping
0624    01CC  C9                           RET                           ; Done
0625                    
0626                    ; If there are no aliens left on the screen then MoveDrawAlien comes here which returns from the
0627                    ; caller's stack frame
0628                    
0629    01CD  E1        ReturnTwo          POP   HL                      ; Drop return to caller
0630    01CE  C9                           RET                           ; Return to caller's caller
0631                    
0632                    ; Draw a 1px line across the player's stash at the bottom of the screen
0633                    
0634    01CF  3E 01     DrawBottomLine     LD    A,$01                   ; Bit 1 set ... going to draw a 1-pixel stripe down left side
0635    01D1  06 E0                        LD    B,$E0                   ; All the way down the screen
0636    01D3  21 02 24                     LD    HL,$2402                ; Screen coordinates (3rd byte from upper left)
0637    01D6  C3 CC 14                     JP    $14CC                   ; Draw line down left side
0638                    
0639                    ; HL points to descriptor: DX DY XX YY except DX is already loaded in C
0640                    ; ** Why the 'already loaded' part? Why not just load it here?
0641                    
0642    01D9  23        AddDelta           INC   HL                      ; We loaded delta-x already ... skip over it
0643    01DA  46                           LD    B,(HL)                  ; Get delta-y
0644    01DB  23                           INC   HL                      ; Skip over it
0645    01DC  79                           LD    A,C                     ; Add delta-x ...
0646    01DD  86                           ADD   A,(HL)                  ; ... to x
0647    01DE  77                           LD    (HL),A                  ; Store new x
0648    01DF  23                           INC   HL                      ; Skip to y
0649    01E0  78                           LD    A,B                     ; Add delta-y ...
0650    01E1  86                           ADD   A,(HL)                  ; ... to y
0651    01E2  77                           LD    (HL),A                  ; Store new y
0652    01E3  C9                           RET                           ; Done
0653                    
0654                    ; Block copy ROM mirror 1B00-1BBF to initialize RAM at 2000-20BF
0655                    
0656    01E4  06 C0     CopyRamMirror      LD    B,$C0                   ; Number of bytes
0657    01E6  11 00 1B                     LD    DE,Data_CopyToRam       ; RAM mirror in ROM
0658    01E9  21 00 20                     LD    HL,$2000                ; Start of RAM
0659    01EC  C3 32 1A                     JP    BlockCopy               ; Copy [DE]->[HL] and return
0660                    
0661                    ; Draw the shields for player 1 (draws it in the buffer in the player's data area)
0662                    
0663    01EF  21 42 21  DrawShieldPl1      LD    HL,P1_Shields           ; Player 1 shield buffer (remember between games in multi-player)
0664    01F2  C3 F8 01                     JP    $01F8                   ; Common draw point
0665                    
0666                    ; Draw the shields for player 2 (draws it in the buffer in the player's data area)
0667                    
0668    01F5  21 42 22  DrawShieldPl2      LD    HL,P2_Shields           ; Player 2 shield buffer (remember between games in multi-player)
0669    01F8  0E 04                        LD    C,$04                   ; Going to draw 4 shields
0670    01FA  11 20 1D                     LD    DE,$1D20                ; Shield pixel pattern
0671    01FD  D5                           PUSH  DE                      ; Hold the start for the next shield
0672    01FE  06 2C                        LD    B,$2C                   ; 44 bytes to copy
0673    0200  CD 32 1A                     CALL  BlockCopy               ; Block copy DE to HL (B bytes)
0674    0203  D1                           POP   DE                      ; Restore start of shield pattern
0675    0204  0D                           DEC   C                       ; Drawn all shields?
0676    0205  C2 FD 01                     JP    NZ,$01FD                ; No ... go draw them all
0677    0208  C9                           RET                           ; Done
0678                    
0679                    ; Copy shields on the screen to player 1's data area
0680                    
0681    0209  3E 01     RememberShields1   LD    A,$01                   ; Not zero means remember
0682    020B  C3 1B 02                     JP    $021B                   ; Shuffle-shields player 1
0683                    
0684                    ; Copy shields on the screen to player 2's data area
0685                    
0686    020E  3E 01     RememberShields2   LD    A,$01                   ; Not zero means remember
0687    0210  C3 14 02                     JP    $0214                   ; Shuffle-shields player 2
0688                    
0689                    ; Copy shields from player 2's data area to screen
0690                    
0691    0213  AF        RestoreShields2    XOR   A                       ; Zero means restore
0692    0214  11 42 22                     LD    DE,P2_Shields           ; Player 2 shield buffer (remember between games in multi-player)
0693    0217  C3 1E 02                     JP    CopyShields             ; Shuffle-shields player 2
0694                    
0695                    ; Copy shields from player 1's data area to screen
0696                    
0697    021A  AF        RestoreShieldsP1   XOR   A                       ; Zero means restore
0698    021B  11 42 21                     LD    DE,P1_Shields           ; Player 1 shield buffer (remember between games in multi-player)
0699                    
0700                    ; A is 1 for screen-to-buffer, 0 for to buffer-to-screen
0701                    ; HL is screen coordinates of first shield. There are 23 rows between shields
0702                    ; DE is sprite buffer in memory
0703                    
0704    021E  32 81 20  CopyShields        LD    (Tmp2081),A             ; Remember copy/restore flag
0705    0221  01 02 16                     LD    BC,$1602                ; 22 rows, 2 bytes/row (for 1 shield pattern)
0706    0224  21 06 28                     LD    HL,$2806                ; Screen coordinates
0707    0227  3E 04                        LD    A,$04                   ; Four shields to move
0708    0229  F5                           PUSH  AF                      ; Hold shield count
0709    022A  C5                           PUSH  BC                      ; Hold sprite-size
0710    022B  3A 81 20                     LD    A,(Tmp2081)             ; Get back copy/restore flag
0711    022E  A7                           AND   A                       ; Not zero ...
0712    022F  C2 42 02                     JP    NZ,$0242                ; ... means remember shidles
0713    0232  CD 69 1A                     CALL  RestoreShields          ; Restore player's shields
0714    0235  C1                           POP   BC                      ; Get back sprite-size
0715    0236  F1                           POP   AF                      ; Get back shield count
0716    0237  3D                           DEC   A                       ; Have we moved all shields?
0717    0238  C8                           RET   Z                       ; Yes ... out
0718    0239  D5                           PUSH  DE                      ; Hold sprite buffer
0719    023A  11 E0 02                     LD    DE,$02E0                ; Add 2E0 (23 rows) to get to ...
0720    023D  19                           ADD   HL,DE                   ; ... next shield on screen
0721    023E  D1                           POP   DE                      ; restore sprite buffer
0722    023F  C3 29 02                     JP    $0229                   ; Go back and do all
0723                    
0724    0242  CD 7C 14                     CALL  RememberShields         ; Remember player's shields
0725    0245  C3 35 02                     JP    $0235                   ; Continue with next shield
0726                    
0727                    ; Process game objects. Each game object has a 16 byte structure. The handler routine for the object
0728                    ; is at xx03 and xx04 of the structure. The pointer to xx04 is pushed onto the stack before calling
0729                    ; the handler
0730                    
0731                    ; All game objects (except task 0 ... the player) are called at the mid-screen and end-screen renderings.
0732                    ; Each object decides when to run based on its Y (not rotated) coordinate. If an object is on the lower
0733                    ; half of the screen then it does its work when the beam is at the top of the screen. If an object is
0734                    ; on the top of the screen then it does its work when the beam is at the bottom. This keeps the
0735                    ; object from updating while it is being drawn which would result in an ugly flicker
0736                    
0737                    ; The player is only processed at the mid-screen interrupt. I am not sure why
0738                    
0739                    ; The first three bytes of the structure are used for status and timers
0740                    
0741                    ; If the first byte is FF then the end of the game-task list has been reached
0742                    ; If the first byte is FE then the object is skipped
0743                    
0744                    ; If the first-two bytes are non-zero then they are treated like a two-byte counter
0745                    ; and decremented as such. The 2nd byte is the LSB (moves the fastest)
0746                    
0747                    ; If the first-two bytes are zero then the third byte is treated as an additional counter. It
0748                    ; is decremented as such
0749                    
0750                    ; When all three bytes reach zero the task is executed
0751                    
0752                    ; The third-byte-counter was used as a speed-governor for the player's object, but evidently even the slowest
0753                    ; setting was too slow. It got changed to 0 (fastest possible)
0754                    
0755    0248  21 10 20  RunGameObjs        LD    HL,Obj0Timer            ; First game object (active player)
0756    024B  7E                           LD    A,(HL)                  ; Have we reached the ...
0757    024C  FE FF                        CP    $FF                     ; ... end of the object list?
0758    024E  C8                           RET   Z                       ; Yes ... done
0759    024F  FE FE                        CP    $FE                     ; Is object active?
0760    0251  CA 81 02                     JP    Z,$0281                 ; No ... skip it
0761    0254  23                           INC   HL                      ; xx01
0762    0255  46                           LD    B,(HL)                  ; First byte to B
0763    0256  4F                           LD    C,A                     ; Hold 1st byte
0764    0257  B0                           OR    B                       ; OR 1st and 2nd byte
0765    0258  79                           LD    A,C                     ; Restore 1st byte
0766    0259  C2 77 02                     JP    NZ,$0277                ; If word at xx00,xx02 is non zero then decrement it
0767                    
0768    025C  23                           INC   HL                      ; xx02
0769    025D  7E                           LD    A,(HL)                  ; Get byte counter
0770    025E  A7                           AND   A                       ; Is it 0?
0771    025F  C2 88 02                     JP    NZ,$0288                ; No ... decrement byte counter at xx02
0772    0262  23                           INC   HL                      ; xx03
0773    0263  5E                           LD    E,(HL)                  ; Get handler address LSB
0774    0264  23                           INC   HL                      ; xx04
0775    0265  56                           LD    D,(HL)                  ; Get handler address MSB
0776    0266  E5                           PUSH  HL                      ; Remember pointer to MSB
0777    0267  EB                           EX    DE,HL                   ; Handler address to HL
0778    0268  E5                           PUSH  HL                      ; Now to stack (making room for indirect call)
0779    0269  21 6F 02                     LD    HL,$026F                ; Return address to 026F
0780    026C  E3                           EX    (SP),HL                 ; Return address (026F) now on stack. Handler in HL.
0781    026D  D5                           PUSH  DE                      ; Push pointer to data struct (xx04) for handler to use
0782    026E  E9                           JP    (HL)                    ; Run object's code (will return to next line)
0783    026F  E1                           POP   HL                      ; Restore pointer to xx04
0784    0270  11 0C 00                     LD    DE,$000C                ; Offset to next ...
0785    0273  19                           ADD   HL,DE                   ; ... game task (C+4=10)
0786    0274  C3 4B 02                     JP    $024B                   ; Do next game task
0787                    
0788                    ; Word at xx00 and xx01 is non-zero. Decrement it and move to next task
0789                    
0790    0277  05                           DEC   B                       ; Decrement ...
0791    0278  04                           INC   B                       ; ... two ...
0792    0279  C2 7D 02                     JP    NZ,$027D                ; ... byte ...
0793    027C  3D                           DEC   A                       ; ... value ...
0794    027D  05                           DEC   B                       ; ... at ...
0795    027E  70                           LD    (HL),B                  ; ... xx00 ...
0796    027F  2B                           DEC   HL                      ; ... and ...
0797    0280  77                           LD    (HL),A                  ; ... xx01
0798                    
0799    0281  11 10 00                     LD    DE,$0010                ; Next ...
0800    0284  19                           ADD   HL,DE                   ; ... object descriptor
0801    0285  C3 4B 02                     JP    $024B                   ; Keep processing game objects
0802                    
0803                    ; Word at xx00 and xx01 is zero and byte at xx02 is non-zero. Decrement xx02 and
0804                    ; move to next task
0805                    
0806    0288  35                           DEC   (HL)                    ; Decrement the xx02 counter
0807    0289  2B                           DEC   HL                      ; Back up to ...
0808    028A  2B                           DEC   HL                      ; ... start of game task
0809    028B  C3 81 02                     JP    $0281                   ; Next game task
0810                    
0811                    ; Game object 0: Move/draw the player
0812                    
0813                    ; This task is only called at the mid-screen ISR. It ALWAYS does its work here, even though
0814                    ; the player can be on the top or bottom of the screen (not rotated)
0815                    
0816    028E  E1        GameObj0           POP   HL                      ; Get player object structure 2014
0817    028F  23                           INC   HL                      ; Point to blow-up status
0818    0290  7E                           LD    A,(HL)                  ; Get player blow-up status
0819    0291  FE FF                        CP    $FF                     ; Player is blowing up?
0820    0293  CA 3B 03                     JP    Z,$033B                 ; No ... go do normal movement
0821                    
0822                    ; Handle blowing up player
0823                    
0824    0296  23                           INC   HL                      ; Point to blow-up delay count
0825    0297  35                           DEC   (HL)                    ; Decrement the blow-up delay
0826    0298  C0                           RET   NZ                      ; Not time for a new blow-up sprite ... out
0827    0299  47                           LD    B,A                     ; Hold sprite image number
0828    029A  AF                           XOR   A                       ; 0
0829    029B  32 68 20                     LD    (PlayerOK),A            ; Player is NOT OK ... player is blowing up
0830    029E  32 69 20                     LD    (EnableAlienFire),A     ; Alien fire is disabled
0831    02A1  3E 30                        LD    A,$30                   ; Reset count ...
0832    02A3  32 6A 20                     LD    (AlienFireDelay),A      ; ... till alien shots are enabled
0833    02A6  78                           LD    A,B                     ; Restore sprite image number (used if we go to 39B)
0834    02A7  36 05                        LD    (HL),$05                ; Reload time between blow-up changes
0835    02A9  23                           INC   HL                      ; Point to number of blow-up changes
0836    02AA  35                           DEC   (HL)                    ; Count down blow-up changes
0837    02AB  C2 9B 03                     JP    NZ,DrawPlayerDie        ; Still blowing up ... go draw next sprite
0838                    
0839                    ; Blow up finished
0840                    
0841    02AE  2A 1A 20                     LD    HL,(PlayerYr)           ; Player's coordinates
0842    02B1  06 10                        LD    B,$10                   ; 16 Bytes
0843    02B3  CD 24 14                     CALL  EraseSimpleSprite       ; Erase simple sprite (the player)
0844    02B6  21 10 20                     LD    HL,Obj0Timer            ; Restore player ...
0845    02B9  11 10 1B                     LD    DE,$1B10                ; ... structure ...
0846    02BC  06 10                        LD    B,$10                   ; ... from ...
0847    02BE  CD 32 1A                     CALL  BlockCopy               ; ... ROM mirror
0848    02C1  06 00                        LD    B,$00                   ; Turn off ...
0849    02C3  CD DC 19                     CALL  SoundBits3Off           ; ... all sounds
0850    02C6  3A 6D 20                     LD    A,(Invaded)             ; Has rack reached ...
0851    02C9  A7                           AND   A                       ; ... the bottom of the screen?
0852    02CA  C0                           RET   NZ                      ; Yes ... done here
0853    02CB  3A EF 20                     LD    A,(GameMode)            ; Are we in ...
0854    02CE  A7                           AND   A                       ; ... game mode?
0855    02CF  C8                           RET   Z                       ; No ... return to splash screens
0856    02D0  31 00 24                     LD    SP,STACK_TOP            ; We aren't going to return
0857    02D3  FB                           EI                            ; Enable interrupts (we just dropped the ISR context)
0858    02D4  CD D7 19                     CALL  DisableGameTasks        ; Disable game tasks
0859    02D7  CD 2E 09                     CALL  $092E                   ; Get number of ships for active player
0860    02DA  A7                           AND   A                       ; Any left?
0861    02DB  CA 6D 16                     JP    Z,$166D                 ; No ... handle game over for player
0862    02DE  CD E7 18                     CALL  $18E7                   ; Get player-alive status pointer
0863    02E1  7E                           LD    A,(HL)                  ; Is player ...
0864    02E2  A7                           AND   A                       ; ... alive?
0865    02E3  CA 2C 03                     JP    Z,$032C                 ; Yes ... remove a ship from player's stash and reenter game loop
0866    02E6  3A CE 20                     LD    A,(TwoPlayers)          ; Multi-player game
0867    02E9  A7                           AND   A                       ; Only one player?
0868    02EA  CA 2C 03                     JP    Z,$032C                 ; Yes ... remove a ship from player's stash and reenter game loop
0869    02ED  3A 67 20                     LD    A,(PlayerDataMSB)       ; Player data MSB
0870    02F0  F5                           PUSH  AF                      ; Hold the MSB
0871    02F1  0F                           RRCA                          ; Player 1 is active player?
0872    02F2  DA 32 03                     JP    C,$0332                 ; Yes ... go store player 1 shields and come back to 02F8
0873    02F5  CD 0E 02                     CALL  RememberShields2        ; No ... go store player 2 shields
0874    02F8  CD 78 08                     CALL  $0878                   ; Get ref-alien info and pointer to storage
0875    02FB  73                           LD    (HL),E                  ; Hold the ...
0876    02FC  23                           INC   HL                      ; ... ref-alien ...
0877    02FD  72                           LD    (HL),D                  ; ... screen coordinates
0878    02FE  2B                           DEC   HL                      ; Back up ...
0879    02FF  2B                           DEC   HL                      ; .. to delta storage
0880    0300  70                           LD    (HL),B                  ; Store ref-alien's delta (direction)
0881                    
0882    0301  00                           NOP
0883                    
0884    0302  CD E4 01                     CALL  CopyRamMirror           ; Copy RAM mirror (getting ready to switch players)
0885    0305  F1                           POP   AF                      ; Restore active player MSB
0886    0306  0F                           RRCA                          ; Player 1?
0887    0307  3E 21                        LD    A,$21                   ; Player 1 data pointer
0888    0309  06 00                        LD    B,$00                   ; Cocktail bit=0 (player 1)
0889    030B  D2 12 03                     JP    NC,$0312                ; It was player one ... keep data for player 2
0890    030E  06 20                        LD    B,$20                   ; Cocktail bit=1 (player 2)
0891    0310  3E 22                        LD    A,$22                   ; Player 2 data pointer
0892    0312  32 67 20                     LD    (PlayerDataMSB),A       ; Change players
0893    0315  CD B6 0A                     CALL  TwoSecDelay             ; Two second delay
0894    0318  AF                           XOR   A                       ; Clear the player-object ...
0895    0319  32 11 20                     LD    (Obj0Timer + 1),A       ; ... timer (player can move instantly after switching players)
0896    031C  78                           LD    A,B                     ; Cocktail bit to A
0897    031D  D3 05                        OUT   (SOUND2),A              ; Set the cocktail mode
0898    031F  3C                           INC   A                       ; Fleet sound 1 (first tone)
0899    0320  32 98 20                     LD    (SoundPort5),A          ; Set the port 5 hold
0900    0323  CD D6 09                     CALL  ClearPlayField          ; Clear center window
0901    0326  CD 7F 1A                     CALL  RemoveShip              ; Remove a ship and update indicators
0902    0329  C3 F9 07                     JP    $07F9                   ; Tell the players that the switch has been made
0903                    
0904    032C  CD 7F 1A                     CALL  RemoveShip              ; Remove a ship and update indicators
0905    032F  C3 17 08                     JP    $0817                   ; Continue into game loop
0906                    
0907    0332  CD 09 02                     CALL  RememberShields1        ; Remember the shields for player 1
0908    0335  C3 F8 02                     JP    $02F8                   ; Back to switching-players above
0909                    
0910    0338  00                           NOP
0911    0339  00                           NOP
0912    033A  00                           NOP
0913                    
0914                    ; Player not blowing up ... handle inputs
0915                    
0916    033B  21 68 20                     LD    HL,PlayerOK             ; Player OK flag
0917    033E  36 01                        LD    (HL),$01                ; Flag 1 ... player is OK
0918    0340  23                           INC   HL                      ; 2069
0919    0341  7E                           LD    A,(HL)                  ; Alien shots enabled?
0920    0342  A7                           AND   A                       ; Set flags
0921    0343  C3 B0 03                     JP    $03B0                   ; Continue
0922                    
0923    0346  00                           NOP
0924                    
0925    0347  2B                           DEC   HL                      ; 2069
0926    0348  36 01                        LD    (HL),$01                ; Enable alien fire
0927                    
0928    034A  3A 1B 20                     LD    A,(PlayerXr)            ; Current player coordinates
0929    034D  47                           LD    B,A                     ; Hold it
0930    034E  3A EF 20                     LD    A,(GameMode)            ; Are we in ...
0931    0351  A7                           AND   A                       ; ... game mode?
0932    0352  C2 63 03                     JP    NZ,$0363                ; Yes ... use switches as player controls
0933                    
0934    0355  3A 1D 20                     LD    A,(NextDemoCmd)         ; Get demo command
0935    0358  0F                           RRCA                          ; Is it right?
0936    0359  DA 81 03                     JP    C,MovePlayerRight       ; Yes ... do right
0937    035C  0F                           RRCA                          ; Is it left?
0938    035D  DA 8E 03                     JP    C,$038E                 ; Yes ... do left
0939    0360  C3 6F 03                     JP    $036F                   ; Skip over movement (draw player and out)
0940                    
0941                    ; Player is in control
0942                    
0943    0363  CD C0 17                     CALL  ReadInputs              ; Read active player controls
0944    0366  07                           RLCA                          ; Test for ...
0945    0367  07                           RLCA                          ; ... right button
0946    0368  DA 81 03                     JP    C,MovePlayerRight       ; Yes ... handle move right
0947    036B  07                           RLCA                          ; Test for left button
0948    036C  DA 8E 03                     JP    C,$038E                 ; Yes ... handle move left
0949                    
0950                    ; Draw player sprite
0951                    
0952    036F  21 18 20                     LD    HL,PlayerSprPic         ; Active player descriptor
0953    0372  CD 3B 1A                     CALL  ReadDesc                ; Load 5 byte sprite descriptor in order: EDLHB
0954    0375  CD 47 1A                     CALL  ConvToScr               ; Convert HL to screen coordinates
0955    0378  CD 39 14                     CALL  DrawSimpleSprite        ; Draw player
0956    037B  3E 00                        LD    A,$00                   ; Clear the task timer. Nobody changes this but it could have ...
0957    037D  32 12 20                     LD    (Obj0TimerExtra),A      ; ... been speed set for the player with a value other than 0 (not XORA)
0958    0380  C9                           RET                           ; Done
0959                    
0960                    ; Handle player moving right
0961                    
0962    0381  78        MovePlayerRight    LD    A,B                     ; Player coordinate
0963    0382  FE D9                        CP    $D9                     ; At right edge?
0964    0384  CA 6F 03                     JP    Z,$036F                 ; Yes ... ignore this
0965    0387  3C                           INC   A                       ; Bump X coordinate
0966    0388  32 1B 20                     LD    (PlayerXr),A            ; New X coordinate
0967    038B  C3 6F 03                     JP    $036F                   ; Draw player and out
0968                    
0969                    ; Handle player moving left
0970                    
0971    038E  78        MovePlayerLeft     LD    A,B                     ; Player coordinate
0972    038F  FE 30                        CP    $30                     ; At left edge
0973    0391  CA 6F 03                     JP    Z,$036F                 ; Yes ... ignore this
0974    0394  3D                           DEC   A                       ; Bump X coordinate
0975    0395  32 1B 20                     LD    (PlayerXr),A            ; New X coordinate
0976    0398  C3 6F 03                     JP    $036F                   ; Draw player and out
0977                    
0978                    ; Toggle the player's blowing-up sprite between two pictures and draw it
0979                    
0980    039B  3C        DrawPlayerDie      INC   A                       ; Toggle blowing-up ...
0981    039C  E6 01                        AND   $01                     ; ... player sprite (0,1,0,1)
0982    039E  32 15 20                     LD    (PlayerAlive),A         ; Hold current state
0983    03A1  07                           RLCA                          ; *2
0984    03A2  07                           RLCA                          ; *4
0985    03A3  07                           RLCA                          ; *8
0986    03A4  07                           RLCA                          ; *16
0987    03A5  21 70 1C                     LD    HL,$1C70                ; Base blow-up sprite location
0988    03A8  85                           ADD   A,L                     ; Offset sprite ...
0989    03A9  6F                           LD    L,A                     ; ... pointer
0990    03AA  22 18 20                     LD    (PlayerSprPic),HL       ; New blow-up sprite picture
0991    03AD  C3 6F 03                     JP    $036F                   ; Draw new blow-up sprite and out
0992                    
0993    03B0  C2 4A 03                     JP    NZ,$034A                ; Alien shots enabled ... move player's ship, draw it, and out
0994    03B3  23                           INC   HL                      ; To 206A
0995    03B4  35                           DEC   (HL)                    ; Time until aliens can fire
0996    03B5  C2 4A 03                     JP    NZ,$034A                ; Not time to enable ... move player's ship, draw it, and out
0997    03B8  C3 46 03                     JP    $0346                   ; Enable alien fire ... move player's ship, draw it, and out
0998                    
0999                    ; Game object 1: Move/draw the player shot
1000                    
1001                    ; This task executes at either mid-screen ISR (if it is on the top half of the non-rotated screen) or
1002                    ; at the end-screen ISR (if it is on the bottom half of the screen).
1003                    
1004    03BB  11 2A 20  GameObj1           LD    DE,Obj1CoorXr           ; Object's Xr coordinate
1005    03BE  CD 06 1A                     CALL  CompYToBeam             ; Compare to screen-update location
1006    03C1  E1                           POP   HL                      ; Pointer to task data
1007    03C2  D0                           RET   NC                      ; Make sure we are in the right ISR
1008                    
1009    03C3  23                           INC   HL                      ; Point to 2025 ... the shot status
1010    03C4  7E                           LD    A,(HL)                  ; Get shot status
1011    03C5  A7                           AND   A                       ; Return if ...
1012    03C6  C8                           RET   Z                       ; ... no shot is active
1013                    
1014    03C7  FE 01                        CP    $01                     ; Shot just starting (requested elsewhere)?
1015    03C9  CA FA 03                     JP    Z,InitPlyShot           ; Yes ... go initiate shot
1016                    
1017    03CC  FE 02                        CP    $02                     ; Progressing normally?
1018    03CE  CA 0A 04                     JP    Z,MovePlyShot           ; Yes ... go move it
1019                    
1020    03D1  23                           INC   HL                      ; 2026
1021    03D2  FE 03                        CP    $03                     ; Shot blowing up (not because of alien)?
1022    03D4  C2 2A 04                     JP    NZ,$042A                ; No ... try other options
1023                    
1024                    ; Shot blowing up because it left the playfield, hit a shield, or hit another bullet
1025                    
1026    03D7  35                           DEC   (HL)                    ; Decrement the timer
1027    03D8  CA 36 04                     JP    Z,EndOfBlowup           ; If done then
1028    03DB  7E                           LD    A,(HL)                  ; Get timer value
1029    03DC  FE 0F                        CP    $0F                     ; Starts at 10 ... first decrement brings us here
1030    03DE  C0                           RET   NZ                      ; Not the first time ... explosion has been drawn
1031                    
1032                    ; Draw explosion first pass through timer loop
1033                    
1034    03DF  E5                           PUSH  HL                      ; Hold pointer to data
1035    03E0  CD 30 04                     CALL  ReadPlyShot             ; Read shot descriptor
1036    03E3  CD 52 14                     CALL  EraseShifted            ; Erase the sprite
1037    03E6  E1                           POP   HL                      ; 2026 (timer flag)
1038    03E7  23                           INC   HL                      ; 2027 point to sprite LSB
1039    03E8  34                           INC   (HL)                    ; Change 1C90 to 1C91
1040    03E9  23                           INC   HL                      ; 2028
1041    03EA  23                           INC   HL                      ; 2029
1042    03EB  35                           DEC   (HL)                    ; Drop X coordinate ...
1043    03EC  35                           DEC   (HL)                    ; ... by 2
1044    03ED  23                           INC   HL                      ; 202A
1045    03EE  35                           DEC   (HL)                    ; Drop Y ...
1046    03EF  35                           DEC   (HL)                    ; ... coordinate ...
1047    03F0  35                           DEC   (HL)                    ; ... by ...
1048    03F1  23                           INC   HL                      ; ... 3
1049    03F2  36 08                        LD    (HL),$08                ; 202B 8 bytes in size of sprite
1050    03F4  CD 30 04                     CALL  ReadPlyShot             ; Read player shot structure
1051    03F7  C3 00 14                     JP    DrawShiftedSprite       ; Draw sprite and out
1052                    
1053    03FA  3C        InitPlyShot        INC   A                       ; Type is now ...
1054    03FB  77                           LD    (HL),A                  ; ... 2 (in progress)
1055    03FC  3A 1B 20                     LD    A,(PlayerXr)            ; Players Y coordinate
1056    03FF  C6 08                        ADD   A,$08                   ; To center of player
1057    0401  32 2A 20                     LD    (Obj1CoorXr),A          ; Shot's Y coordinate
1058    0404  CD 30 04                     CALL  ReadPlyShot             ; Read 5 byte structure
1059    0407  C3 00 14                     JP    DrawShiftedSprite       ; Draw sprite and out
1060                    
1061    040A  CD 30 04  MovePlyShot        CALL  ReadPlyShot             ; Read the shot structure
1062    040D  D5                           PUSH  DE                      ; Hold pointer to sprite image
1063    040E  E5                           PUSH  HL                      ; Hold sprite coordinates
1064    040F  C5                           PUSH  BC                      ; Hold sprite size (in B)
1065    0410  CD 52 14                     CALL  EraseShifted            ; Erase the sprite from the screen
1066    0413  C1                           POP   BC                      ; Restore size
1067    0414  E1                           POP   HL                      ; Restore coords
1068    0415  D1                           POP   DE                      ; Restore pointer to sprite image
1069    0416  3A 2C 20                     LD    A,(ShotDeltaX)          ; DeltaX for shot
1070    0419  85                           ADD   A,L                     ; Move the shot ...
1071    041A  6F                           LD    L,A                     ; ... up the screen
1072    041B  32 29 20                     LD    (Obj1CoorYr),A          ; Store shot's new X coordinate
1073    041E  CD 91 14                     CALL  DrawSprCollision        ; Draw sprite with collision detection
1074    0421  3A 61 20                     LD    A,(Collision)           ; Test for ...
1075    0424  A7                           AND   A                       ; ... collision
1076    0425  C8                           RET   Z                       ; No collision ... out
1077                    
1078                    ; Collision with alien detected
1079                    
1080    0426  32 02 20                     LD    (AlienIsExploding),A    ; Set to not-0 indicating ...
1081    0429  C9                           RET                           ; ... an alien is blowing up
1082                    
1083                    ; Other shot-status options
1084                    
1085    042A  FE 05                        CP    $05                     ; Alien explosion in progress?
1086    042C  C8                           RET   Z                       ; Yes ... nothing to do
1087    042D  C3 36 04                     JP    EndOfBlowup             ; Anything else erases the shot and removes it from duty
1088                    
1089    0430  21 27 20  ReadPlyShot        LD    HL,Obj1Image            ; Read 5 byte sprite structure for ...
1090    0433  C3 3B 1A                     JP    ReadDesc                ; ... player shot
1091                    
1092    0436  CD 30 04  EndOfBlowup        CALL  ReadPlyShot             ; Read the shot structure
1093    0439  CD 52 14                     CALL  EraseShifted            ; Erase the player's shot
1094    043C  21 25 20                     LD    HL,PlyrShotStatus       ; Reinit ...
1095    043F  11 25 1B                     LD    DE,$1B25                ; ... shot structure ...
1096    0442  06 07                        LD    B,$07                   ; ... from ...
1097    0444  CD 32 1A                     CALL  BlockCopy               ; ... ROM mirror
1098    0447  2A 8D 20                     LD    HL,(SaucerScore)        ; Get pointer to saucer-score table
1099    044A  2C                           INC   L                       ; Every shot explosion advances it one
1100    044B  7D                           LD    A,L                     ; Have we passed ...
1101    044C  FE 63                        CP    $63                     ; ... the end at 1D63 (bug! this should be $64 to cover all 16 values)
1102    044E  DA 53 04                     JP    C,$0453                 ; No .... keep it
1103    0451  2E 54                        LD    L,$54                   ; Wrap back around to 1D54
1104    0453  22 8D 20                     LD    (SaucerScore),HL        ; New score pointer
1105    0456  2A 8F 20                     LD    HL,(ShotCount)          ; Increments with every shot ...
1106    0459  2C                           INC   L                       ; ... but only LSB ** ...
1107    045A  22 8F 20                     LD    (ShotCount),HL          ; ... used for saucer direction
1108    045D  3A 84 20                     LD    A,(SaucerActive)        ; Is saucer ...
1109    0460  A7                           AND   A                       ; ... on screen?
1110    0461  C0                           RET   NZ                      ; Yes ... don't reset it
1111                    
1112                    ; Setup saucer direction for next trip
1113                    
1114    0462  7E                           LD    A,(HL)                  ; Shot counter
1115    0463  E6 01                        AND   $01                     ; Lowest bit set?
1116    0465  01 29 02                     LD    BC,$0229                ; Xr delta of 2 starting at Xr=29
1117    0468  C2 6E 04                     JP    NZ,$046E                ; Yes ... use 2/29
1118    046B  01 E0 FE                     LD    BC,$FEE0                ; No ... Xr delta of -2 starting at Xr=E0
1119    046E  21 8A 20                     LD    HL,SaucerPriPicMSB      ; Saucer descriptor
1120    0471  71                           LD    (HL),C                  ; Store Xr coordinate
1121    0472  23                           INC   HL                      ; Point to ...
1122    0473  23                           INC   HL                      ; ... delta Xr
1123    0474  70                           LD    (HL),B                  ; Store delta Xr
1124    0475  C9                           RET                           ; Done
1125                    
1126                    ; Game object 2: Allien rolling-shot (targets player specifically)
1127                    
1128                    ; The 2-byte value at 2038 is where the firing-column-table-pointer would be (see other
1129                    ; shots ... next game objects). This shot doesn't use that table. It targets the player
1130                    ; specifically. Instead the value is used as a flag to have the shot skip its first
1131                    ; attempt at firing every time it is reinitialized (when it blows up)
1132                    
1133                    ; The task-timer at 2032 is copied to 2080 in the game loop. The flag is used as a
1134                    ; synchronization flag to keep all the shots processed on separate interrupt ticks. This
1135                    ; has the main effect of slowing the shots down
1136                    
1137                    ; When the timer is 2 the squiggly-shot/saucer (object 4) runs
1138                    ; When the timer is 1 the plunger-shot (object 3) runs
1139                    ; When the timer is 0 this object, the rolling-shot, runs
1140                    
1141    0476  E1        GameObj2           POP   HL                      ; Game object data
1142    0477  3A 32 1B                     LD    A,($1B32)               ; Restore delay from ...
1143    047A  32 32 20                     LD    (Obj2TimerExtra),A      ; ... ROM mirror (value 2)
1144    047D  2A 38 20                     LD    HL,(RolShotColFirTbl)   ; Get pointer to ...
1145    0480  7D                           LD    A,L                     ; ... column-firing table.
1146    0481  B4                           OR    H                       ; All zeros?
1147    0482  C2 8A 04                     JP    NZ,$048A                ; No ... must be a valid column. Go fire.
1148    0485  2B                           DEC   HL                      ; Decrement the counter
1149    0486  22 38 20                     LD    (RolShotColFirTbl),HL   ; Store new counter value (run the shot next time)
1150    0489  C9                           RET                           ; Done
1151                    
1152    048A  11 35 20                     LD    DE,RolShotStatus        ; Rolling-shot data structure
1153    048D  3E F9                        LD    A,$F9                   ; Last picture of 'rolling' alien shot
1154    048F  CD 50 05                     CALL  ToShotStruct            ; Set code to handle rolling-shot
1155    0492  3A 46 20                     LD    A,(PluShotStepCnt)      ; Get the plunger-shot step count
1156    0495  32 70 20                     LD    (OtherShot1),A          ; Hold it
1157    0498  3A 56 20                     LD    A,(SquShotStepCnt)      ; Get the squiggly-shot step count
1158    049B  32 71 20                     LD    (OtherShot2),A          ; Hold it
1159    049E  CD 63 05                     CALL  HandleAlienShot         ; Handle active shot structure
1160    04A1  3A 78 20                     LD    A,(AlienShotBlowCnt)    ; Blow up counter
1161    04A4  A7                           AND   A                       ; Test if shot has cycled through blowing up
1162    04A5  21 35 20                     LD    HL,RolShotStatus        ; Rolling-shot data structure
1163    04A8  C2 5B 05                     JP    NZ,FromShotStruct       ; If shot is still running, copy the updated data and out
1164                    
1165                    ; The rolling-shot has blown up. Reset the data structure
1166                    
1167    04AB  11 30 1B  ResetShot          LD    DE,$1B30                ; Reload ...
1168    04AE  21 30 20                     LD    HL,Obj2Timer            ; ... object ...
1169    04B1  06 10                        LD    B,16                    ; ... structure ...
1170    04B3  C3 32 1A                     JP    BlockCopy               ; ... from ROM mirror and out
1171                    
1172                    ; Game object 3: Alien plunger-shot
1173                    
1174                    ; This is skipped if there is only one alien left on the screen
1175                    
1176    04B6  E1        GameObj3           POP   HL                      ; Game object data
1177    04B7  3A 6E 20                     LD    A,(SkipPlunger)         ; One alien left? Skip plunger shot?
1178    04BA  A7                           AND   A                       ; Check
1179    04BB  C0                           RET   NZ                      ; Yes. Only one alien. Skip this shot.
1180    04BC  3A 80 20                     LD    A,(ShotSync)            ; Sync flag (copied from GO-2's timer value)
1181    04BF  FE 01                        CP    $01                     ; GO-2 and GO-4 are idle?
1182    04C1  C0                           RET   NZ                      ; No ... only one shot at a time
1183                    
1184    04C2  11 45 20                     LD    DE,PluShotStatus        ; Plunger alien shot data structure
1185    04C5  3E ED                        LD    A,$ED                   ; Last picture of 'plunger' alien shot
1186    04C7  CD 50 05                     CALL  ToShotStruct            ; Copy the plunger alien to the active structure
1187    04CA  3A 36 20                     LD    A,(RolShotStepCnt)      ; Step count from rolling-shot
1188    04CD  32 70 20                     LD    (OtherShot1),A          ; Hold it
1189    04D0  3A 56 20                     LD    A,(SquShotStepCnt)      ; Step count from squiggly shot
1190    04D3  32 71 20                     LD    (OtherShot2),A          ; Hold it
1191    04D6  CD 63 05                     CALL  HandleAlienShot         ; Handle active shot structure
1192    04D9  3A 76 20                     LD    A,(AlienShotColFirTbl)  ; LSB of column-firing table
1193    04DC  FE 10                        CP    $10                     ; Been through all entries in the table?
1194    04DE  DA E7 04                     JP    C,$04E7                 ; Not yet ... table is OK
1195    04E1  3A 48 1B                     LD    A,($1B48)               ; Been through all ..
1196    04E4  32 76 20                     LD    (AlienShotColFirTbl),A  ; ... so reset pointer into firing-column table
1197    04E7  3A 78 20                     LD    A,(AlienShotBlowCnt)    ; Get the blow up timer
1198    04EA  A7                           AND   A                       ; Zero means shot is done
1199    04EB  21 45 20                     LD    HL,PluShotStatus        ; Plunger shot data
1200    04EE  C2 5B 05                     JP    NZ,FromShotStruct       ; If shot is still running, go copy the updated data and out
1201                    
1202    04F1  11 40 1B                     LD    DE,$1B40                ; Reload ...
1203    04F4  21 40 20                     LD    HL,Obj3Timer            ; ... object ...
1204    04F7  06 10                        LD    B,16                    ; ... structure ...
1205    04F9  CD 32 1A                     CALL  BlockCopy               ; ... from mirror
1206                    
1207    04FC  3A 82 20                     LD    A,(NumAliens)           ; Number of aliens on screen
1208    04FF  3D                           DEC   A                       ; Is there only one left?
1209    0500  C2 08 05                     JP    NZ,$0508                ; No ... move on
1210    0503  3E 01                        LD    A,$01                   ; Disable plunger shot ...
1211    0505  32 6E 20                     LD    (SkipPlunger),A         ; ... when only one alien remains
1212    0508  2A 76 20                     LD    HL,(AlienShotColFirTbl) ; Set the plunger shot's ...
1213    050B  C3 7E 06                     JP    $067E                   ; ... column-firing pointer data
1214                    
1215                    ; Game task 4 when splash screen alien is shooting extra 'C' with a squiggly shot
1216                    
1217    050E  E1                           POP   HL                      ; Ignore the task data pointer passed on stack
1218                    
1219                    ; GameObject 4 comes here if processing a squiggly shot
1220                    
1221    050F  11 55 20                     LD    DE,SquShotStatus        ; Squiggly shot data structure
1222    0512  3E DB                        LD    A,$DB                   ; LSB of last byte of picture
1223    0514  CD 50 05                     CALL  ToShotStruct            ; Copy squiggly shot to
1224    0517  3A 46 20                     LD    A,(PluShotStepCnt)      ; Get plunger ...
1225    051A  32 70 20                     LD    (OtherShot1),A          ; ... step count
1226    051D  3A 36 20                     LD    A,(RolShotStepCnt)      ; Get rolling ...
1227    0520  32 71 20                     LD    (OtherShot2),A          ; ... step count
1228    0523  CD 63 05                     CALL  HandleAlienShot         ; Handle active shot structure
1229    0526  3A 76 20                     LD    A,(AlienShotColFirTbl)  ; LSB of column-firing table pointer
1230    0529  FE 15                        CP    $15                     ; Have we processed all entries?
1231    052B  DA 34 05                     JP    C,$0534                 ; No ... don't reset it
1232    052E  3A 58 1B                     LD    A,($1B58)               ; Reset the pointer ...
1233    0531  32 76 20                     LD    (AlienShotColFirTbl),A  ; ... back to the start of the table
1234    0534  3A 78 20                     LD    A,(AlienShotBlowCnt)    ; Check to see if squiggly shot is done
1235    0537  A7                           AND   A                       ; 0 means blow-up timer expired
1236    0538  21 55 20                     LD    HL,SquShotStatus        ; Squiggly shot data structure
1237    053B  C2 5B 05                     JP    NZ,FromShotStruct       ; If shot is still running, go copy the updated data and out
1238                    
1239                    ; Shot explosion is over. Remove the shot
1240                    
1241    053E  11 50 1B                     LD    DE,$1B50                ; Reload
1242    0541  21 50 20                     LD    HL,Obj4Timer            ; ... object ...
1243    0544  06 10                        LD    B,16                    ; ... structure ...
1244    0546  CD 32 1A                     CALL  BlockCopy               ; ... from mirror
1245    0549  2A 76 20                     LD    HL,(AlienShotColFirTbl) ; Copy pointer to column-firing table ...
1246    054C  22 58 20                     LD    (SquShotColFirTbl),HL   ; ... back to data structure (for next shot)
1247    054F  C9                           RET                           ; Done
1248                    
1249    0550  32 7F 20  ToShotStruct       LD    (ShotPicEnd),A          ; LSB of last byte of last picture in sprite
1250    0553  21 73 20                     LD    HL,AlienShotStatus      ; Destination is the shot-structure
1251    0556  06 0B                        LD    B,11                    ; 11 bytes
1252    0558  C3 32 1A                     JP    BlockCopy               ; Block copy and out
1253                    
1254    055B  11 73 20  FromShotStruct     LD    DE,AlienShotStatus      ; Source is the shot-structure
1255    055E  06 0B                        LD    B,$0B                   ; 11 bytes
1256    0560  C3 32 1A                     JP    BlockCopy               ; Block copy and out
1257                    
1258                    ; Each of the 3 shots copy their data to the 2073 structure (0B bytes) and call this.
1259                    ; Then they copy back if the shot is still active. Otherwise they copy from the mirror
1260                    
1261                    ; The alien 'fire rate' is based on the number of steps the other two shots on the screen
1262                    ; have made. The smallest number-of-steps is compared to the reload-rate. If it is too
1263                    ; soon then no shot is made. The reload-rate is based on the player's score. The MSB
1264                    ; is looked up in a table to get the reload-rate. The smaller the rate the faster the
1265                    ; aliens fire. Setting rate this way keeps shots from walking on each other
1266                    
1267    0563  21 73 20  HandleAlienShot    LD    HL,AlienShotStatus      ; Start of active shot structure
1268    0566  7E                           LD    A,(HL)                  ; Get the shot status
1269    0567  E6 80                        AND   $80                     ; Is the shot active?
1270    0569  C2 C1 05                     JP    NZ,$05C1                ; Yes ... go move it
1271                    
1272    056C  3A C1 20                     LD    A,(IsrSplashTask)       ; ISR splash task
1273    056F  FE 04                        CP    $04                     ; Shooting the 'C' ?
1274    0571  3A 69 20                     LD    A,(EnableAlienFire)     ; Alien fire enabled flag
1275    0574  CA B7 05                     JP    Z,$05B7                 ; We are shooting the extra 'C' ... just flag it active and out
1276    0577  A7                           AND   A                       ; Is alien fire enabled?
1277    0578  C8                           RET   Z                       ; No ... don't start a new shot
1278                    
1279    0579  23                           INC   HL                      ; 2074 step count of current shot
1280    057A  36 00                        LD    (HL),$0000              ; clear the step count
1281                    
1282                    ; Make sure it isn't too soon to fire another shot
1283                    
1284    057C  3A 70 20                     LD    A,(OtherShot1)          ; Get the step count of the 1st 'other shot'
1285    057F  A7                           AND   A                       ; Any steps made?
1286    0580  CA 89 05                     JP    Z,$0589                 ; No ... ignore this count
1287    0583  47                           LD    B,A                     ; Shuffle off step count
1288    0584  3A CF 20                     LD    A,(AlienShotRelRate)    ; Get the reload rate (based on MSB of score)
1289    0587  B8                           CP    B                       ; Too soon to fire again?
1290    0588  D0                           RET   NC                      ; Yes ... don't fire
1291    0589  3A 71 20                     LD    A,(OtherShot2)          ; Get the step count of the 2nd 'other shot'
1292    058C  A7                           AND   A                       ; Any steps made?
1293    058D  CA 96 05                     JP    Z,$0596                 ; No steps on any shot ... we are clear to fire
1294    0590  47                           LD    B,A                     ; Shuffle off step count
1295    0591  3A CF 20                     LD    A,(AlienShotRelRate)    ; Get the reload rate (based on MSB of score)
1296    0594  B8                           CP    B                       ; Too soon to fire again?
1297    0595  D0                           RET   NC                      ; Yes ... don't fire
1298    0596  23                           INC   HL                      ; 2075
1299    0597  7E                           LD    A,(HL)                  ; Get tracking flag
1300    0598  A7                           AND   A                       ; Does this shot track the player?
1301    0599  CA 1B 06                     JP    Z,$061B                 ; Yes ... go make a tracking shot;
1302    059C  2A 76 20                     LD    HL,(AlienShotColFirTbl) ; Column-firing table
1303    059F  4E                           LD    C,(HL)                  ; Get next column to fire from
1304    05A0  23                           INC   HL                      ; Bump the ...
1305                    
1306    05A1  00                           NOP
1307                    
1308    05A2  22 76 20                     LD    (AlienShotColFirTbl),HL ; ... pointer into column table
1309    05A5  CD 2F 06                     CALL  FindInColumn            ; Find alien in target column
1310    05A8  D0                           RET   NC                      ; No alien is alive in target column ... out
1311                    
1312    05A9  CD 7A 01                     CALL  GetAlienCoords          ; Get coordinates of alien (lowest alien in firing column)
1313    05AC  79                           LD    A,C                     ; Offset ...
1314    05AD  C6 07                        ADD   A,7                     ; ... Y by 7
1315    05AF  67                           LD    H,A                     ; To H
1316    05B0  7D                           LD    A,L                     ; Offset ...
1317    05B1  D6 0A                        SUB   10                      ; ... X down 10
1318    05B3  6F                           LD    L,A                     ; To L
1319    05B4  22 7B 20                     LD    (AlienShotYr),HL        ; Set shot coordinates below alien
1320                    
1321    05B7  21 73 20                     LD    HL,AlienShotStatus      ; Alien shot status
1322    05BA  7E                           LD    A,(HL)                  ; Get the status
1323    05BB  F6 80                        OR    $80                     ; Mark this shot ...
1324    05BD  77                           LD    (HL),A                  ; ... as actively running
1325    05BE  23                           INC   HL                      ; 2074 step count
1326    05BF  34                           INC   (HL)                    ; Give this shot 1 step (it just started)
1327    05C0  C9                           RET                           ; Done
1328                    
1329                    ; Move the alien shot
1330                    
1331    05C1  11 7C 20                     LD    DE,AlienShotXr          ; Alien-shot Y coordinate
1332    05C4  CD 06 1A                     CALL  CompYToBeam             ; Compare to beam position
1333    05C7  D0                           RET   NC                      ; Not the right ISR for this shot
1334                    
1335    05C8  23                           INC   HL                      ; 2073 status
1336    05C9  7E                           LD    A,(HL)                  ; Get shot status
1337    05CA  E6 01                        AND   $01                     ; Bit 0 is 1 if blowing up
1338    05CC  C2 44 06                     JP    NZ,ShotBlowingUp        ; Go do shot-is-blowing-up sequence
1339    05CF  23                           INC   HL                      ; 2074 step count
1340    05D0  34                           INC   (HL)                    ; Count the steps (used for fire rate)
1341    05D1  CD 75 06                     CALL  $0675                   ; Erase shot
1342    05D4  3A 79 20                     LD    A,(AlienShotImage)      ; Get LSB of the image pointer
1343    05D7  C6 03                        ADD   A,$03                   ; Next set of images
1344    05D9  21 7F 20                     LD    HL,ShotPicEnd           ; End of image
1345    05DC  BE                           CP    (HL)                    ; Have we reached the end of the set?
1346    05DD  DA E2 05                     JP    C,$05E2                 ; No ... keep it
1347    05E0  D6 0C                        SUB   $0C                     ; Back up to the 1st image in the set
1348    05E2  32 79 20                     LD    (AlienShotImage),A      ; New LSB image pointer
1349    05E5  3A 7B 20                     LD    A,(AlienShotYr)         ; Get shot's Y coordinate
1350    05E8  47                           LD    B,A                     ; Hold it
1351    05E9  3A 7E 20                     LD    A,(AlienShotDelta)      ; Get alien shot delta
1352    05EC  80                           ADD   A,B                     ; Add to shots coordinate
1353    05ED  32 7B 20                     LD    (AlienShotYr),A         ; New shot Y coordinate
1354    05F0  CD 6C 06                     CALL  $066C                   ; Draw the alien shot
1355    05F3  3A 7B 20                     LD    A,(AlienShotYr)         ; Shot's Y coordinate
1356    05F6  FE 15                        CP    $15                     ; Still in the active playfield?
1357    05F8  DA 12 06                     JP    C,$0612                 ; No ... end it
1358    05FB  3A 61 20                     LD    A,(Collision)           ; Did shot collide ...
1359    05FE  A7                           AND   A                       ; ... with something?
1360    05FF  C8                           RET   Z                       ; No ... we are done here
1361    0600  3A 7B 20                     LD    A,(AlienShotYr)         ; Shot's Y coordinate
1362    0603  FE 1E                        CP    $1E                     ; Is it below player's area?
1363    0605  DA 12 06                     JP    C,$0612                 ; Yes ... end it
1364    0608  FE 27                        CP    $27                     ; Is it above player's area?
1365                    
1366    060A  00                           NOP
1367                    
1368    060B  D2 12 06                     JP    NC,$0612                ; Yes ... end it
1369    060E  97                           SUB   A                       ; Flag that player ...
1370    060F  32 15 20                     LD    (PlayerAlive),A         ; ... has been struck
1371    0612  3A 73 20                     LD    A,(AlienShotStatus)     ; Flag to ...
1372    0615  F6 01                        OR    $01                     ; ... start shot ...
1373    0617  32 73 20                     LD    (AlienShotStatus),A     ; ... blowing up
1374    061A  C9                           RET                           ; Done
1375                    
1376                    ; Start a shot right over the player
1377                    
1378    061B  3A 1B 20                     LD    A,(PlayerXr)            ; Player's X coordinate
1379    061E  C6 08                        ADD   A,$08                   ; Center of player
1380    0620  67                           LD    H,A                     ; To H for routine
1381    0621  CD 6F 15                     CALL  FindColumn              ; Find the column
1382    0624  79                           LD    A,C                     ; Get the column right over player
1383    0625  FE 0C                        CP    $0C                     ; Is it a valid column?
1384    0627  DA A5 05                     JP    C,$05A5                 ; Yes ... use what we found
1385    062A  0E 0B                        LD    C,$0B                   ; Else use ...
1386    062C  C3 A5 05                     JP    $05A5                   ; ... as far over as we can
1387                    
1388                    ; C contains the target column. Look for a live alien in the column starting with
1389                    ; the lowest position. Return C=1 if found ... HL points to found slot
1390                    
1391    062F  0D        FindInColumn       DEC   C                       ; Column that is firing
1392    0630  3A 67 20                     LD    A,(PlayerDataMSB)       ; Player's MSB (21xx or 22xx)
1393    0633  67                           LD    H,A                     ; To MSB of HL
1394    0634  69                           LD    L,C                     ; Column to L
1395    0635  16 05                        LD    D,$05                   ; 5 rows of aliens
1396    0637  7E                           LD    A,(HL)                  ; Get alien's status
1397    0638  A7                           AND   A                       ; 0 means dead
1398    0639  37                           SCF                           ; In case not 0
1399    063A  C0                           RET   NZ                      ; Alien is alive? Yes ... return
1400    063B  7D                           LD    A,L                     ; Get the flag pointer LSB
1401    063C  C6 0B                        ADD   A,11                    ; Jump to same column on next row of rack (+11 aliens per row)
1402    063E  6F                           LD    L,A                     ; New alien index
1403    063F  15                           DEC   D                       ; Tested all rows?
1404    0640  C2 37 06                     JP    NZ,$0637                ; No ... keep looking for a live alien up the rack
1405    0643  C9                           RET                           ; Didn't find a live alien. Return with C=0.
1406                    
1407                    ; Alien shot is blowing up
1408                    
1409    0644  21 78 20  ShotBlowingUp      LD    HL,AlienShotBlowCnt     ; Blow up timer
1410    0647  35                           DEC   (HL)                    ; Decrement the value
1411    0648  7E                           LD    A,(HL)                  ; Get the value
1412    0649  FE 03                        CP    $03                     ; First tick, 4, we draw the explosion
1413    064B  C2 67 06                     JP    NZ,$0667                ; After that just wait
1414    064E  CD 75 06                     CALL  $0675                   ; Erase the shot
1415    0651  21 DC 1C                     LD    HL,$1CDC                ; Alien shot ...
1416    0654  22 79 20                     LD    (AlienShotImage),HL     ; ... explosion sprite
1417    0657  21 7C 20                     LD    HL,AlienShotXr          ; Alien shot Y
1418    065A  35                           DEC   (HL)                    ; Left two for ...
1419    065B  35                           DEC   (HL)                    ; ... explosion
1420    065C  2B                           DEC   HL                      ; Point slien shot X
1421    065D  35                           DEC   (HL)                    ; Up two for ...
1422    065E  35                           DEC   (HL)                    ; ... explosion
1423    065F  3E 06                        LD    A,$06                   ; Alien shot descriptor ...
1424    0661  32 7D 20                     LD    (AlienShotSize),A       ; ... size 6
1425    0664  C3 6C 06                     JP    $066C                   ; Draw alien shot explosion
1426                    
1427    0667  A7                           AND   A                       ; Have we reached 0?
1428    0668  C0                           RET   NZ                      ; No ... keep waiting
1429    0669  C3 75 06                     JP    $0675                   ; Erase the explosion and out
1430                    
1431    066C  21 79 20                     LD    HL,AlienShotImage       ; Alien shot descriptor
1432    066F  CD 3B 1A                     CALL  ReadDesc                ; Read 5 byte structure
1433    0672  C3 91 14                     JP    DrawSprCollision        ; Draw shot and out
1434                    
1435    0675  21 79 20                     LD    HL,AlienShotImage       ; Alien shot descriptor
1436    0678  CD 3B 1A                     CALL  ReadDesc                ; Read 5 byte structure
1437    067B  C3 52 14                     JP    EraseShifted            ; Erase the shot and out
1438                    
1439    067E  22 48 20                     LD    (PluShotColFirTbl),HL   ; From 50B, update ...
1440    0681  C9                           RET                           ; ... column-firing table pointer and out
1441                    
1442                    
1443                    ; Game object 4: Flying Saucer OR squiggly shot
1444                    
1445                    ; This task is shared by the squiggly-shot and the flying saucer. The saucer waits until the
1446                    ; squiggly-shot is over before it begins
1447                    
1448    0682  E1        GameObj4           POP   HL                      ; Pull data pointer from the stack (not going to use it)
1449    0683  3A 80 20                     LD    A,(ShotSync)            ; Sync flag (copied from GO-2's timer value)
1450    0686  FE 02                        CP    $02                     ; Are GO-2 and GO-3 idle?
1451    0688  C0                           RET   NZ                      ; No ... only one at a time
1452    0689  21 83 20                     LD    HL,SaucerStart          ; Time-till-saucer flag
1453    068C  7E                           LD    A,(HL)                  ; Is it time ...
1454    068D  A7                           AND   A                       ; ... for a saucer?
1455    068E  CA 0F 05                     JP    Z,$050F                 ; No ... go process squiggly shot
1456    0691  3A 56 20                     LD    A,(SquShotStepCnt)      ; Is there a ...
1457    0694  A7                           AND   A                       ; ... squiggly shot going?
1458    0695  C2 0F 05                     JP    NZ,$050F                ; Yes ... go handle squiggly shot
1459                    
1460    0698  23                           INC   HL                      ; Saucer on screen flag
1461    0699  7E                           LD    A,(HL)                  ; (2084) Is the saucer ...
1462    069A  A7                           AND   A                       ; ... already on the screen?
1463    069B  C2 AB 06                     JP    NZ,$06AB                ; Yes ... go handle it
1464    069E  3A 82 20                     LD    A,(NumAliens)           ; Number of aliens remaining
1465    06A1  FE 08                        CP    $08                     ; Less than ...
1466    06A3  DA 0F 05                     JP    C,$050F                 ; ... 8 ... no saucer
1467    06A6  36 01                        LD    (HL),$01                ; (2084) The saucer is on the screen
1468    06A8  CD 3C 07                     CALL  $073C                   ; Draw the flying saucer
1469                    
1470    06AB  11 8A 20                     LD    DE,SaucerPriPicMSB      ; Saucer's Y coordinate (CHECK)
1471    06AE  CD 06 1A                     CALL  CompYToBeam             ; Compare to beam position
1472    06B1  D0                           RET   NC                      ; Not the right ISR for moving saucer
1473                    
1474    06B2  21 85 20                     LD    HL,SaucerHit            ; Saucer hit flag
1475    06B5  7E                           LD    A,(HL)                  ; Has saucer ...
1476    06B6  A7                           AND   A                       ; ... been hit?
1477    06B7  C2 D6 06                     JP    NZ,$06D6                ; Yes ... don't move it
1478                    
1479    06BA  21 8A 20                     LD    HL,SaucerPriPicMSB      ; Saucer's structure
1480    06BD  7E                           LD    A,(HL)                  ; Get saucer's Y coordinate
1481    06BE  23                           INC   HL                      ; Bump to ...
1482    06BF  23                           INC   HL                      ; ... delta Y
1483    06C0  86                           ADD   A,(HL)                  ; Move saucer
1484    06C1  32 8A 20                     LD    (SaucerPriPicMSB),A     ; New coordinate
1485    06C4  CD 3C 07                     CALL  $073C                   ; Draw the flying saucer
1486    06C7  21 8A 20                     LD    HL,SaucerPriPicMSB      ; Saucer's structure
1487    06CA  7E                           LD    A,(HL)                  ; Y coordinate
1488    06CB  FE 28                        CP    $28                     ; Too low? End of screen?
1489    06CD  DA F9 06                     JP    C,$06F9                 ; Yes ... remove from play
1490    06D0  FE E1                        CP    $E1                     ; Too high? End of screen?
1491    06D2  D2 F9 06                     JP    NC,$06F9                ; Yes ... remove from play
1492    06D5  C9                           RET                           ; Done
1493                    
1494    06D6  06 FE                        LD    B,$FE                   ; Turn off ...
1495    06D8  CD DC 19                     CALL  SoundBits3Off           ; ... flying saucer sound
1496    06DB  23                           INC   HL                      ; (2086) show-hit timer
1497    06DC  35                           DEC   (HL)                    ; Count down show-hit timer
1498    06DD  7E                           LD    A,(HL)                  ; Get current value
1499    06DE  FE 1F                        CP    $1F                     ; Starts at 20 ... is this the first tick of show-hit timer?
1500    06E0  CA 4B 07                     JP    Z,$074B                 ; Yes ... go show the explosion
1501    06E3  FE 18                        CP    $18                     ; A little later ...
1502    06E5  CA 0C 07                     JP    Z,$070C                 ; ... show the score besides the saucer and add it
1503    06E8  A7                           AND   A                       ; Has timer expired?
1504    06E9  C0                           RET   NZ                      ; No ... let it run
1505    06EA  06 EF                        LD    B,$00EF                 ; 1110_1111 (mask off saucer hit sound)
1506    06EC  21 98 20                     LD    HL,SoundPort5           ; Get current ...
1507    06EF  7E                           LD    A,(HL)                  ; ... value of port 5 sound
1508    06F0  A0                           AND   B                       ; Mask off the saucer-hit sound
1509    06F1  77                           LD    (HL),A                  ; Set the new value
1510    06F2  E6 20                        AND   $20                     ; All sound off but ...
1511    06F4  D3 05                        OUT   (SOUND2),A              ; ... cocktail cabinet bit
1512                    
1513    06F6  00                           NOP
1514    06F7  00                           NOP
1515    06F8  00                           NOP
1516                    
1517    06F9  CD 42 07                     CALL  $0742                   ; Covert pixel pos from descriptor to HL screen and shift
1518    06FC  CD CB 14                     CALL  ClearSmallSprite        ; Clear a one byte sprite at HL
1519    06FF  21 83 20                     LD    HL,SaucerStart          ; Saucer structure
1520    0702  06 0A                        LD    B,$0A                   ; 10 bytes in saucer structure
1521    0704  CD 5F 07                     CALL  $075F                   ; Re-initialize saucer structure
1522                    
1523    0707  06 FE                        LD    B,$FE                   ; Turn off UFO ...
1524    0709  C3 DC 19                     JP    SoundBits3Off           ; ... sound and out
1525                    
1526    070C  3E 01                        LD    A,$01                   ; Flag the score ...
1527    070E  32 F1 20                     LD    (AdjustScore),A         ; ... needs updating
1528    0711  2A 8D 20                     LD    HL,(SaucerScore)        ; Saucer score table
1529    0714  46                           LD    B,(HL)                  ; Get score for this saucer
1530    0715  0E 04                        LD    C,$04                   ; There are only 4 possibilities
1531    0717  21 50 1D                     LD    HL,$1D50                ; Possible scores table
1532    071A  11 4C 1D                     LD    DE,$1D4C                ; Print strings for each score
1533    071D  1A                           LD    A,(DE)                  ; Find ...
1534    071E  B8                           CP    B                       ; ... the ...
1535    071F  CA 28 07                     JP    Z,$0728                 ; ... print ...
1536    0722  23                           INC   HL                      ; ... string ...
1537    0723  13                           INC   DE                      ; ... for ...
1538    0724  0D                           DEC   C                       ; ... the ...
1539    0725  C2 1D 07                     JP    NZ,$071D                ; ... score
1540    0728  7E                           LD    A,(HL)                  ; Get LSB of message (MSB is 2088 which is 1D)
1541    0729  32 87 20                     LD    (SaucerPriLoc),A        ; Message's LSB (_50=1D94 100=1D97 150=1D9A 300=1D9D)
1542    072C  26 00                        LD    H,$00                   ; MSB = 0 ...
1543    072E  68                           LD    L,B                     ; HL = B
1544    072F  29                           ADD   HL,HL                   ; *2
1545    0730  29                           ADD   HL,HL                   ; *4
1546    0731  29                           ADD   HL,HL                   ; *8
1547    0732  29                           ADD   HL,HL                   ; *16
1548    0733  22 F2 20                     LD    (ScoreDelta),HL         ; Add score for hitting saucer (015 becomes 150 in BCD).
1549    0736  CD 42 07                     CALL  $0742                   ; Get the flying saucer score descriptor
1550    0739  C3 F1 08                     JP    $08F1                   ; Print the three-byte score and out
1551                    
1552    073C  CD 42 07                     CALL  $0742                   ; Draw the ...
1553    073F  C3 39 14                     JP    DrawSimpleSprite        ; ... flying saucer
1554                    
1555    0742  21 87 20                     LD    HL,SaucerPriLoc         ; Read flying saucer ...
1556    0745  CD 3B 1A                     CALL  ReadDesc                ; ... structure
1557    0748  C3 47 1A                     JP    ConvToScr               ; Convert pixel number to screen and shift and out
1558                    
1559    074B  06 10                        LD    B,$10                   ; Saucer hit sound bit
1560    074D  21 98 20                     LD    HL,SoundPort5           ; Current state of sounds
1561    0750  7E                           LD    A,(HL)                  ; OR ...
1562    0751  B0                           OR    B                       ; ... in ...
1563    0752  77                           LD    (HL),A                  ; ... saucer-hit sound
1564    0753  CD 70 17                     CALL  $1770                   ; Turn off fleet sound and start saucer-hit
1565    0756  21 7C 1D                     LD    HL,$1D7C                ; Sprite for saucer blowing up
1566    0759  22 87 20                     LD    (SaucerPriLoc),HL       ; Store it in structure
1567    075C  C3 3C 07                     JP    $073C                   ; Draw the flying saucer
1568                    
1569    075F  11 83 1B                     LD    DE,$1B83                ; Data for saucer (702 sets count to 0A)
1570    0762  C3 32 1A                     JP    BlockCopy               ; Reset saucer object data
1571                    
1572                    ; Wait for player 1 start button press
1573                    
1574    0765  3E 01     WaitForStart       LD    A,$01                   ; Tell ISR that we ...
1575    0767  32 93 20                     LD    (WaitStartLoop),A       ; ... have started to wait
1576    076A  31 00 24                     LD    SP,STACK_TOP            ; Reset stack
1577    076D  FB                           EI                            ; Enable interrupts
1578    076E  CD 79 19                     CALL  $1979                   ; Suspend game tasks
1579    0771  CD D6 09                     CALL  ClearPlayField          ; Clear center window
1580    0774  21 13 30                     LD    HL,$3013                ; Screen coordinates
1581    0777  11 F3 1F                     LD    DE,Msg_Push             ; Point to string 'PUSH'
1582    077A  0E 04                        LD    C,4                     ; Message length
1583    077C  CD F3 08                     CALL  PrintMessage            ; Print it
1584    077F  3A EB 20                     LD    A,(NumCoins)            ; Number of credits
1585    0782  3D                           DEC   A                       ; Set flags
1586    0783  21 10 28                     LD    HL,$2810                ; Screen coordinates
1587    0786  0E 14                        LD    C,20                    ; Message length
1588    0788  C2 57 08                     JP    NZ,$0857                ; Take 1 or 2 player start
1589    078B  11 CF 1A                     LD    DE,Msg_Only1Player      ; Point to string 'ONLY 1PLAYER BUTTON '
1590    078E  CD F3 08                     CALL  PrintMessage            ; Print message
1591    0791  DB 01                        IN    A,(INP1)                ; Read player controls
1592    0793  E6 04                        AND   $04                     ; 1Player start button?
1593    0795  CA 7F 07                     JP    Z,$077F                 ; No ... wait for button or credit
1594                    
1595                    
1596                    ;===============================================================================
1597                    ; START NEW GAME
1598                    ;===============================================================================
1599                    
1600                    ; 1 Player start
1601                    
1602    0798  06 99     NewGame            LD    B,$99                   ; Essentially a -1 for DAA
1603    079A  AF                           XOR   A                       ; Clear two player flag
1604                    
1605                    ; 2 player start sequence enters here with a=1 and B=98 (-2)
1606                    
1607    079B  32 CE 20                     LD    (TwoPlayers),A          ; Set flag for 1 or 2 players
1608    079E  3A EB 20                     LD    A,(NumCoins)            ; Number of credits
1609    07A1  80                           ADD   A,B                     ; Take away credits
1610    07A2  27                           DAA                           ; Convert back to DAA
1611    07A3  32 EB 20                     LD    (NumCoins),A            ; New credit count
1612    07A6  CD 47 19                     CALL  DrawNumCredits          ; Display number of credits
1613    07A9  21 00 00                     LD    HL,$0000                ; Score of 0000
1614    07AC  22 F8 20                     LD    (P1Score),HL            ; Clear player-1 score
1615    07AF  22 FC 20                     LD    (P2Score),HL            ; CLear player-2 score
1616    07B2  CD 25 19                     CALL  $1925                   ; Print player-1 score
1617    07B5  CD 2B 19                     CALL  $192B                   ; Print player-2 score
1618    07B8  CD D7 19                     CALL  DisableGameTasks        ; Disable game tasks
1619    07BB  21 01 01                     LD    HL,$0101                ; Two bytes 1, 1
1620    07BE  7C                           LD    A,H                     ; 1 to A
1621    07BF  32 EF 20                     LD    (GameMode),A            ; 20EF=1 ... game mode
1622    07C2  22 E7 20                     LD    (Player1Alive),HL       ; 20E7 and 20E8 both one ... players 1 and 2 are alive
1623    07C5  22 E5 20                     LD    (Player1Ex),HL          ; Extra-ship is available for player-1 and player-2
1624    07C8  CD 56 19                     CALL  DrawStatus              ; Print scores and credits
1625    07CB  CD EF 01                     CALL  DrawShieldPl1           ; Draw shields for player-1
1626    07CE  CD F5 01                     CALL  DrawShieldPl2           ; Draw shields for player-2
1627    07D1  CD D1 08                     CALL  GetShipsPerCred         ; Get number of ships from DIP settings
1628    07D4  32 FF 21                     LD    (P1ShipsRem),A          ; Player-1 ships
1629    07D7  32 FF 22                     LD    (P2ShipsRem),A          ; Player-2 ships
1630    07DA  CD D7 00                     CALL  $00D7                   ; Set player-1 and player-2 alien racks going right
1631    07DD  AF                           XOR   A                       ; Make a 0
1632    07DE  32 FE 21                     LD    (P1RackCnt),A           ; Player 1 is on first rack of aliens
1633    07E1  32 FE 22                     LD    (P2RackCnt),A           ; Player 2 is on first rack of aliens
1634    07E4  CD C0 01                     CALL  InitAliens              ; Initialize 55 aliens for player 1
1635    07E7  CD 04 19                     CALL  InitAliensP2            ; Initialize 55 aliens for player 2
1636    07EA  21 78 38                     LD    HL,$3878                ; Screen coordinates for lower-left alien
1637    07ED  22 FC 21                     LD    (P1RefAlienY),HL        ; Initialize reference alien for player 1
1638    07F0  22 FC 22                     LD    (P2RefAlienYr),HL       ; Initialize reference alien for player 2
1639    07F3  CD E4 01                     CALL  CopyRamMirror           ; Copy ROM mirror to RAM (2000 - 20C0)
1640    07F6  CD 7F 1A                     CALL  RemoveShip              ; Initialize ship hold indicator
1641                    
1642    07F9  CD 8D 08                     CALL  PromptPlayer            ; Prompt with 'PLAY PLAYER '
1643    07FC  CD D6 09                     CALL  ClearPlayField          ; Clear the playfield
1644                    
1645    07FF  00                           NOP
1646                    
1647    0800  AF                           XOR   A                       ; Make a 0
1648    0801  32 C1 20                     LD    (IsrSplashTask),A       ; Disable isr splash-task animation
1649    0804  CD CF 01                     CALL  DrawBottomLine          ; Draw line across screen under player
1650    0807  3A 67 20                     LD    A,(PlayerDataMSB)       ; Current player
1651    080A  0F                           RRCA                          ; Right bit tells all
1652    080B  DA 72 08                     JP    C,$0872                 ; Go do player 1
1653                    
1654    080E  CD 13 02                     CALL  RestoreShields2         ; Restore shields for player 2
1655    0811  CD CF 01                     CALL  DrawBottomLine          ; Draw line across screen under player
1656    0814  CD B1 00                     CALL  InitRack                ; Initialize alien rack for current player
1657    0817  CD D1 19                     CALL  EnableGameTasks         ; Enable game tasks in ISR
1658    081A  06 20                        LD    B,$20                   ; Enable ...
1659    081C  CD FA 18                     CALL  SoundBits3On            ; ... sound amplifier
1660                    
1661                    ; GAME LOOP
1662                    
1663    081F  CD 18 16                     CALL  PlrFireOrDemo           ; Initiate player shot if button pressed
1664    0822  CD 0A 19                     CALL  PlyrShotAndBump         ; Collision detect player's shot and rack-bump
1665    0825  CD F3 15                     CALL  CountAliens             ; Count aliens (count to 2082)
1666    0828  CD 88 09                     CALL  AdjustScore1            ; Adjust score (and print) if there is an adjustment
1667    082B  3A 82 20                     LD    A,(NumAliens)           ; Number of live aliens
1668    082E  A7                           AND   A                       ; All aliens gone?
1669    082F  CA EF 09                     JP    Z,$09EF                 ; Yes ... end of turn
1670    0832  CD 0E 17                     CALL  UpdateReloadRate        ; Update alien-shot-rate based on player's score
1671    0835  CD 35 09                     CALL  $0935                   ; Check (and handle) extra ship award
1672    0838  CD D8 08                     CALL  SpeedShots              ; Adjust alien shot speed
1673    083B  CD 2C 17                     CALL  ShotSound               ; Shot sound on or off with 2025
1674    083E  CD 59 0A                     CALL  $0A59                   ; Check if player is hit
1675    0841  CA 49 08                     JP    Z,$0849                 ; No hit ... jump handler
1676    0844  06 04                        LD    B,$04                   ; Player hit sound
1677    0846  CD FA 18                     CALL  SoundBits3On            ; Make explosion sound
1678    0849  CD 75 17                     CALL  FleetDelayExShip        ; Extra-ship sound timer, set fleet-delay, play fleet movement sound
1679    084C  D3 06                        OUT   (WATCHDOG),A            ; Feed the watchdog
1680    084E  CD 04 18                     CALL  CtrlSaucerSound         ; Control saucer sound
1681    0851  C3 1F 08                     JP    $081F                   ; Continue game loop
1682                    
1683    0854  00                           NOP
1684    0855  00                           NOP
1685    0856  00                           NOP
1686                    
1687                    ; Test for 1 or 2 player start button press
1688                    
1689    0857  11 BA 1A                     LD    DE,Msg_1or2Players      ; '1 OR 2PLAYERS BUTTON'
1690    085A  CD F3 08                     CALL  PrintMessage            ; Print message
1691    085D  06 98                        LD    B,$98                   ; -2 (take away 2 credits)
1692    085F  DB 01                        IN    A,(INP1)                ; Read player controls
1693    0861  0F                           RRCA                          ; Test ...
1694    0862  0F                           RRCA                          ; ... bit 2
1695    0863  DA 6D 08                     JP    C,$086D                 ; 2 player button pressed ... do it
1696    0866  0F                           RRCA                          ; Test bit 3
1697    0867  DA 98 07                     JP    C,NewGame               ; One player start ... do it
1698    086A  C3 7F 07                     JP    $077F                   ; Keep waiting on credit or button
1699                    
1700                    ; 2 PLAYER START
1701                    
1702    086D  3E 01                        LD    A,$01                   ; Flag 2 player game
1703    086F  C3 9B 07                     JP    $079B                   ; Continue normal startup
1704                    
1705    0872  CD 1A 02                     CALL  RestoreShieldsP1        ; Restore shields for player 1
1706    0875  C3 14 08                     JP    $0814                   ; Continue in game loop
1707                    
1708    0878  3A 08 20                     LD    A,(RefAlienDXr)         ; Alien deltaY
1709    087B  47                           LD    B,A                     ; Hold it
1710    087C  2A 09 20                     LD    HL,(RefAlienYr)         ; Alien coordinates
1711    087F  EB                           EX    DE,HL                   ; Coordinates to DE
1712    0880  C3 86 08                     JP    GetAlRefPtr             ; HL is 21FC or 22FC and out
1713                    
1714    0883  00                           NOP
1715    0884  00                           NOP
1716    0885  00                           NOP
1717                    
1718                    ; Get pointer to player's alien ref coordinates
1719                    
1720    0886  3A 67 20  GetAlRefPtr        LD    A,(PlayerDataMSB)       ; Player data MSB (21 or 22)
1721    0889  67                           LD    H,A                     ; To H
1722    088A  2E FC                        LD    L,$FC                   ; 21FC or 22FC ... alien coordinates
1723    088C  C9                           RET                           ; Done
1724                    
1725                    ; Print 'PLAY PLAYER ' and blink score for 2 seconds
1726                    
1727    088D  21 11 2B  PromptPlayer       LD    HL,$2B11                ; Screen coordinates
1728    0890  11 70 1B                     LD    DE,Msg_Player1          ; Point to string 'PLAY PLAYER<1>'
1729    0893  0E 0E                        LD    C,14                    ; 14 bytes in message
1730    0895  CD F3 08                     CALL  PrintMessage            ; Print the message
1731    0898  3A 67 20                     LD    A,(PlayerDataMSB)       ; Get the player number
1732    089B  0F                           RRCA                          ; C will be set for player 1
1733    089C  3E 1C                        LD    A,$1C                   ; The '2' character
1734    089E  21 11 37                     LD    HL,$3711                ; Replace the '<1>' with '<2>'
1735    08A1  D4 FF 08                     CALL  NC,DrawChar             ; If player 2 ... change the message
1736    08A4  3E B0                        LD    A,$B0                   ; Delay of 176 (roughly 2 seconds)
1737    08A6  32 C0 20                     LD    (IsrDelay),A            ; Set the ISR delay value
1738    08A9  3A C0 20                     LD    A,(IsrDelay)            ; Get the ISR delay value
1739    08AC  A7                           AND   A                       ; Has the 2 second delay expired?
1740    08AD  C8                           RET   Z                       ; Yes ... done
1741    08AE  E6 04                        AND   $04                     ; Every 4 ISRs ...
1742    08B0  C2 BC 08                     JP    NZ,$08BC                ; ... flash the player's score
1743    08B3  CD CA 09                     CALL  $09CA                   ; Get the score descriptor for the active player
1744    08B6  CD 31 19                     CALL  DrawScore               ; Draw the score
1745    08B9  C3 A9 08                     JP    $08A9                   ; Back to the top of the wait loop
1746                    
1747    08BC  06 20                        LD    B,32                    ; 32 rows (4 characters * 8 bytes each)
1748    08BE  21 1C 27                     LD    HL,$271C                ; Player-1 score on the screen
1749    08C1  3A 67 20                     LD    A,(PlayerDataMSB)       ; Get the player number
1750    08C4  0F                           RRCA                          ; C will be set for player 1
1751    08C5  DA CB 08                     JP    C,$08CB                 ; We have the right score coordinates
1752    08C8  21 1C 39                     LD    HL,$391C                ; Use coordinates for player-2's score
1753    08CB  CD CB 14                     CALL  ClearSmallSprite        ; Clear a one byte sprite at HL
1754    08CE  C3 A9 08                     JP    $08A9                   ; Back to the top of the wait loop
1755                    
1756                    
1757                    ; Get number of ships from DIP settings
1758                    
1759    08D1  DB 02     GetShipsPerCred    IN    A,(INP2)                ; DIP settings
1760    08D3  E6 03                        AND   $03                     ; Get number of ships
1761    08D5  C6 03                        ADD   A,$03                   ; From 3-6
1762    08D7  C9                           RET                           ; Done
1763                    
1764                    ; With less than 9 aliens on the screen the alien shots get a tad bit faster. Probably
1765                    ; because the advancing rack can catch them
1766                    
1767    08D8  3A 82 20  SpeedShots         LD    A,(NumAliens)           ; Number of aliens on screen
1768    08DB  FE 09                        CP    $09                     ; More than 8?
1769    08DD  D0                           RET   NC                      ; Yes ... leave shot speed alone
1770    08DE  3E FB                        LD    A,$FB                   ; Normally FF (-1) ... now FB (-4)
1771    08E0  32 7E 20                     LD    (AlienShotDelta),A      ; Speed up alien shots
1772    08E3  C9                           RET                           ; Done
1773                    
1774    08E4  3A CE 20                     LD    A,(TwoPlayers)          ; Number of players
1775    08E7  A7                           AND   A                       ; Skip if ...
1776    08E8  C0                           RET   NZ                      ; ... two player
1777    08E9  21 1C 39                     LD    HL,$391C                ; Player 2's score
1778    08EC  06 20                        LD    B,32                    ; 32 rows is 4 digits * 8 rows each
1779    08EE  C3 CB 14                     JP    ClearSmallSprite        ; Clear a one byte sprite (32 rows long) at HL
1780                    
1781    08F1  0E 03                        LD    C,$03                   ; Length of saucer-score message ... fall into print
1782                    
1783                    ; Print a message on the screen
1784                    ; HL = coordinates, DE = message buffer, C = length
1785                    
1786    08F3  1A        PrintMessage       LD    A,(DE)                  ; Get character
1787    08F4  D5                           PUSH  DE                      ; Preserve
1788    08F5  CD FF 08                     CALL  DrawChar                ; Print character
1789    08F8  D1                           POP   DE                      ; Restore
1790    08F9  13                           INC   DE                      ; Next character
1791    08FA  0D                           DEC   C                       ; All done?
1792    08FB  C2 F3 08                     JP    NZ,PrintMessage         ; Print all of message
1793    08FE  C9                           RET                           ; Done
1794                    
1795                    ;===============================================================================
1796                    
1797                    ; Get pointer to 8 byte sprite number in A and draw sprite on screen at HL
1798                    
1799    08FF  11 00 1E  DrawChar           LD    DE,$1E00                ; Character set
1800    0902  E5                           PUSH  HL                      ; Preserve
1801    0903  26 00                        LD    H,$00                   ; MSB=0
1802    0905  6F                           LD    L,A                     ; Character number to L
1803    0906  29                           ADD   HL,HL                   ; HL = HL *2
1804    0907  29                           ADD   HL,HL                   ; *4
1805    0908  29                           ADD   HL,HL                   ; *8 (8 bytes each)
1806    0909  19                           ADD   HL,DE                   ; Get pointer to sprite
1807    090A  EB                           EX    DE,HL                   ; Now into DE
1808    090B  E1                           POP   HL                      ; Restore HL
1809    090C  06 08                        LD    B,8                     ; 8 bytes each
1810    090E  D3 06                        OUT   (WATCHDOG),A            ; Feed watchdog
1811    0910  C3 39 14                     JP    DrawSimpleSprite        ; To screen
1812                    
1813    0913  3A 09 20  TimeToSaucer       LD    A,(RefAlienYr)          ; Reference alien's X coordinate
1814    0916  FE 78                        CP    $78                     ; Don't process saucer timer ... ($78 is 1st rack Yr)
1815    0918  D0                           RET   NC                      ; ... unless aliens are closer to bottom
1816    0919  2A 91 20                     LD    HL,(TillSaucer)         ; Time to saucer
1817    091C  7D                           LD    A,L                     ; Is it time ...
1818    091D  B4                           OR    H                       ; ... for a saucer
1819    091E  C2 29 09                     JP    NZ,$0929                ; No ... skip flagging
1820    0921  21 00 06                     LD    HL,$0600                ; Reset timer to 600 game loops
1821    0924  3E 01                        LD    A,$01                   ; Flag a ...
1822    0926  32 83 20                     LD    (SaucerStart),A         ; ... saucer sequence
1823    0929  2B                           DEC   HL                      ; Decrement the ...
1824    092A  22 91 20                     LD    (TillSaucer),HL         ; ... time-to-saucer
1825    092D  C9                           RET                           ; Done
1826                    
1827                    ;===============================================================================
1828                    
1829                    ; Get number of ships for active player
1830                    
1831    092E  CD 11 16                     CALL  GetPlayerDataPtr        ; HL points to player data
1832    0931  2E FF                        LD    L,$FF                   ; Last byte = numbe of ships
1833    0933  7E                           LD    A,(HL)                  ; Get number of ships
1834    0934  C9                           RET                           ; Done
1835                    
1836                    ;===============================================================================
1837                    
1838                    ; Award extra ship if score has reached ceiling
1839                    
1840    0935  CD 10 19                     CALL  CurPlyAlive             ; Get descriptor of sorts
1841    0938  2B                           DEC   HL                      ; Back up ...
1842    0939  2B                           DEC   HL                      ; ... two bytes
1843    093A  7E                           LD    A,(HL)                  ; Has extra ship ...
1844    093B  A7                           AND   A                       ; already been awarded?
1845    093C  C8                           RET   Z                       ; Yes ... ignore
1846    093D  06 15                        LD    B,$15                   ; Default 1500
1847    093F  DB 02                        IN    A,(INP2)                ; Read DIP settings
1848    0941  E6 08                        AND   $08                     ; Extra ship at 1000 or 1500
1849    0943  CA 48 09                     JP    Z,$0948                 ; 0=1500
1850    0946  06 10                        LD    B,$10                   ; Awarded at 1000
1851    0948  CD CA 09                     CALL  $09CA                   ; Get score descriptor for active player
1852    094B  23                           INC   HL                      ; MSB of score ...
1853    094C  7E                           LD    A,(HL)                  ; ... to accumulator
1854    094D  B8                           CP    B                       ; Time for an extra ship?
1855    094E  D8                           RET   C                       ; No ... out
1856    094F  CD 2E 09                     CALL  $092E                   ; Get pointer to number of ships
1857    0952  34                           INC   (HL)                    ; Bump number of ships
1858    0953  7E                           LD    A,(HL)                  ; Get the new total
1859    0954  F5                           PUSH  AF                      ; Hang onto it for a bit
1860    0955  21 01 25                     LD    HL,$2501                ; Screen coords for ship hold
1861    0958  24                           INC   H                       ; Bump to ...
1862    0959  24                           INC   H                       ; ... next
1863    095A  3D                           DEC   A                       ; ... spot
1864    095B  C2 58 09                     JP    NZ,$0958                ; Find spot for new ship
1865    095E  06 10                        LD    B,16                    ; 16 byte sprite
1866    0960  11 60 1C                     LD    DE,PlayerSprite         ; Player sprite
1867    0963  CD 39 14                     CALL  DrawSimpleSprite        ; Draw the sprite
1868    0966  F1                           POP   AF                      ; Restore the count
1869    0967  3C                           INC   A                       ; +1
1870    0968  CD 8B 1A                     CALL  $1A8B                   ; Print the number of ships
1871    096B  CD 10 19                     CALL  CurPlyAlive             ; Get descriptor for active player of some sort
1872    096E  2B                           DEC   HL                      ; Back up ...
1873    096F  2B                           DEC   HL                      ; ... two bytes
1874    0970  36 00                        LD    (HL),$00                ; Flag extra ship has been awarded
1875    0972  3E FF                        LD    A,$FF                   ; Set timer ...
1876    0974  32 99 20                     LD    (ExtraHold),A           ; ... for extra-ship sound
1877    0977  06 10                        LD    B,$10                   ; Make sound ...
1878    0979  C3 FA 18                     JP    SoundBits3On            ; ... for extra man
1879                    
1880    097C  21 A0 1D  AlienScoreValue    LD    HL,AlienScores          ; Table for scores for hitting alien
1881    097F  FE 02                        CP    $02                     ; 0 or 1 (lower two rows) ...
1882    0981  D8                           RET   C                       ; ... return HL points to value 10
1883    0982  23                           INC   HL                      ; next value
1884    0983  FE 04                        CP    $04                     ; 2 or 3 (middle two rows) ...
1885    0985  D8                           RET   C                       ; ... return HL points to value 20
1886    0986  23                           INC   HL                      ; Top row ...
1887    0987  C9                           RET                           ; ... return HL points to value 30
1888                    
1889                    ; Adjust the score for the active player. 20F1 is 1 if there is a new value to add.
1890                    ; The adjustment is in 20F2,20F3. Then print the score
1891                    
1892    0988  CD CA 09  AdjustScore1       CALL  $09CA                   ; Get score structure for active player
1893    098B  3A F1 20                     LD    A,(AdjustScore)         ; Does the score ...
1894    098E  A7                           AND   A                       ; ... need increasing?
1895    098F  C8                           RET   Z                       ; No ... done
1896    0990  AF                           XOR   A                       ; Mark score ...
1897    0991  32 F1 20                     LD    (AdjustScore),A         ; ... as adjusted
1898    0994  E5                           PUSH  HL                      ; Hold the pointer to the structure
1899    0995  2A F2 20                     LD    HL,(ScoreDelta)         ; Get requested adjustment
1900    0998  EB                           EX    DE,HL                   ; Adjustment to DE
1901    0999  E1                           POP   HL                      ; Get back pointer to structure
1902    099A  7E                           LD    A,(HL)                  ; Add adjustment ...
1903    099B  83                           ADD   A,E                     ; ... first byte
1904    099C  27                           DAA                           ; Adjust it for BCD
1905    099D  77                           LD    (HL),A                  ; Store new LSB
1906    099E  5F                           LD    E,A                     ; Add adjustment ...
1907    099F  23                           INC   HL                      ; ... to ...
1908    09A0  7E                           LD    A,(HL)                  ; ... second ...
1909    09A1  8A                           ADC   A,D                     ; ... byte
1910    09A2  27                           DAA                           ; Adjust for BCD (cary gets dropped)
1911    09A3  77                           LD    (HL),A                  ; Store second byte
1912    09A4  57                           LD    D,A                     ; Second byte to D (first byte still in E)
1913    09A5  23                           INC   HL                      ; Load ...
1914    09A6  7E                           LD    A,(HL)                  ; ... the ...
1915    09A7  23                           INC   HL                      ; ... screen ...
1916    09A8  66                           LD    H,(HL)                  ; ... coordinates ...
1917    09A9  6F                           LD    L,A                     ; ... to HL
1918    09AA  C3 AD 09                     JP    Print4Digits            ; ** Usually a good idea, but wasted here
1919                    
1920                    ; Print 4 digits in DE
1921                    
1922    09AD  7A        Print4Digits       LD    A,D                     ; Get first 2 digits of BCD or hex
1923    09AE  CD B2 09                     CALL  DrawHexByte             ; Print them
1924    09B1  7B                           LD    A,E                     ; Get second 2 digits of BCD or hex (fall into print)
1925                    
1926                    ; Display 2 digits in A to screen at HL
1927                    
1928    09B2  D5        DrawHexByte        PUSH  DE                      ; Preserve
1929    09B3  F5                           PUSH  AF                      ; Save for later
1930    09B4  0F                           RRCA                          ; Get ...
1931    09B5  0F                           RRCA                          ; ...
1932    09B6  0F                           RRCA                          ; ...
1933    09B7  0F                           RRCA                          ; ... left digit
1934    09B8  E6 0F                        AND   $0F                     ; Mask out lower digit's bits
1935    09BA  CD C5 09                     CALL  $09C5                   ; To screen at HL
1936    09BD  F1                           POP   AF                      ; Restore digit
1937    09BE  E6 0F                        AND   $0F                     ; Mask out upper digit
1938    09C0  CD C5 09                     CALL  $09C5                   ; To screen
1939    09C3  D1                           POP   DE                      ; Restore
1940    09C4  C9                           RET                           ; Done
1941                    
1942    09C5  C6 1A                        ADD   A,$1A                   ; Bump to number characters
1943    09C7  C3 FF 08                     JP    DrawChar                ; Continue ...
1944                    
1945                    ; Get score descriptor for active player
1946                    
1947    09CA  3A 67 20                     LD    A,(PlayerDataMSB)       ; Get active player
1948    09CD  0F                           RRCA                          ; Test for player
1949    09CE  21 F8 20                     LD    HL,P1Score              ; Player 1 score descriptor
1950    09D1  D8                           RET   C                       ; Keep it if player 1 is active
1951    09D2  21 FC 20                     LD    HL,P2Score              ; Else get player 2 descriptor
1952    09D5  C9                           RET                           ; Done
1953                    
1954                    ; Clear center window of screen
1955                    
1956    09D6  21 02 24  ClearPlayField     LD    HL,$2402                ; Thrid from left, top of screen
1957    09D9  36 00                        LD    (HL),$00                ; Clear screen byte
1958    09DB  23                           INC   HL                      ; Next in row
1959    09DC  7D                           LD    A,L                     ; Get X ...
1960    09DD  E6 1F                        AND   $1F                     ; ... coordinate
1961    09DF  FE 1C                        CP    $1C                     ; Edge minus a buffer?
1962    09E1  DA E8 09                     JP    C,$09E8                 ; No ... keep going
1963    09E4  11 06 00                     LD    DE,$0006                ; Else ... bump to
1964    09E7  19                           ADD   HL,DE                   ; ... next edge + buffer
1965    09E8  7C                           LD    A,H                     ; Get Y coordinate
1966    09E9  FE 40                        CP    $40                     ; Reached bottom?
1967    09EB  DA D9 09                     JP    C,$09D9                 ; No ... keep going
1968    09EE  C9                           RET                           ; Done
1969                    
1970    09EF  CD 3C 0A                     CALL  $0A3C                   ;
1971    09F2  AF                           XOR   A                       ; Suspend ...
1972    09F3  32 E9 20                     LD    (SuspendPlay),A         ; ... ISR game tasks
1973    09F6  CD D6 09                     CALL  ClearPlayField          ; Clear playfield
1974    09F9  3A 67 20                     LD    A,(PlayerDataMSB)       ; Hold current player number ...
1975    09FC  F5                           PUSH  AF                      ; ... on stack
1976    09FD  CD E4 01                     CALL  CopyRamMirror           ; Block copy RAM mirror from ROM
1977    0A00  F1                           POP   AF                      ; Restore ...
1978    0A01  32 67 20                     LD    (PlayerDataMSB),A       ; ... current player number
1979    0A04  3A 67 20                     LD    A,(PlayerDataMSB)       ; ** Why load this again? Nobody ever jumps to 0A04?
1980    0A07  67                           LD    H,A                     ; To H
1981    0A08  E5                           PUSH  HL                      ; Hold player-data pointer
1982    0A09  2E FE                        LD    L,$FE                   ; 2xFE ... rack count
1983    0A0B  7E                           LD    A,(HL)                  ; Get the number of racks the player has beaten
1984    0A0C  E6 07                        AND   $07                     ; 0-7
1985    0A0E  3C                           INC   A                       ; Now 1-8
1986    0A0F  77                           LD    (HL),A                  ; Update count since player just beat a rack
1987    0A10  21 A2 1D                     LD    HL,AlienScores + 2      ; Starting coordinate of alien table
1988    0A13  23                           INC   HL                      ; Find the ...
1989    0A14  3D                           DEC   A                       ; ... right entry ...
1990    0A15  C2 13 0A                     JP    NZ,$0A13                ; ... in the table
1991    0A18  7E                           LD    A,(HL)                  ; Get the starting Y coordiante
1992    0A19  E1                           POP   HL                      ; Restore player's pointer
1993    0A1A  2E FC                        LD    L,$FC                   ; 2xFC ...
1994    0A1C  77                           LD    (HL),A                  ; Set rack's starting Y coordinate
1995    0A1D  23                           INC   HL                      ; Point to X
1996    0A1E  36 38                        LD    (HL),$38                ; Set rack's starting X coordinate to 38
1997    0A20  7C                           LD    A,H                     ; Player ...
1998    0A21  0F                           RRCA                          ; ... number to carry
1999    0A22  DA 33 0A                     JP    C,$0A33                 ; 2nd player stuff
2000    0A25  3E 21                        LD    A,$21                   ; Start fleet with ...
2001    0A27  32 98 20                     LD    (SoundPort5),A          ; ... first sound
2002    0A2A  CD F5 01                     CALL  DrawShieldPl2           ; Draw shields for player 2
2003    0A2D  CD 04 19                     CALL  InitAliensP2            ; Initalize aliens for player 2
2004    0A30  C3 04 08                     JP    $0804                   ; Continue at top of game loop
2005                    
2006    0A33  CD EF 01                     CALL  DrawShieldPl1           ; Draw shields for player 1
2007    0A36  CD C0 01                     CALL  InitAliens              ; Initialize aliens for player 1
2008    0A39  C3 04 08                     JP    $0804                   ; Continue at top of game loop
2009                    
2010    0A3C  CD 59 0A                     CALL  $0A59                   ; Check player collision
2011    0A3F  C2 52 0A                     JP    NZ,$0A52                ; Player is not alive ... skip delay
2012    0A42  3E 30                        LD    A,$30                   ; Half second delay
2013    0A44  32 C0 20                     LD    (IsrDelay),A            ; Set ISR timer
2014    0A47  3A C0 20                     LD    A,(IsrDelay)            ; Has timer expired?
2015    0A4A  A7                           AND   A                       ; Check exipre
2016    0A4B  C8                           RET   Z                       ; Out if done
2017    0A4C  CD 59 0A                     CALL  $0A59                   ; Check player collision
2018    0A4F  CA 47 0A                     JP    Z,$0A47                 ; No collision ... wait on timer
2019    0A52  CD 59 0A                     CALL  $0A59                   ; Wait for ...
2020    0A55  C2 52 0A                     JP    NZ,$0A52                ; ... collision to end
2021    0A58  C9                           RET                           ; Done
2022                    
2023                    ; Check to see if player is hit
2024                    
2025    0A59  3A 15 20                     LD    A,(PlayerAlive)         ; Active player hit flag
2026    0A5C  FE FF                        CP    $00FF                   ; All FFs means player is OK
2027    0A5E  C9                           RET                           ; Done
2028                    
2029                    ; Start the hit-alien sound and flag the adjustment for the score
2030                    ; B contains the row, which determines the score value
2031                    
2032    0A5F  3A EF 20  ScoreForAlien      LD    A,(GameMode)            ; Are we in ...
2033    0A62  A7                           AND   A                       ; ... game mode?
2034    0A63  CA 7C 0A                     JP    Z,$0A7C                 ; No ... skip scoring in demo
2035    0A66  48                           LD    C,B                     ; Hold row number
2036    0A67  06 08                        LD    B,$08                   ; Alien hit sound
2037    0A69  CD FA 18                     CALL  SoundBits3On            ; Enable sound
2038    0A6C  41                           LD    B,C                     ; Restore row number
2039    0A6D  78                           LD    A,B                     ; Into A
2040    0A6E  CD 7C 09                     CALL  AlienScoreValue         ; Look up the score for the alien
2041    0A71  7E                           LD    A,(HL)                  ; Get the score value
2042    0A72  21 F3 20                     LD    HL,ScoreDelta + 1       ; Pointer to score delta
2043    0A75  36 00                        LD    (HL),$00                ; Upper byte of score delta is '00'
2044    0A77  2B                           DEC   HL                      ; Point to score delta LSB
2045    0A78  77                           LD    (HL),A                  ; Set score for hitting alien
2046    0A79  2B                           DEC   HL                      ; Point to adjust-score-flag
2047    0A7A  36 01                        LD    (HL),$01                ; The score will get changed elsewhere
2048    0A7C  21 62 20                     LD    HL,ExpAlien             ; Return exploding-alien descriptor
2049    0A7F  C9                           RET                           ; Done
2050                    
2051                    ; Start the ISR moving the sprite. Return when done
2052                    
2053    0A80  3E 02     Animate            LD    A,$02                   ; Start simple linear ...
2054    0A82  32 C1 20                     LD    (IsrSplashTask),A       ; ... sprite animation (splash)
2055    0A85  D3 06                        OUT   (WATCHDOG),A            ; Feed watchdog
2056    0A87  3A CB 20                     LD    A,(SplashReached)       ; Has the ...
2057    0A8A  A7                           AND   A                       ; ... sprite reached target?
2058    0A8B  CA 85 0A                     JP    Z,$0A85                 ; No ... wait
2059    0A8E  AF                           XOR   A                       ; Stop ...
2060    0A8F  32 C1 20                     LD    (IsrSplashTask),A       ; ... ISR animation
2061    0A92  C9                           RET                           ; Done
2062                    
2063                    ; Print message from DE to screen at HL (length in B) with a
2064                    ; delay between letters
2065                    
2066    0A93  D5        PrintMessageDel    PUSH  DE                      ; Preserve
2067    0A94  1A                           LD    A,(DE)                  ; Get character
2068    0A95  CD FF 08                     CALL  DrawChar                ; Draw character on screen
2069    0A98  D1                           POP   DE                      ; Preserve
2070    0A99  3E 07                        LD    A,$07                   ; Delay between letters
2071    0A9B  32 C0 20                     LD    (IsrDelay),A            ; Set counter
2072    0A9E  3A C0 20                     LD    A,(IsrDelay)            ; Get counter
2073    0AA1  3D                           DEC   A                       ; Is it 1?
2074    0AA2  C2 9E 0A                     JP    NZ,$0A9E                ; No ... wait on it
2075    0AA5  13                           INC   DE                      ; Next in message
2076    0AA6  0D                           DEC   C                       ; All done?
2077    0AA7  C2 93 0A                     JP    NZ,PrintMessageDel      ; No ... do all
2078    0AAA  C9                           RET                           ; Done
2079                    
2080    0AAB  21 50 20  SplashSquiggly     LD    HL,Obj4Timer            ; Pointer to game-object 4 timer
2081    0AAE  C3 4B 02                     JP    $024B                   ; Process squiggly-shot in demo mode
2082                    
2083                    ; Delay 64 interrupts
2084                    
2085    0AB1  3E 40     OneSecDelay        LD    A,$40                   ; Delay of 64 (tad over 1 sec)
2086    0AB3  C3 D7 0A                     JP    $0AD7                   ; Do delay
2087                    
2088                    ; Delay 128 interrupts
2089                    
2090    0AB6  3E 80     TwoSecDelay        LD    A,$0080                 ; Delay of 80 (tad over 2 sec)
2091    0AB8  C3 D7 0A                     JP    $0AD7                   ; Do delay
2092                    
2093    0ABB  E1        SplashDemo         POP   HL                      ; Drop the call to ABF and ...
2094    0ABC  C3 72 00                     JP    $0072                   ; ... do a demo game loop without sound
2095                    
2096                    ; Different types of splash tasks managed by ISR in splash screens. The ISR
2097                    ; calls this if in splash-mode. These may have been bit flags to allow all 3
2098                    ; at the same time. Maybe it is just easier to do a switch with a rotate-to-carry
2099                    
2100    0ABF  3A C1 20  ISRSplTasks        LD    A,(IsrSplashTask)       ; Get the ISR task number
2101    0AC2  0F                           RRCA                          ; In demo play mode?
2102    0AC3  DA BB 0A                     JP    C,SplashDemo            ; 1: Yes ... go do game play (without sound)
2103    0AC6  0F                           RRCA                          ; Moving little alien from point A to B?
2104    0AC7  DA 68 18                     JP    C,SplashSprite          ; 2: Yes ... go move little alien from point A to B
2105    0ACA  0F                           RRCA                          ; Shooting extra 'C' with squiggly shot?
2106    0ACB  DA AB 0A                     JP    C,SplashSquiggly        ; 4: Yes ... go shoot extra 'C' in splash
2107    0ACE  C9                           RET                           ; No task to do
2108                    
2109                    ; Message to center of screen
2110                    ; Only used in one place for 'SPACE  INVADERS'
2111                    
2112    0ACF  21 14 2B                     LD    HL,$2B14                ; Near center of screen
2113    0AD2  0E 0F                        LD    C,15                    ; 15 bytes in message
2114    0AD4  C3 93 0A                     JP    PrintMessageDel         ; Print and out
2115                    
2116                    ; Wait on ISR counter to reach 0
2117                    
2118    0AD7  32 C0 20  WaitOnDelay        LD    (IsrDelay),A            ; Delay counter
2119    0ADA  3A C0 20                     LD    A,(IsrDelay)            ; Get current delay
2120    0ADD  A7                           AND   A                       ; Zero yet?
2121    0ADE  C2 DA 0A                     JP    NZ,$0ADA                ; No ... wait on it
2122    0AE1  C9                           RET                           ; Done
2123                    
2124                    ; Init the splash-animation block
2125                    
2126    0AE2  21 C2 20  IniSplashAni       LD    HL,SplashAnForm         ; The splash-animation descriptor
2127    0AE5  06 0C                        LD    B,12                    ; 12 bytes
2128    0AE7  C3 32 1A                     JP    BlockCopy               ; Block copy DE to descriptor
2129                    
2130                    ;===============================================================================
2131                    
2132                    ; After initialization ... splash screens
2133                    
2134    0AEA  AF                           XOR   A                       ; Make a 0
2135    0AEB  D3 03                        OUT   (SOUND1),A              ; Turn off sound
2136    0AED  D3 05                        OUT   (SOUND2),A              ; Turn off sound
2137    0AEF  CD 82 19                     CALL  $1982                   ; Turn off ISR splash-task
2138    0AF2  FB                           EI                            ; Enable interrupts (using them for delays)
2139    0AF3  CD B1 0A                     CALL  OneSecDelay             ; One second delay
2140    0AF6  3A EC 20                     LD    A,(SplashAnimate)       ; Splash screen type
2141    0AF9  A7                           AND   A                       ; Set flags based on type
2142    0AFA  21 17 30                     LD    HL,$3017                ; Screen coordinates (middle near top)
2143    0AFD  0E 04                        LD    C,4                     ; 4 characters in 'PLAY'
2144    0AFF  C2 E8 0B                     JP    NZ,$0BE8                ; Not 0 ... do 'normal' PLAY
2145    0B02  11 FA 1C                     LD    DE,Msg_PlayUY           ; Point to string 'PLAy' with upside down 'Y'
2146    0B05  CD 93 0A                     CALL  PrintMessageDel         ; Print the 'PLAy'
2147    0B08  11 AF 1D                     LD    DE,Msg_Invaders         ; Point to string 'SPACE  INVADERS'
2148    0B0B  CD CF 0A                     CALL  $0ACF                   ; Print to middle-ish of screen
2149    0B0E  CD B1 0A                     CALL  OneSecDelay             ; One second delay
2150    0B11  CD 15 18                     CALL  DrawAdvTable            ; Draw 'SCORE ADVANCE TABLE' with print delay
2151    0B14  CD B6 0A                     CALL  TwoSecDelay             ; Two second delay
2152    0B17  3A EC 20                     LD    A,(SplashAnimate)       ; Do splash ...
2153    0B1A  A7                           AND   A                       ; ... animations?
2154    0B1B  C2 4A 0B                     JP    NZ,$0B4A                ; Not 0 ... no animations
2155                    
2156                    ; Animate small alien replacing upside-down Y with correct Y
2157                    
2158    0B1E  11 95 1A                     LD    DE,SplashScrAnimStr1    ; Animate sprite from Y=FE to Y=9E step -1
2159    0B21  CD E2 0A                     CALL  IniSplashAni            ; Copy to splash-animate structure
2160    0B24  CD 80 0A                     CALL  Animate                 ; Wait for ISR to move sprite (small alien)
2161    0B27  11 B0 1B                     LD    DE,Temp_1BB0            ; Animate sprite from Y=98 to Y=FF step 1
2162    0B2A  CD E2 0A                     CALL  IniSplashAni            ; Copy to splash-animate structure
2163    0B2D  CD 80 0A                     CALL  Animate                 ; Wait for ISR to move sprite (alien pulling upside down Y)
2164    0B30  CD B1 0A                     CALL  OneSecDelay             ; One second delay
2165    0B33  11 C9 1F                     LD    DE,SplashScrAnimStr3    ; Animate sprite from Y=FF to Y=97 step 1
2166    0B36  CD E2 0A                     CALL  IniSplashAni            ; Copy to splash-animate structure
2167    0B39  CD 80 0A                     CALL  Animate                 ; Wait for ISR to move sprite (alien pushing Y)
2168    0B3C  CD B1 0A                     CALL  OneSecDelay             ; One second delay
2169    0B3F  21 B7 33                     LD    HL,$33B7                ; Where the splash alien ends up
2170    0B42  06 0A                        LD    B,10                    ; 10 rows
2171    0B44  CD CB 14                     CALL  ClearSmallSprite        ; Clear a one byte sprite at HL
2172    0B47  CD B6 0A                     CALL  TwoSecDelay             ; Two second delay
2173                    
2174                    ; Play demo
2175                    
2176    0B4A  CD D6 09                     CALL  ClearPlayField          ; Clear playfield
2177    0B4D  3A FF 21                     LD    A,(P1ShipsRem)          ; Number of ships for player-1
2178    0B50  A7                           AND   A                       ; If non zero ...
2179    0B51  C2 5D 0B                     JP    NZ,$0B5D                ; ... keep it (counts down between demos)
2180    0B54  CD D1 08                     CALL  GetShipsPerCred         ; Get number of ships from DIP settings
2181    0B57  32 FF 21                     LD    (P1ShipsRem),A          ; Reset number of ships for player-1
2182    0B5A  CD 7F 1A                     CALL  RemoveShip              ; Remove a ship from stash and update indicators
2183                    
2184    0B5D  CD E4 01                     CALL  CopyRamMirror           ; Block copy ROM mirror to initialize RAM
2185    0B60  CD C0 01                     CALL  InitAliens              ; Initialize all player 1 aliens
2186    0B63  CD EF 01                     CALL  DrawShieldPl1           ; Draw shields for player 1 (to buffer)
2187    0B66  CD 1A 02                     CALL  RestoreShieldsP1        ; Restore shields for player 1 (to screen)
2188    0B69  3E 01                        LD    A,$01                   ; ISR splash-task ...
2189    0B6B  32 C1 20                     LD    (IsrSplashTask),A       ; ... playing demo
2190    0B6E  CD CF 01                     CALL  DrawBottomLine          ; Draw playfield line
2191                    
2192    0B71  CD 18 16                     CALL  PlrFireOrDemo           ; In demo ... process demo movement and always fire
2193    0B74  CD F1 0B                     CALL  $0BF1                   ; Check player shot and aliens bumping edges of screen and hidden message
2194    0B77  D3 06                        OUT   (WATCHDOG),A            ; Feed watchdog
2195    0B79  CD 59 0A                     CALL  $0A59                   ; Has demo player been hit?
2196    0B7C  CA 71 0B                     JP    Z,$0B71                 ; No ... continue game
2197    0B7F  AF                           XOR   A                       ; Remove player shot ...
2198    0B80  32 25 20                     LD    (PlyrShotStatus),A      ; ... from activity
2199    0B83  CD 59 0A                     CALL  $0A59                   ; Wait for demo player ...
2200    0B86  C2 83 0B                     JP    NZ,$0B83                ; ... to stop exploding
2201                    
2202                    ; Credit information
2203                    
2204    0B89  AF                           XOR   A                       ; Turn off ...
2205    0B8A  32 C1 20                     LD    (IsrSplashTask),A       ; ... splash animation
2206    0B8D  CD B1 0A                     CALL  OneSecDelay             ; One second delay
2207    0B90  CD 88 19                     CALL  $1988                   ; ** Something else at one time? Jump straight to clear-play-field
2208    0B93  0E 0C                        LD    C,12                   ; Message size
2209    0B95  21 11 2C                     LD    HL,$2C11                ; Screen coordinates
2210    0B98  11 90 1F                     LD    DE,$1F90                ; 'INSERT  COIN'
2211    0B9B  CD F3 08                     CALL  PrintMessage            ; Print message
2212    0B9E  3A EC 20                     LD    A,(SplashAnimate)       ; Do splash ...
2213    0BA1  FE 00                        CP    $00                     ; ... animations?
2214    0BA3  C2 AE 0B                     JP    NZ,$0BAE                ; Not 0 ... not on this screen
2215    0BA6  21 11 33                     LD    HL,$3311                ; Screen coordinates
2216    0BA9  3E 02                        LD    A,$02                   ; Character 'C'
2217    0BAB  CD FF 08                     CALL  DrawChar                ; Put an extra 'C' for 'CCOIN' on the screen
2218    0BAE  01 9C 1F                     LD    BC,$1F9C                ; '<1 OR 2 PLAYERS>  '
2219    0BB1  CD 56 18                     CALL  ReadPriStruct           ; Load the screen,pointer
2220    0BB4  CD 4C 18                     CALL  $184C                   ; Print the message
2221    0BB7  DB 02                        IN    A,(INP2)                ; Display coin info (bit 7) ...
2222    0BB9  07                           RLCA                          ; ... on demo screen?
2223    0BBA  DA C3 0B                     JP    C,$0BC3                 ; 1 means no ... skip it
2224    0BBD  01 A0 1F                     LD    BC,$1FA0                ; '*1 PLAYER  1 COIN '
2225    0BC0  CD 3A 18                     CALL  $183A                   ; Load the descriptor
2226    0BC3  CD B6 0A                     CALL  TwoSecDelay             ; Print TWO descriptors worth
2227    0BC6  3A EC 20                     LD    A,(SplashAnimate)       ; Doing splash ...
2228    0BC9  FE 00                        CP    $00                     ; ... animation?
2229    0BCB  C2 DA 0B                     JP    NZ,$0BDA                ; Not 0 ... not on this screen
2230    0BCE  11 D5 1F                     LD    DE,SplashScrAnimStr4    ; Animation for small alien to line up with extra 'C'
2231    0BD1  CD E2 0A                     CALL  IniSplashAni            ; Copy the animation block
2232    0BD4  CD 80 0A                     CALL  Animate                 ; Wait for the animation to complete
2233    0BD7  CD 9E 18                     CALL  $189E                   ; Animate alien shot to extra 'C'
2234    0BDA  21 EC 20                     LD    HL,SplashAnimate        ; Toggle ...
2235    0BDD  7E                           LD    A,(HL)                  ; ... the ...
2236    0BDE  3C                           INC   A                       ; ... splash screen ...
2237    0BDF  E6 01                        AND   $01                     ; ... animation for ...
2238    0BE1  77                           LD    (HL),A                  ; ... next time
2239    0BE2  CD D6 09                     CALL  ClearPlayField          ; Clear play field
2240    0BE5  C3 DF 18                     JP    $18DF                   ; Keep splashing
2241                    
2242    0BE8  11 AB 1D                     LD    DE,Msg_PlayY            ;'PLAY' with normal 'Y'
2243    0BEB  CD 93 0A                     CALL  PrintMessageDel         ; Print it
2244    0BEE  C3 0B 0B                     JP    $0B0B                   ; Continue with splash (HL will be pointing to next message)
2245                    
2246    0BF1  CD 0A 19                     CALL  PlyrShotAndBump         ; Check if player is shot and aliens bumping the edge of screen
2247    0BF4  C3 9A 19                     JP    CheckHiddenMes          ; Check for hidden-message display sequence
2248                    
2249    0BF7  13 00 08  Msg_TaitoCop       DB    $13, $00, $08, $13      ; 'TAITO COP' (no R)
2250    0BFB  0E 26 02                     DB    $0E ,$26 ,$02, $0E
2251    0BFF  0F                           DB    $0F
2252                    
2253                    ;===============================================================================
2254                    
2255                    ; DIAGNOSTICS ROUTINE (not included)
2256                    ;
2257                    ; The very center 2K of the code map is an expansion area. It originally contained
2258                    ; a 1K diagnostics routine beginning at 1000. The original code would check bit 0
2259                    ; of port 0 (wired to DIP4) and jump to this routine if the switch was flipped.
2260                    ; The routine was removed in this Midway version of the code. And it was removed
2261                    ; in later versions of the TAITO code line
2262                    
2263    0C00                               DS    2048,0                  ; Write zeros to fill space
2264                    
2265                    ;===============================================================================
2266                    
2267                    ; The only differences between this and EraseSimpleSprite is two CPL instructions in the latter and
2268                    ; the use of AND instead of OR. NOP takes the same amount of time/space as CPL. So the two NOPs
2269                    ; here make these two parallel routines the same size and speed
2270                    
2271    1400  00        DrawShiftedSprite  NOP                           ; Time/size pad to match CPL in EraseShiftedSprite
2272    1401  CD 74 14                     CALL  CnvtPixNumber           ; Convert pixel number to coord and shift
2273    1404  00                           NOP                           ; Time/size pad to match CPL in EraseShiftedSprite
2274    1405  C5                           PUSH  BC                      ; Hold count
2275    1406  E5                           PUSH  HL                      ; Hold start coordinate
2276    1407  1A                           LD    A,(DE)                  ; Get the picture bits
2277    1408  D3 04                        OUT   (SHFT_DATA),A           ; Store in shift register
2278    140A  DB 03                        IN    A,(SHFT_IN)             ; Read the shifted pixels
2279    140C  B6                           OR    (HL)                    ; OR them onto the screen
2280    140D  77                           LD    (HL),A                  ; Store them back to screen
2281    140E  23                           INC   HL                      ; Next colummn on screen
2282    140F  13                           INC   DE                      ; Next in picture
2283    1410  AF                           XOR   A                       ; Shift over ...
2284    1411  D3 04                        OUT   (SHFT_DATA),A           ; ... to next byte in register (shift in 0)
2285    1413  DB 03                        IN    A,(SHFT_IN)             ; Read the shifted pixels
2286    1415  B6                           OR    (HL)                    ; OR them onto the screen
2287    1416  77                           LD    (HL),A                  ; Store them back to screen
2288    1417  E1                           POP   HL                      ; Restore starting coordinate
2289    1418  01 20 00                     LD    BC,32                   ; Add 32 ...
2290    141B  09                           ADD   HL,BC                   ; ... to coordinate (move to next row)
2291    141C  C1                           POP   BC                      ; Restore count
2292    141D  05                           DEC   B                       ; All done?
2293    141E  C2 05 14                     JP    NZ,$1405                ; No ... go do all rows
2294    1421  C9                           RET                           ; Done
2295                    
2296    1422  00                           NOP
2297    1423  00                           NOP
2298                    
2299                    ; Clear a sprite from the screen (standard pixel number descriptor)
2300                    ; ** We clear 2 bytes even though the draw-simple only draws one
2301                    
2302    1424  CD 74 14  EraseSimpleSprite  CALL  CnvtPixNumber           ; Convert pixel number in HL
2303    1427  C5                           PUSH  BC                      ; Hold
2304    1428  E5                           PUSH  HL                      ; Hold
2305    1429  AF                           XOR   A                       ; 0
2306    142A  77                           LD    (HL),A                  ; Clear screen byte
2307    142B  23                           INC   HL                      ; Next byte
2308    142C  77                           LD    (HL),A                  ; Clear byte
2309    142D  23                           INC   HL                      ; ** Is this to mimic timing? We increment then pop
2310    142E  E1                           POP   HL                      ; Restore screen coordinate
2311    142F  01 20 00                     LD    BC,32                   ; Add 1 row of 32 ...
2312    1432  09                           ADD   HL,BC                   ; ... to screen coordinate
2313    1433  C1                           POP   BC                      ; Restore counter
2314    1434  05                           DEC   B                       ; All rows done?
2315    1435  C2 27 14                     JP    NZ,$1427                ; Do all rows
2316    1438  C9                           RET                           ; Done
2317                    
2318                    ; Display character to screen
2319                    ; HL = screen coordinates, DE = character data, B = number of rows
2320                    
2321    1439  C5        DrawSimpleSprite   PUSH  BC                      ; Preserve counter
2322    143A  1A                           LD    A,(DE)                  ; From character set ...
2323    143B  77                           LD    (HL),A                  ; ... to screen
2324    143C  13                           INC   DE                      ; Next in character set
2325    143D  01 20 00                     LD    BC,32                   ; Next row of 32 ...
2326    1440  09                           ADD   HL,BC                   ; ... on screen
2327    1441  C1                           POP   BC                      ; Restore counter
2328    1442  05                           DEC   B                       ; Decrement counter
2329    1443  C2 39 14                     JP    NZ,DrawSimpleSprite     ; Do all
2330    1446  C9                           RET                           ; Done
2331                    
2332    1447                               DS    11, 0                    ; Unused space?
2333                    
2334                    ; Erases a shifted sprite from screen (like for player's explosion)
2335                    
2336    1452  CD 74 14  EraseShifted       CALL  CnvtPixNumber           ; Convert pixel number in HL to coorinates with shift
2337    1455  C5                           PUSH  BC                      ; Hold BC
2338    1456  E5                           PUSH  HL                      ; Hold coordinate
2339    1457  1A                           LD    A,(DE)                  ; Get picture value
2340    1458  D3 04                        OUT   (SHFT_DATA),A           ; Value into shift register
2341    145A  DB 03                        IN    A,(SHFT_IN)             ; Read shifted sprite picture
2342    145C  2F                           CPL                           ; Reverse it (erasing bits)
2343    145D  A6                           AND   (HL)                    ; Erase the bits from the screen
2344    145E  77                           LD    (HL),A                  ; Store the erased pattern back
2345    145F  23                           INC   HL                      ; Next column on screen
2346    1460  13                           INC   DE                      ; Next in image
2347    1461  AF                           XOR   A                       ; Shift register over ...
2348    1462  D3 04                        OUT   (SHFT_DATA),A           ; ... 8 bits (shift in 0)
2349    1464  DB 03                        IN    A,(SHFT_IN)             ; Read 2nd byte of image
2350    1466  2F                           CPL                           ; Reverse it (erasing bits)
2351    1467  A6                           AND   (HL)                    ; Erase the bits from the screen
2352    1468  77                           LD    (HL),A                  ; Store the erased pattern back
2353    1469  E1                           POP   HL                      ; Restore starting coordinate
2354    146A  01 20 00                     LD    BC,32                   ; Add 32 ...
2355    146D  09                           ADD   HL,BC                   ; ... to next row
2356    146E  C1                           POP   BC                      ; Restore BC (count)
2357    146F  05                           DEC   B                       ; All rows done?
2358    1470  C2 55 14                     JP    NZ,$1455                ; No ... erase all
2359    1473  C9                           RET                           ; Done
2360                    
2361                    ; Convert pixel number in HL to screen coordinate and shift amount
2362                    ; HL gets screen coordinate
2363                    ; Hardware shift-register gets amount
2364                    
2365    1474  7D        CnvtPixNumber      LD    A,L                     ; Get X coordinate
2366    1475  E6 07                        AND   $07                     ; Shift by pixel position
2367    1477  D3 02                        OUT   (SHFT_AMNT),A           ; Write shift amount to hardware
2368    1479  C3 47 1A                     JP    ConvToScr               ; HL = HL/8 + 2000 (screen coordinate)
2369                    
2370                    ; In a multi-player game the player's shields are block-copied to and from RAM between turns
2371                    ; HL = screen pointer, DE = memory buffer, B = number of rows, C = number of columns
2372                    
2373    147C  C5        RememberShields    PUSH  BC                      ; Hold counter
2374    147D  E5                           PUSH  HL                      ; Hold start
2375    147E  7E                           LD    A,(HL)                  ; From sprite ... (should be DE)
2376    147F  12                           LD    (DE),A                  ; ... to screen ... (should be HL)
2377    1480  13                           INC   DE                      ; Next in sprite
2378    1481  23                           INC   HL                      ; Next on screen
2379    1482  0D                           DEC   C                       ; All columns done?
2380    1483  C2 7E 14                     JP    NZ,$147E                ; No ... do multi columns
2381    1486  E1                           POP   HL                      ; Restore screen start
2382    1487  01 20 00                     LD    BC,32                   ; Add 32 ...
2383    148A  09                           ADD   HL,BC                   ; ... to get to next row
2384    148B  C1                           POP   BC                      ; Pop the counters
2385    148C  05                           DEC   B                       ; All rows done?
2386    148D  C2 7C 14                     JP    NZ,RememberShields      ; No ... do multi rows
2387    1490  C9                           RET                           ; Done
2388                    
2389    1491  CD 74 14  DrawSprCollision   CALL  CnvtPixNumber           ; Convert pixel number to coord and shift
2390    1494  AF                           XOR   A                       ; Clear the ...
2391    1495  32 61 20                     LD    (Collision),A           ; ... collision-detection flag
2392    1498  C5                           PUSH  BC                      ; Hold count
2393    1499  E5                           PUSH  HL                      ; Hold screen
2394    149A  1A                           LD    A,(DE)                  ; Get byte
2395    149B  D3 04                        OUT   (SHFT_DATA),A           ; Write first byte to shift register
2396    149D  DB 03                        IN    A,(SHFT_IN)             ; Read shifted pattern
2397    149F  F5                           PUSH  AF                      ; Hold the pattern
2398    14A0  A6                           AND   (HL)                    ; Any bits from pixel collide with bits on screen?
2399    14A1  CA A9 14                     JP    Z,$14A9                 ; No ... leave flag alone
2400    14A4  3E 01                        LD    A,$01                   ; Yes ... set ...
2401    14A6  32 61 20                     LD    (Collision),A           ; ... collision flag
2402    14A9  F1                           POP   AF                      ; Restore the pixel pattern
2403    14AA  B6                           OR    (HL)                    ; OR it onto the screen
2404    14AB  77                           LD    (HL),A                  ; Store new screen value
2405    14AC  23                           INC   HL                      ; Next byte on screen
2406    14AD  13                           INC   DE                      ; Next in pixel pattern
2407    14AE  AF                           XOR   A                       ; Write zero ...
2408    14AF  D3 04                        OUT   (SHFT_DATA),A           ; ... to shift register
2409    14B1  DB 03                        IN    A,(SHFT_IN)             ; Read 2nd half of shifted sprite
2410    14B3  F5                           PUSH  AF                      ; Hold pattern
2411    14B4  A6                           AND   (HL)                    ; Any bits from pixel collide with bits on screen?
2412    14B5  CA BD 14                     JP    Z,$14BD                 ; No ... leave flag alone
2413    14B8  3E 01                        LD    A,$01                   ; Yes ... set ...
2414    14BA  32 61 20                     LD    (Collision),A           ; ... collision flag
2415    14BD  F1                           POP   AF                      ; Restore the pixel pattern
2416    14BE  B6                           OR    (HL)                    ; OR it onto the screen
2417    14BF  77                           LD    (HL),A                  ; Store new screen pattern
2418    14C0  E1                           POP   HL                      ; Starting screen coordinate
2419    14C1  01 20 00                     LD    BC,32                   ; Add 32 ...
2420    14C4  09                           ADD   HL,BC                   ; ... to get to next row
2421    14C5  C1                           POP   BC                      ; Restore count
2422    14C6  05                           DEC   B                       ; All done?
2423    14C7  C2 98 14                     JP    NZ,$1498                ; No ... do all rows
2424    14CA  C9                           RET                           ; Done
2425                    
2426                    ; Clear a one byte sprite at HL. B=number of rows
2427                    
2428    14CB  AF        ClearSmallSprite   XOR   A                       ; 0
2429    14CC  C5                           PUSH  BC                      ; Preserve BC
2430    14CD  77                           LD    (HL),A                  ; Clear screen byte
2431    14CE  01 20 00                     LD    BC,32                   ; Bump HL ...
2432    14D1  09                           ADD   HL,BC                   ; ... one screen row of 32
2433    14D2  C1                           POP   BC                      ; Restore
2434    14D3  05                           DEC   B                       ; All done?
2435    14D4  C2 CC 14                     JP    NZ,$14CC                ; No ... clear all
2436    14D7  C9                           RET                           ; Done
2437                    
2438                    ; The player's shot hit something (or is being removed from play)
2439                    
2440    14D8  3A 25 20  PlayerShotHit      LD    A,(PlyrShotStatus)      ; Player shot flag
2441    14DB  FE 05                        CP    $05                     ; Alien explosion in progress?
2442    14DD  C8                           RET   Z                       ; Yes ... ignore this function
2443    14DE  FE 02                        CP    $02                     ; Normal movement?
2444    14E0  C0                           RET   NZ                      ; No ... out
2445                    
2446    14E1  3A 29 20                     LD    A,(Obj1CoorYr)          ; Get Yr coordinate of player shot
2447    14E4  FE D8                        CP    $D8                     ; Compare to 216 (40 from Top-rotated)
2448    14E6  47                           LD    B,A                     ; Hold value for later
2449    14E7  D2 30 15                     JP    NC,$1530                ; Yr is within 40 from top initiate miss-explosion (shot flag 3)
2450    14EA  3A 02 20                     LD    A,(AlienIsExploding)    ; Is an alien ...
2451    14ED  A7                           AND   A                       ; ... blowing up?
2452    14EE  C8                           RET   Z                       ; No ... out
2453                    
2454    14EF  78                           LD    A,B                     ; Get original Yr coordinate back to A
2455    14F0  FE CE                        CP    $CE                     ; Compare to 206 (50 from rotated top)
2456    14F2  D2 79 15                     JP    NC,$1579                ; Yr is within 50 from top? Yes ... saucer must be hit
2457    14F5  C6 06                        ADD   A,$06                   ; Offset to coordinate for wider 'explosion' picture
2458    14F7  47                           LD    B,A                     ; Hold that
2459    14F8  3A 09 20                     LD    A,(RefAlienYr)          ; Ref alien Y coordinate
2460                    
2461                    ; If the lower 4 rows are all empty then the reference alien's Y coordinate will wrap around from 0 to F8.
2462                    ; At this point the top row of aliens is in the shields and we will assume that everything is within
2463                    ; the rack
2464                    
2465    14FB  FE 90                        CP    $90                     ; This is true if ...
2466    14FD  D2 04 15                     JP    NC,CodeBug1             ; ... aliens are down in the shields
2467    1500  B8                           CP    B                       ; Compare to shot's coordinate
2468    1501  D2 30 15                     JP    NC,$1530                ; Outside the rack-square ... do miss explosion
2469                    
2470                    ; We get here if the player's shot hit something within the rack area (a shot or an alien).
2471                    ; Find the alien that is (or would be) where the shot hit. If there is no alien alive at the row/column
2472                    ; thn the player hit an alien missile. If there is an alien then explode the alien.
2473                    ;
2474                    ; There is a code bug here, but it is extremely subtle. The algorithm for finding the row/column in the
2475                    ; rack works by adding 16 to the reference coordinates (X for column, Y for row) until it passes or equals
2476                    ; the target coordinates. This works great as long as the target point is within the alien's rack area.
2477                    ; If the reference point is far to the right, the column number will be greater than 11, which messes
2478                    ; up the column/row-to-pointer math.
2479                    ;
2480                    ; The entire rack of aliens is based on the lower left alien. Imagine all aliens are dead except the
2481                    ; upper left. It wiggles down the screen and enters the players shields on the lower left where it begins
2482                    ; to eat them. Imagine the player is under his own shields on the right side of the screen and fires a
2483                    ; shot into his own shield.
2484                    ;
2485                    ; The alien is in the rack on row 4 (rows are numbered from bottom up starting with 0). The shot hits
2486                    ; the shields below the alien's Y coordinate and gets correctly assigned to row 3. The alien is in the rack
2487                    ; at column 0 (columns are numbered from left to right starting with 0). The shot hits the shields far to
2488                    ; the right of the alien's X coordinate. The algorithm says it is in column 11. But 0-10 are the only
2489                    ; correct values.
2490                    ;
2491                    ; The column/row-to-pointer math works by multiplying the row by 11 and adding the column. For the alien
2492                    ; that is 11*4 + 0 = 44. For the shot that is 11*3 +11 = 44. The game thinks the shot hit the alien.
2493                    
2494    1504  68        CodeBug1           LD    L,B                     ; L now holds the shot coordinate (adjusted)
2495    1505  CD 62 15                     CALL  FindRow                 ; Look up row number to B
2496    1508  3A 2A 20                     LD    A,(Obj1CoorXr)          ; Player's shot's Xr coordinate ...
2497    150B  67                           LD    H,A                     ; ... to H
2498    150C  CD 6F 15                     CALL  FindColumn              ; Get alien's coordinate
2499    150F  22 64 20                     LD    (ExpAlienYr),HL         ; Put it in the exploding-alien descriptor
2500    1512  3E 05                        LD    A,$05                   ; Flag alien explosion ...
2501    1514  32 25 20                     LD    (PlyrShotStatus),A      ; ... in progress
2502    1517  CD 81 15                     CALL  GetAlienStatPtr         ; Get descriptor for alien
2503    151A  7E                           LD    A,(HL)                  ; Is alien ...
2504    151B  A7                           AND   A                       ; ... alive
2505    151C  CA 30 15                     JP    Z,$1530                 ; No ... must have been an alien shot
2506                    
2507    151F  36 00                        LD    (HL),$00                ; Make alien invader dead
2508    1521  CD 5F 0A                     CALL  ScoreForAlien           ; Makes alien explosion sound and adjust score
2509    1524  CD 3B 1A                     CALL  ReadDesc                ; Load 5 byte sprite descriptor
2510    1527  CD D3 15                     CALL  DrawSprite              ; Draw explosion sprite on screen
2511    152A  3E 10                        LD    A,$10                   ; Initiate alien-explosion
2512    152C  32 03 20                     LD    (ExpAlienTimer),A       ; ... timer to 16
2513    152F  C9                           RET                           ; Done
2514                    
2515                    ; Player shot leaving playfield, hitting shield, or hitting an alien shot
2516                    
2517    1530  3E 03                        LD    A,$03                   ; Mark ...
2518    1532  32 25 20                     LD    (PlyrShotStatus),A      ; ... player shot hit something other than alien
2519    1535  C3 4A 15                     JP    $154A                   ; Finish up
2520                    
2521                    ; Time down the alien explosion. Remove when done
2522                    
2523    1538  21 03 20  AlienExplodeTime   LD    HL,ExpAlienTimer        ; Decrement alien explosion ...
2524    153B  35                           DEC   (HL)                    ; ... timer
2525    153C  C0                           RET   NZ                      ; Not done  ... out
2526    153D  2A 64 20                     LD    HL,(ExpAlienYr)         ; Pixel pointer for exploding alien
2527    1540  06 10                        LD    B,16                    ; 16 row pixel
2528    1542  CD 24 14                     CALL  EraseSimpleSprite       ; Clear the explosion sprite from the screen
2529    1545  3E 04                        LD    A,4                     ; 4 means that ...
2530    1547  32 25 20                     LD    (PlyrShotStatus),A      ; ... alien has exploded (remove from active duty)
2531                    
2532    154A  AF                           XOR   A                       ; Turn off ...
2533    154B  32 02 20                     LD    (AlienIsExploding),A    ; ... alien-is-blowing-up flag
2534    154E  06 F7                        LD    B,$F7                   ; Turn off ...
2535    1550  C3 DC 19                     JP    SoundBits3Off           ; ... alien exploding sound
2536                    
2537    1553  00                           NOP
2538                    
2539                    ; Count number of 16s needed to bring reference (in A) up to target (in H).
2540                    ; If the reference starts out beyond the target then we add 16s as long as
2541                    ; the reference has a signed bit. But these aren't signed quantities. This
2542                    ; doesn't make any sense. This counting algorithm produces questionable
2543                    ; results if the reference is beyond the target
2544                    
2545    1554  0E 00     Cnt16s             LD    C,$00                   ; Count of 16s
2546    1556  BC                           CP    H                       ; Compare reference coordinate to target
2547    1557  D4 90 15                     CALL  NC,WrapRef              ; If reference is greater or equal then do something questionable ... see below
2548    155A  BC                           CP    H                       ; Compare reference coordinate to target
2549    155B  D0                           RET   NC                      ; If reference is greater or equal then done
2550    155C  C6 10                        ADD   A,16                    ; Add 16 to reference
2551    155E  0C                           INC   C                       ; Bump 16s count
2552    155F  C3 5A 15                     JP    $155A                   ; Keep testing
2553                    
2554                    ; L contains a Yr coordinate. Find the row number within the rack that corresponds
2555                    ; to the Yr coordinate. Return the row coordinate in L and the row number in C
2556                    
2557    1562  3A 09 20  FindRow            LD    A,(RefAlienYr)          ; Reference alien Yr coordinate
2558    1565  65                           LD    H,L                     ; Target Yr coordinate to H
2559    1566  CD 54 15                     CALL  Cnt16s                  ; Count 16s needed to bring ref alien to target
2560    1569  41                           LD    B,C                     ; Count to B
2561    156A  05                           DEC   B                       ; Base 0
2562    156B  DE 10                        SBC   A,16                    ; The counting also adds 16 no matter what
2563    156D  6F                           LD    L,A                     ; To coordinate
2564    156E  C9                           RET                           ; Done
2565                    
2566                    ; H contains a Xr coordinate. Find the column number within the rack that corresponds
2567                    ; to the Xr coordinate. Return the column coordinate in H and the column number in C
2568                    
2569    156F  3A 0A 20  FindColumn         LD    A,(RefAlienXr)          ; Reference alien Yn coordinate
2570    1572  CD 54 15                     CALL  Cnt16s                  ; Count 16s to bring Y to target Y
2571    1575  DE 10                        SBC   A,16                    ; Subtract off extra 16
2572    1577  67                           LD    H,A                     ; To H
2573    1578  C9                           RET                           ; Done
2574                    
2575    1579  3E 01                        LD    A,$01                   ; Mark flying ...
2576    157B  32 85 20                     LD    (SaucerHit),A           ; ... saucer has been hit
2577    157E  C3 45 15                     JP    $1545                   ; Remove player shot
2578                    
2579                    ; B is row number. C is column number (starts at 1)
2580                    ; Return pointer to alien-status flag for current player
2581                    
2582    1581  78        GetAlienStatPtr    LD    A,B                     ; Hold original
2583    1582  07                           RLCA                          ; *2
2584    1583  07                           RLCA                          ; *4
2585    1584  07                           RLCA                          ; *8
2586    1585  80                           ADD   A,B                     ; *9
2587    1586  80                           ADD   A,B                     ; *10
2588    1587  80                           ADD   A,B                     ; *11
2589    1588  81                           ADD   A,C                     ; Add row offset to column offset
2590    1589  3D                           DEC   A                       ; -1
2591    158A  6F                           LD    L,A                     ; Set LSB of HL
2592    158B  3A 67 20                     LD    A,(PlayerDataMSB)       ; Set ...
2593    158E  67                           LD    H,A                     ; ... MSB of HL with active player indicator
2594    158F  C9                           RET                           ; Done
2595                    
2596                    ; This is called if the reference point is greater than the target point. I believe the goal is to
2597                    ; wrap the reference back around until it is lower than the target point. But the algorithm simply adds
2598                    ; until the sign bit of the the reference is 0. If the target is 2 and the reference is 238 then this
2599                    ; algorithm moves the reference 238+16=244 then 244+16=4. Then the algorithm stops. But the reference is
2600                    ; STILL greater than the target
2601                    
2602                    ; Also imagine that the target is 20 and the reference is 40. The algorithm adds 40+16=56, which is not
2603                    ; negative, so it stops there
2604                    
2605                    ; I think the intended code is 'JP NC' instead of 'JP M', but even that doesn't make sense
2606                    
2607    1590  0C        WrapRef            INC   C                       ; Increase 16s count
2608    1591  C6 10                        ADD   A,16                    ; Add 16 to ref
2609    1593  FA 90 15                     JP    M,WrapRef               ; Keep going till result is positive
2610    1596  C9                           RET                           ; Done
2611                    
2612                    ; When rack bumps the edge of the screen then the direction flips and the rack
2613                    ; drops 8 pixels. The deltaX and deltaY values are changed here. Interestingly
2614                    ; if there is only one alien left then the right value is 3 instead of the
2615                    ; usual 2. The left direction is always -2
2616                    
2617    1597  3A 0D 20  RackBump           LD    A,(RackDirection)       ; Get rack direction
2618    159A  A7                           AND   A                       ; Moving right?
2619    159B  C2 B7 15                     JP    NZ,$15B7                ; No ... handle moving left
2620                    
2621    159E  21 A4 3E                     LD    HL,$3EA4                ; Line down the right edge of playfield
2622    15A1  CD C5 15                     CALL  $15C5                   ; Check line down the edge
2623    15A4  D0                           RET   NC                      ; Nothing is there ... return
2624    15A5  06 FE                        LD    B,$FE                   ; Delta X of -2
2625    15A7  3E 01                        LD    A,$01                   ; Rack now moving right
2626                    
2627    15A9  32 0D 20                     LD    (RackDirection),A       ; Set new rack direction
2628    15AC  78                           LD    A,B                     ; B has delta X
2629    15AD  32 08 20                     LD    (RefAlienDXr),A         ; Set new delta X
2630    15B0  3A 0E 20                     LD    A,(RackDownDelta)       ; Set delta Y ...
2631    15B3  32 07 20                     LD    (RefAlienDYr),A         ; ... to drop rack by 8
2632    15B6  C9                           RET                           ; Done
2633                    
2634    15B7  21 24 25                     LD    HL,$2524                ; Line down the left edge of playfield
2635    15BA  CD C5 15                     CALL  $15C5                   ; Check line down the edge
2636    15BD  D0                           RET   NC                      ; Nothing is there ... return
2637    15BE  CD F1 18                     CALL  $18F1                   ; Get moving-right delta X value of 2 (3 if just one alien left)
2638    15C1  AF                           XOR   A                       ; Rack now moving left
2639    15C2  C3 A9 15                     JP    $15A9                   ; Set rack direction
2640                    
2641    15C5  06 17                        LD    B,$17                   ; Checking 23 bytes in a line up the screen from near the bottom
2642    15C7  7E                           LD    A,(HL)                  ; Get screen memory
2643    15C8  A7                           AND   A                       ; Is screen memory empty?
2644    15C9  C2 6B 16                     JP    NZ,$166B                ; No ... set carry flag and out
2645    15CC  23                           INC   HL                      ; Next byte on screen
2646    15CD  05                           DEC   B                       ; All column done?
2647    15CE  C2 C7 15                     JP    NZ,$15C7                ; No ... keep looking
2648    15D1  C9                           RET                           ; Return with carry flag clear
2649                    
2650    15D2  00                           NOP
2651                    
2652                    ; Draw sprite at [DE] to screen at pixel position in HL
2653                    ; The hardware shift register is used in converting pixel positions
2654                    ; to screen coordinates
2655                    
2656    15D3  CD 74 14  DrawSprite         CALL  CnvtPixNumber           ; Convert pixel number to screen/shift
2657    15D6  E5                           PUSH  HL                      ; Preserve screen coordinate
2658    15D7  C5                           PUSH  BC                      ; Hold for a second
2659    15D8  E5                           PUSH  HL                      ; Hold for a second
2660    15D9  1A                           LD    A,(DE)                  ; From sprite data
2661    15DA  D3 04                        OUT   (SHFT_DATA),A           ; Write data to shift register
2662    15DC  DB 03                        IN    A,(SHFT_IN)             ; Read back shifted amount
2663    15DE  77                           LD    (HL),A                  ; Shifted sprite to screen
2664    15DF  23                           INC   HL                      ; Adjacent cell
2665    15E0  13                           INC   DE                      ; Next in sprite data
2666    15E1  AF                           XOR   A                       ; 0
2667    15E2  D3 04                        OUT   (SHFT_DATA),A           ; Write 0 to shift register
2668    15E4  DB 03                        IN    A,(SHFT_IN)             ; Read back remainder of previous
2669    15E6  77                           LD    (HL),A                  ; Write remainder to adjacent
2670    15E7  E1                           POP   HL                      ; Old screen coordinate
2671    15E8  01 20 00                     LD    BC,32                   ; Offset screen by 32 ...
2672    15EB  09                           ADD   HL,BC                   ; ... to next row
2673    15EC  C1                           POP   BC                      ; Restore count
2674    15ED  05                           DEC   B                       ; All done?
2675    15EE  C2 D7 15                     JP    NZ,$15D7                ; No ... do all
2676    15F1  E1                           POP   HL                      ; Restore HL
2677    15F2  C9                           RET                           ; Done
2678                    
2679                    ; Count number of aliens remaining in active game and return count 2082 holds the current count.
2680                    ; If only 1, 206B gets a flag of 1 ** but ever nobody checks this
2681                    
2682    15F3  CD 11 16  CountAliens        CALL  GetPlayerDataPtr        ; Get active player descriptor
2683    15F6  01 00 37                     LD    BC,$3700                ; B=55 aliens to check?
2684    15F9  7E                           LD    A,(HL)                  ; Get byte
2685    15FA  A7                           AND   A                       ; Is it a zero?
2686    15FB  CA FF 15                     JP    Z,$15FF                 ; Yes ... don't count it
2687    15FE  0C                           INC   C                       ; Count the live aliens
2688    15FF  23                           INC   HL                      ; Next alien
2689    1600  05                           DEC   B                       ; Count ...
2690    1601  C2 F9 15                     JP    NZ,$15F9                ; ... all alien indicators
2691    1604  79                           LD    A,C                     ; Get the count
2692    1605  32 82 20                     LD    (NumAliens),A           ; Hold it
2693    1608  FE 01                        CP    $01                     ; Just one?
2694    160A  C0                           RET   NZ                      ; No keep going
2695    160B  21 6B 20                     LD    HL,OneAlien             ; Set flag if ...
2696    160E  36 01                        LD    (HL),$01                ; ... only one alien left
2697    1610  C9                           RET                           ; Done
2698                    
2699                    ; Set HL with 2100 if player 1 is active or 2200 if player 2 is active
2700                    
2701    1611  2E 00     GetPlayerDataPtr   LD    L,$00                   ; Byte boundary
2702    1613  3A 67 20                     LD    A,(PlayerDataMSB)       ; Active player number
2703    1616  67                           LD    H,A                     ; Set HL to data
2704    1617  C9                           RET                           ; Done
2705                    
2706                    ; Initiate player fire if button is pressed
2707                    ; Demo commands are parsed here if in demo mode
2708                    
2709    1618  3A 15 20  PlrFireOrDemo      LD    A,(PlayerAlive)         ; Is there an active player?
2710    161B  FE FF                        CP    $FF                     ; FF = alive
2711    161D  C0                           RET   NZ                      ; Player has been shot - no firing
2712    161E  21 10 20                     LD    HL,Obj0Timer            ; Get player ...
2713    1621  7E                           LD    A,(HL)                  ; ... task ...
2714    1622  23                           INC   HL                      ; ... timer ...
2715    1623  46                           LD    B,(HL)                  ; ... value
2716    1624  B0                           OR    B                       ; Is the timer 0 (object active)?
2717    1625  C0                           RET   NZ                      ; No ... no firing till player object starts
2718    1626  3A 25 20                     LD    A,(PlyrShotStatus)      ; Does the player have ...
2719    1629  A7                           AND   A                       ; ... a shot on the screen?
2720    162A  C0                           RET   NZ                      ; Yes ... ignore
2721    162B  3A EF 20                     LD    A,(GameMode)            ; Are we in ...
2722    162E  A7                           AND   A                       ; ... game mode?
2723    162F  CA 52 16                     JP    Z,$1652                 ; No ... in demo mode ... constant firing in demo
2724    1632  3A 2D 20                     LD    A,(FireBounce)          ; Is fire button ...
2725    1635  A7                           AND   A                       ; ... being held down?
2726    1636  C2 48 16                     JP    NZ,$1648                ; Yes ... wait for bounce
2727    1639  CD C0 17                     CALL  ReadInputs              ; Read active player controls
2728    163C  E6 10                        AND   $10                     ; Fire-button pressed?
2729    163E  C8                           RET   Z                       ; No ... out
2730    163F  3E 01                        LD    A,$01                   ; Flag
2731    1641  32 25 20                     LD    (PlyrShotStatus),A      ; Flag shot active
2732    1644  32 2D 20                     LD    (FireBounce),A          ; Flag that fire button is down
2733    1647  C9                           RET                           ; Done
2734                    
2735    1648  CD C0 17                     CALL  ReadInputs              ; Read active player controls
2736    164B  E6 10                        AND   $10                     ; Fire-button pressed?
2737    164D  C0                           RET   NZ                      ; Yes ... ignore
2738    164E  32 2D 20                     LD    (FireBounce),A          ; Else ... clear flag
2739    1651  C9                           RET                           ; Done
2740                    
2741                    ; Handle demo (constant fire, parse demo commands)
2742                    
2743    1652  21 25 20                     LD    HL,PlyrShotStatus       ; Demo fires ...
2744    1655  36 01                        LD    (HL),$01                ; ... constantly
2745    1657  2A ED 20                     LD    HL,(DemoCmdPtr)         ; Demo command bufer
2746    165A  23                           INC   HL                      ; Next position
2747    165B  7D                           LD    A,L                     ; Command buffer ...
2748    165C  FE 7E                        CP    $7E                     ; ... wraps around
2749    165E  DA 63 16                     JP    C,$1663                 ; ... Buffer from 1F74 to 1F7E
2750    1661  2E 74                        LD    L,$74                   ; ... overflow
2751    1663  22 ED 20                     LD    (DemoCmdPtr),HL         ; Next demo command
2752    1666  7E                           LD    A,(HL)                  ; Get next command
2753    1667  32 1D 20                     LD    (NextDemoCmd),A         ; Set command for movement
2754    166A  C9                           RET                           ; Done
2755                    
2756    166B  37                           SCF                           ; Set carry flag
2757    166C  C9                           RET                           ; Done
2758                    
2759    166D  AF                           XOR   A                       ; 0
2760    166E  CD 8B 1A                     CALL  $1A8B                   ; Print ZERO ships remain
2761    1671  CD 10 19                     CALL  CurPlyAlive             ; Get active-flag ptr for current player
2762    1674  36 00                        LD    (HL),$00                ; Flag player is dead
2763    1676  CD CA 09                     CALL  $09CA                   ; Get score descriptor for current player
2764    1679  23                           INC   HL                      ; Point to high two digits
2765    167A  11 F5 20                     LD    DE,HiScore + 1          ; Current high score upper two digits
2766    167D  1A                           LD    A,(DE)                  ; Is player score greater ...
2767    167E  BE                           CP    (HL)                    ; ... than high score?
2768    167F  1B                           DEC   DE                      ; Point to LSB
2769    1680  2B                           DEC   HL                      ; Point to LSB
2770    1681  1A                           LD    A,(DE)                  ; Go ahead and fetch high score lower two digits
2771    1682  CA 8B 16                     JP    Z,$168B                 ; Upper two are the same ... have to check lower two
2772    1685  D2 98 16                     JP    NC,$1698                ; Player score is lower than high ... nothing to do
2773    1688  C3 8F 16                     JP    $168F                   ; Player score is higher ... go copy the new high score
2774                    
2775    168B  BE                           CP    (HL)                    ; Is lower digit higher? (upper was the same)
2776    168C  D2 98 16                     JP    NC,$1698                ; No ... high score is still greater than player's score
2777    168F  7E                           LD    A,(HL)                  ; Copy the new ...
2778    1690  12                           LD    (DE),A                  ; ... high score lower two digits
2779    1691  13                           INC   DE                      ; Point to MSB
2780    1692  23                           INC   HL                      ; Point to MSB
2781    1693  7E                           LD    A,(HL)                  ; Copy the new ...
2782    1694  12                           LD    (DE),A                  ; ... high score upper two digits
2783    1695  CD 50 19                     CALL  PrintHiScore            ; Draw the new high score
2784    1698  3A CE 20                     LD    A,(TwoPlayers)          ; Number of players
2785    169B  A7                           AND   A                       ; Is this a single player game?
2786    169C  CA C9 16                     JP    Z,$16C9                 ; Yes ... short message
2787    169F  21 03 28                     LD    HL,$2803                ; Screen coordinates
2788    16A2  11 A6 1A                     LD    DE,Msg_GameOver         ; Point to string 'GAME OVER PLAYER< >'
2789    16A5  0E 14                        LD    C,20                    ; 20 characters
2790    16A7  CD 93 0A                     CALL  PrintMessageDel         ; Print message
2791    16AA  25                           DEC   H                       ; Back up ...
2792    16AB  25                           DEC   H                       ; ... to player indicator
2793    16AC  06 1B                        LD    B,$1B                   ; '1'
2794    16AE  3A 67 20                     LD    A,(PlayerDataMSB)       ; Player number
2795    16B1  0F                           RRCA                          ; Is this player 1?
2796    16B2  DA B7 16                     JP    C,$16B7                 ; Yes ... keep the digit
2797    16B5  06 1C                        LD    B,$001C                 ; Else ... set digit 2
2798    16B7  78                           LD    A,B                     ; To A
2799    16B8  CD FF 08                     CALL  DrawChar                ; Print player number
2800    16BB  CD B1 0A                     CALL  OneSecDelay             ; Short delay
2801    16BE  CD E7 18                     CALL  $18E7                   ; Get current player 'alive' flag
2802    16C1  7E                           LD    A,(HL)                  ; Is player ...
2803    16C2  A7                           AND   A                       ; ... alive?
2804    16C3  CA C9 16                     JP    Z,$16C9                 ; No ... skip to 'GAME OVER' sequence
2805    16C6  C3 ED 02                     JP    $02ED                   ; Switch players and game loop
2806                    
2807    16C9  21 18 2D                     LD    HL,$2D18                ; Screen coordinates
2808    16CC  11 A6 1A                     LD    DE,Msg_GameOver         ; Point to string 'GAME OVER PLAYER< >'
2809    16CF  0E 0A                        LD    C,10                    ; Just the 'GAME OVER' part
2810    16D1  CD 93 0A                     CALL  PrintMessageDel         ; Print message
2811    16D4  CD B6 0A                     CALL  TwoSecDelay             ; Long delay
2812    16D7  CD D6 09                     CALL  ClearPlayField          ; Clear center window
2813    16DA  AF                           XOR   A                       ; Now in ...
2814    16DB  32 EF 20                     LD    (GameMode),A            ; ... demo mode
2815    16DE  D3 05                        OUT   (SOUND2),A              ; All sound off
2816    16E0  CD D1 19                     CALL  EnableGameTasks         ; Enable ISR game tasks
2817    16E3  C3 89 0B                     JP    $0B89                   ; Print credit information and do splash
2818                    
2819    16E6  31 00 24                     LD    SP,STACK_TOP            ; Reset stack
2820    16E9  FB                           EI                            ; Enable interrupts
2821    16EA  AF                           XOR   A                       ; Flag ...
2822    16EB  32 15 20                     LD    (PlayerAlive),A         ; ... player is shot
2823    16EE  CD D8 14                     CALL  PlayerShotHit           ; Player's shot collision detection
2824    16F1  06 04                        LD    B,$04                   ; Player has been hit ...
2825    16F3  CD FA 18                     CALL  SoundBits3On            ; ... sound
2826    16F6  CD 59 0A                     CALL  $0A59                   ; Has flag been set?
2827    16F9  C2 EE 16                     JP    NZ,$16EE                ; No ... wait for the flag
2828    16FC  CD D7 19                     CALL  DisableGameTasks        ; Disable ISR game tasks
2829    16FF  21 01 27                     LD    HL,$2701                ; Player's stash of ships
2830    1702  CD FA 19                     CALL  $19FA                   ; Erase the stash of shps
2831    1705  AF                           XOR   A                       ; Print ...
2832    1706  CD 8B 1A                     CALL  $1A8B                   ; ... a zero (number of ships)
2833    1709  06 FB                        LD    B,$FB                   ; Turn off ...
2834    170B  C3 6B 19                     JP    $196B                   ; ... player shot sound
2835                    
2836                    ; Use the player's MSB to determine how fast the aliens reload their
2837                    ; shots for another fire
2838                    
2839    170E  CD CA 09  UpdateReloadRate   CALL  $09CA                   ; Get score descriptor for active player
2840    1711  23                           INC   HL                      ; MSB value
2841    1712  7E                           LD    A,(HL)                  ; Get the MSB value
2842    1713  11 B8 1C                     LD    DE,$1CB8                ; Score MSB table
2843    1716  21 A1 1A                     LD    HL,ShotReloadRates      ; Corresponding fire reload rate table
2844    1719  0E 04                        LD    C,4                     ; Only 4 entries (a 5th value of 7 is used after that)
2845    171B  47                           LD    B,A                     ; Hold the score value
2846    171C  1A                           LD    A,(DE)                  ; Get lookup from table
2847    171D  B8                           CP    B                       ; Compare them
2848    171E  D2 27 17                     JP    NC,$1727                ; Equal or below ... use this table entry
2849    1721  23                           INC   HL                      ; Next ...
2850    1722  13                           INC   DE                      ; ... entry in table
2851    1723  0D                           DEC   C                       ; Do all ...
2852    1724  C2 1C 17                     JP    NZ,$171C                ; ... 4 entries in the tables
2853    1727  7E                           LD    A,(HL)                  ; Load the shot reload value
2854    1728  32 CF 20                     LD    (AlienShotRelRate),A    ; Save the value for use in shot routine
2855    172B  C9                           RET                           ; Done
2856                    
2857                    ; Shot sound on or off depending on 2025
2858                    
2859    172C  3A 25 20  ShotSound          LD    A,(PlyrShotStatus)      ; Player shot flag
2860    172F  FE 00                        CP    $00                     ; Active shot?
2861    1731  C2 39 17                     JP    NZ,$1739                ; Yes ... go
2862    1734  06 FD                        LD    B,$FD                   ; Sound mask
2863    1736  C3 DC 19                     JP    SoundBits3Off           ; Mask off sound
2864                    
2865    1739  06 02                        LD    B,$02                   ; Sound bit
2866    173B  C3 FA 18                     JP    SoundBits3On            ; OR on sound
2867                    
2868    173E  00                           NOP
2869    173F  00                           NOP
2870                    
2871                    ; This called from the ISR times down the fleet and sets the flag at 2095 if
2872                    ; the fleet needs a change in sound handling (new delay, new sound)
2873                    
2874    1740  21 9B 20  TimeFleetSound     LD    HL,FleetSndHold         ; Pointer to hold time for fleet
2875    1743  35                           DEC   (HL)                    ; Decrement hold time
2876    1744  CC 6D 17                     CALL  Z,$176D                 ; If 0 turn fleet movement sound off
2877    1747  3A 68 20                     LD    A,(PlayerOK)            ; Is player OK?
2878    174A  A7                           AND   A                       ; 1  means OK
2879    174B  CA 6D 17                     JP    Z,$176D                 ; Player not OK ... fleet movement sound off and out
2880    174E  21 96 20                     LD    HL,FleetSndCnt          ; Current time on fleet sound
2881    1751  35                           DEC   (HL)                    ; Count down
2882    1752  C0                           RET   NZ                      ; Not time to change sound ... out
2883    1753  21 98 20                     LD    HL,SoundPort5           ; Current sound port 3 value (CHECK)
2884    1756  7E                           LD    A,(HL)                  ; Get value
2885    1757  D3 05                        OUT   (SOUND2),A              ; Set sounds
2886    1759  3A 82 20                     LD    A,(NumAliens)           ; Number of aliens on active screen
2887    175C  A7                           AND   A                       ; Is it zero?
2888    175D  CA 6D 17                     JP    Z,$176D                 ; Yes ... turn off fleet movement sound and out
2889    1760  2B                           DEC   HL                      ; (2097) Point to fleet timer reload
2890    1761  7E                           LD    A,(HL)                  ; Get fleet delay value
2891    1762  2B                           DEC   HL                      ; (2096) Point to fleet timer
2892    1763  77                           LD    (HL),A                  ; Reload the timer
2893    1764  2B                           DEC   HL                      ; Point to change-sound
2894    1765  36 01                        LD    (HL),$01                ; (2095) time to change sound
2895    1767  3E 04                        LD    A,$04                   ; Set hold ...
2896    1769  32 9B 20                     LD    (FleetSndHold),A        ; ... time for fleet sound
2897    176C  C9                           RET                           ; Done
2898                    
2899    176D  3A 98 20                     LD    A,(SoundPort5)          ; Current sound port 3 value
2900    1770  E6 30                        AND   $30                     ; Mask off fleet movement sounds
2901    1772  D3 05                        OUT   (SOUND2),A              ; Set sounds
2902    1774  C9                           RET                           ; Done
2903                    
2904                    ; This game-loop routine handles two sound functions. The routine does:
2905                    ; 1) Time out the extra-ship awarded sound and turn it off when done
2906                    ; 2) Load the fleet sound delay based on number of remaining aliens
2907                    ; 3) Make the changing fleet sound
2908                    
2909                    ; The 2095 flag is set by the ISR and cleared here. The ISR does the timing and sets 2095 when it
2910                    ; is time to make a new fleet sound
2911                    
2912    1775  3A 95 20  FleetDelayExShip   LD    A,(ChangeFleetSnd)      ; Time for new ...
2913    1778  A7                           AND   A                       ; ... fleet movement sound?
2914    1779  CA AA 17                     JP    Z,$17AA                 ; No ... skip to extra-man timing
2915    177C  21 11 1A                     LD    HL,$1A11                ; Number of aliens list coupled ...
2916    177F  11 21 1A                     LD    DE,$1A21                ; ... with delay list
2917    1782  3A 82 20                     LD    A,(NumAliens)           ; Get the number of aliens on the screen
2918    1785  BE                           CP    (HL)                    ; Compare it to the first list value
2919    1786  D2 8E 17                     JP    NC,$178E                ; Number of live aliens is higher than value ... use the delay
2920    1789  23                           INC   HL                      ; Move to ...
2921    178A  13                           INC   DE                      ; ... next list value
2922    178B  C3 85 17                     JP    $1785                   ; Find the right delay
2923    178E  1A                           LD    A,(DE)                  ; Get the delay from the second list
2924    178F  32 97 20                     LD    (FleetSndReload),A      ; Store the new alien sound delay
2925    1792  21 98 20                     LD    HL,SoundPort5           ; Get current state ...
2926    1795  7E                           LD    A,(HL)                  ; ... of sound port
2927    1796  E6 30                        AND   $30                     ; Mask off all fleet movement sounds
2928    1798  47                           LD    B,A                     ; Hold the value
2929    1799  7E                           LD    A,(HL)                  ; Get current state
2930    179A  E6 0F                        AND   $0F                     ; This time ONLY the fleet movement sounds
2931    179C  07                           RLCA                          ; Shift next to next sound
2932    179D  FE 10                        CP    $10                     ; Overflow?
2933    179F  C2 A4 17                     JP    NZ,$17A4                ; No ... keep it
2934    17A2  3E 01                        LD    A,$01                   ; Reset back to first sound
2935    17A4  B0                           OR    B                       ; Add fleet sounds to current sound value
2936    17A5  77                           LD    (HL),A                  ; Store new sound value
2937    17A6  AF                           XOR   A                       ; Restart ...
2938    17A7  32 95 20                     LD    (ChangeFleetSnd),A      ; ... waiting on fleet time
2939                    
2940    17AA  21 99 20                     LD    HL,ExtraHold            ; Sound timer for award extra ship
2941    17AD  35                           DEC   (HL)                    ; Time expired?
2942    17AE  C0                           RET   NZ                      ; No ... leave sound playing
2943    17AF  06 EF                        LD    B,$EF                   ; Turn off bit set with #$10 (award extra ship)
2944    17B1  C3 DC 19                     JP    SoundBits3Off           ; Stop sound and out
2945                    
2946    17B4  06 EF     SndOffExtPly       LD    B,$EF                   ; Mask off sound bit 4 (Extended play)
2947    17B6  21 98 20                     LD    HL,SoundPort5           ; Current sound content
2948    17B9  7E                           LD    A,(HL)                  ; Get current sound bits
2949    17BA  A0                           AND   B                       ; Turn off extended play
2950    17BB  77                           LD    (HL),A                  ; Remember settings
2951    17BC  D3 05                        OUT   (SOUND2),A              ; Turn off extended play
2952    17BE  C9                           RET                           ; Done
2953                    
2954    17BF  00                           NOP
2955                    
2956                    ; Read control inputs for active player
2957                    
2958    17C0  3A 67 20  ReadInputs         LD    A,(PlayerDataMSB)       ; Get active player
2959    17C3  0F                           RRCA                          ; Test player
2960    17C4  D2 CA 17                     JP    NC,$17CA                ; Player 2 ... read port 2
2961    17C7  DB 01                        IN    A,(INP1)                ; Player 1 ... read port 1
2962    17C9  C9                           RET                           ; Done
2963                    
2964    17CA  DB 02                        IN    A,(INP2)                ; Get controls for player 2
2965    17CC  C9                           RET                           ; Done
2966                    
2967                    ; Check and handle TILT
2968                    
2969    17CD  DB 02     CheckHandleTilt    IN    A,(INP2)                ; Read input port
2970    17CF  E6 04                        AND   $04                     ; Tilt?
2971    17D1  C8                           RET   Z                       ; No tilt ... return
2972    17D2  3A 9A 20                     LD    A,(Tilt)                ; Already in TILT handle?
2973    17D5  A7                           AND   A                       ; 1 = yes
2974    17D6  C0                           RET   NZ                      ; Yes ... ignore it now
2975    17D7  31 00 24                     LD    SP,STACK_TOP            ; Reset stack
2976    17DA  06 04                        LD    B,$04                   ; Do this 4 times
2977    17DC  CD D6 09                     CALL  ClearPlayField          ; Clear center window
2978    17DF  05                           DEC   B                       ; All done?
2979    17E0  C2 DC 17                     JP    NZ,$17DC                ; No ... do again
2980    17E3  3E 01                        LD    A,$01                   ; Flag ...
2981    17E5  32 9A 20                     LD    (Tilt),A                ; ... handling TILT
2982    17E8  CD D7 19                     CALL  DisableGameTasks        ; Disable game tasks
2983    17EB  FB                           EI                            ; Re-enable interrupts
2984    17EC  11 BC 1C                     LD    DE,Msg_Tilt             ; Pointer to string 'TILT'
2985    17EF  21 16 30                     LD    HL,$3016                ; Center of screen
2986    17F2  0E 04                        LD    C,4                     ; Length of message
2987    17F4  CD 93 0A                     CALL  PrintMessageDel         ; Print 'TILT'
2988    17F7  CD B1 0A                     CALL  OneSecDelay             ; Short delay
2989    17FA  AF                           XOR   A                       ; Zero
2990    17FB  32 9A 20                     LD    (Tilt),A                ; TILT handle over
2991    17FE  32 93 20                     LD    (WaitStartLoop),A       ; Back into splash screens
2992    1801  C3 C9 16                     JP    $16C9                   ; Handle game over for player
2993                    
2994    1804  21 84 20  CtrlSaucerSound    LD    HL,SaucerActive         ; Saucer on screen flag
2995    1807  7E                           LD    A,(HL)                  ; Is the saucer ...
2996    1808  A7                           AND   A                       ; ... on the screen?
2997    1809  CA 07 07                     JP    Z,$0707                 ; No ... UFO sound off
2998    180C  23                           INC   HL                      ; Saucer hit flag
2999    180D  7E                           LD    A,(HL)                  ; (2085) Get saucer hit flag
3000    180E  A7                           AND   A                       ; Is saucer in 'hit' sequence?
3001    180F  C0                           RET   NZ                      ; Yes ... out
3002    1810  06 01                        LD    B,$01                   ; Retrigger saucer ...
3003    1812  C3 FA 18                     JP    SoundBits3On            ; ... sound (retrigger makes it warble?)
3004                    
3005                    ; Draw 'SCORE ADVANCE TABLE'
3006                    
3007    1815  21 10 28  DrawAdvTable       LD    HL,$2810                ; 0x410 is 1040 rotCol=32, rotRow=16
3008    1818  11 A3 1C                     LD    DE,Msg_ScoreAdvance     ; Pointer to string '*SCORE ADVANCE TABLE*'
3009    181B  0E 15                        LD    C,21                    ; Length of message
3010    181D  CD F3 08                     CALL  PrintMessage            ; Print message
3011    1820  3E 0A                        LD    A,$0A                   ; 10 bytes in every '=xx POINTS' string
3012    1822  32 6C 20                     LD    (Temp206C),A            ; Hold the count
3013    1825  01 BE 1D                     LD    BC,ScoreAdvanceTable    ; Coordinate/sprite for drawing table
3014    1828  CD 56 18                     CALL  ReadPriStruct           ; Get HL=coordinate, DE=image
3015    182B  DA 37 18                     JP    C,$1837                 ; Move on if done
3016    182E  CD 44 18                     CALL  $1844                   ; Draw 16-byte sprite
3017    1831  C3 28 18                     JP    $1828                   ; Do all in table
3018                    
3019    1834  CD B1 0A                     CALL  OneSecDelay             ; One second delay
3020    1837  01 CF 1D                     LD    BC,$1DCF                ; Coordinate/message for drawing table
3021    183A  CD 56 18                     CALL  ReadPriStruct           ; Get HL=coordinate, DE=message
3022    183D  D8                           RET   C                       ; Out if done
3023    183E  CD 4C 18                     CALL  $184C                   ; Print message
3024    1841  C3 3A 18                     JP    $183A                   ; Do all in table
3025                    
3026    1844  C5                           PUSH  BC                      ; Hold BC
3027    1845  06 10                        LD    B,16                    ; 16 bytes
3028    1847  CD 39 14                     CALL  DrawSimpleSprite        ; Draw simple
3029    184A  C1                           POP   BC                      ; Restore BC
3030    184B  C9                           RET                           ; Done
3031                    
3032    184C  C5                           PUSH  BC                      ; Hold BC
3033    184D  3A 6C 20                     LD    A,(Temp206C)            ; Count of 10 ...
3034    1850  4F                           LD    C,A                     ; ... to C
3035    1851  CD 93 0A                     CALL  PrintMessageDel         ; Print the message with delay between letters
3036    1854  C1                           POP   BC                      ; Restore BC
3037    1855  C9                           RET                           ; Done
3038                    
3039                    ; Read a 4-byte print-structure pointed to by BC
3040                    ; HL=Screen coordiante, DE=pointer to message
3041                    ; If the first byte is FF then return with C=1
3042                    
3043    1856  0A        ReadPriStruct      LD    A,(BC)                  ; Get the screen LSB
3044    1857  FE FF                        CP    $FF                     ; Valid?
3045    1859  37                           SCF                           ; If not C will be 1
3046    185A  C8                           RET   Z                       ; Return if 255
3047    185B  6F                           LD    L,A                     ; Screen LSB to L
3048    185C  03                           INC   BC                      ; Next
3049    185D  0A                           LD    A,(BC)                  ; Read screen MSB
3050    185E  67                           LD    H,A                     ; Screen MSB to H
3051    185F  03                           INC   BC                      ; Next
3052    1860  0A                           LD    A,(BC)                  ; Read message LSB
3053    1861  5F                           LD    E,A                     ; Message LSB to E
3054    1862  03                           INC   BC                      ; Next
3055    1863  0A                           LD    A,(BC)                  ; Read message MSB
3056    1864  57                           LD    D,A                     ; Message MSB to D
3057    1865  03                           INC   BC                      ; Next (for next print)
3058    1866  A7                           AND   A                       ; Clear C
3059    1867  C9                           RET                           ; Done
3060                    
3061                    ; Moves a sprite up or down in splash mode. Interrupt moves the sprite. When it reaches
3062                    ; Y value in 20CA the flag at 20CB is raised. The image flips between two pictures every
3063                    ; 4 movements
3064                    
3065    1868  21 C2 20  SplashSprite       LD    HL,SplashAnForm         ; Descriptor
3066    186B  34                           INC   (HL)                    ; Change image
3067    186C  23                           INC   HL                      ; Point to delta-x
3068    186D  4E                           LD    C,(HL)                  ; Get delta-x
3069    186E  CD D9 01                     CALL  AddDelta                ; Add delta-X and delta-Y to X and Y
3070    1871  47                           LD    B,A                     ; Current y coordinate
3071    1872  3A CA 20                     LD    A,(SplashTargetY)       ; Has sprite reached ...
3072    1875  B8                           CP    B                       ; ... target coordinate?
3073    1876  CA 98 18                     JP    Z,$1898                 ; Yes ... flag and out
3074    1879  3A C2 20                     LD    A,(SplashAnForm)        ; Image number
3075    187C  E6 04                        AND   $04                     ; Watching bit 3 for flip delay
3076    187E  2A CC 20                     LD    HL,(SplashImageRest)    ; Image
3077    1881  C2 88 18                     JP    NZ,$1888                ; Did bit 3 go to 0? No ... keep current image
3078    1884  11 30 00                     LD    DE,$0030                ; 16*3 ...
3079    1887  19                           ADD   HL,DE                   ; ...  use other image form
3080    1888  22 C7 20                     LD    (SplashImage),HL        ; Image to descriptor structure
3081    188B  21 C5 20                     LD    HL,SplashYr             ; X,Y,Image descriptor
3082    188E  CD 3B 1A                     CALL  ReadDesc                ; Read sprite descriptor
3083    1891  EB                           EX    DE,HL                   ; Image to DE, position to HL
3084    1892  C3 D3 15                     JP    DrawSprite              ; Draw the sprite
3085                    
3086    1895  00                           NOP
3087    1896  00                           NOP
3088    1897  00                           NOP
3089                    
3090    1898  3E 01                        LD    A,$01                   ; Flag that sprite ...
3091    189A  32 CB 20                     LD    (SplashReached),A       ; ... reached location
3092    189D  C9                           RET                           ; Done
3093                    
3094                    ; Animate alien shot to extra 'C' in splash
3095                    
3096    189E  21 50 20                     LD    HL,Obj4Timer            ; Task descriptor for game object 4 (squiggly shot)
3097    18A1  11 C0 1B                     LD    DE,$1BC0                ; Task info for animate-shot-to-extra-C
3098    18A4  06 10                        LD    B,16                    ; Block copy ...
3099    18A6  CD 32 1A                     CALL  BlockCopy               ; ... 16 bytes
3100    18A9  3E 02                        LD    A,$02                   ; Set shot sync ...
3101    18AB  32 80 20                     LD    (ShotSync),A            ; ... to run the squiggly shot
3102    18AE  3E FF                        LD    A,$FF                   ; Shot direction (-1)
3103    18B0  32 7E 20                     LD    (AlienShotDelta),A      ; Alien shot delta
3104    18B3  3E 04                        LD    A,$04                   ; Animate ...
3105    18B5  32 C1 20                     LD    (IsrSplashTask),A       ; ... shot
3106    18B8  3A 55 20                     LD    A,(SquShotStatus)       ; Has shot ...
3107    18BB  E6 01                        AND   $01                     ; ... collided?
3108    18BD  CA B8 18                     JP    Z,$18B8                 ; No ... keep waiting
3109    18C0  3A 55 20                     LD    A,(SquShotStatus)       ; Wait ...
3110    18C3  E6 01                        AND   $01                     ; ... for explosion ...
3111    18C5  C2 C0 18                     JP    NZ,$18C0                ; ... to finish
3112    18C8  21 11 33                     LD    HL,$3311                ; Here is where the extra C is
3113    18CB  3E 26                        LD    A,$26                   ; Space character
3114                    
3115    18CD  00                           NOP
3116                    
3117    18CE  CD FF 08                     CALL  DrawChar                ; Draw character
3118    18D1  C3 B6 0A                     JP    TwoSecDelay             ; Two second delay and out
3119                    
3120                    ;===============================================================================
3121                    ; Initializiation comes here
3122                    ;===============================================================================
3123                    
3124    18D4  31 00 24  Initialise         LD    SP,STACK_TOP            ; Set stack pointer just below screen
3125    18D7  06 00                        LD    B,$00                   ; Count 256 bytes
3126    18D9  CD E6 01                     CALL  $01E6                   ; Copy ROM to RAM
3127    18DC  CD 56 19                     CALL  DrawStatus              ; Print scores and credits
3128                    
3129    18DF  3E 08                        LD    A,$08                   ; Set alien ...
3130    18E1  32 CF 20                     LD    (AlienShotRelRate),A    ; ... shot reload rate
3131    18E4  C3 EA 0A                     JP    $0AEA                   ; Top of splash screen loop
3132                    
3133                    ; Get player-alive flag for OTHER player
3134                    
3135    18E7  3A 67 20                     LD    A,(PlayerDataMSB)       ; Player data MSB
3136    18EA  21 E7 20                     LD    HL,Player1Alive         ; Alive flags (player 1 and 2)
3137    18ED  0F                           RRCA                          ; Bit 1=1 for player 1
3138    18EE  D0                           RET   NC                      ; Player 2 ... we have it ... out
3139    18EF  23                           INC   HL                      ; Player 1's flag
3140    18F0  C9                           RET                           ; Done
3141                    
3142                    ; If there is one alien left then the right motion is 3 instead of 2. That's
3143                    ; why the timing is hard to hit after the change
3144                    
3145    18F1  06 02                        LD    B,$02                   ; Rack moving right delta X
3146    18F3  3A 82 20                     LD    A,(NumAliens)           ; Number of aliens on screen
3147    18F6  3D                           DEC   A                       ; Just one left?
3148    18F7  C0                           RET   NZ                      ; No ... use right delta X of 2
3149    18F8  04                           INC   B                       ; Just one alien ... move right at 3 instead of 2
3150    18F9  C9                           RET                           ; Done
3151                    
3152                    ; Add in bit for sound
3153                    
3154    18FA  3A 94 20  SoundBits3On       LD    A,(SoundPort3)          ; Current value of sound port
3155    18FD  B0                           OR    B                       ; Add in new sounds
3156    18FE  32 94 20                     LD    (SoundPort3),A          ; New value of sound port
3157    1901  D3 03                        OUT   (SOUND1),A              ; Write new value to sound hardware
3158    1903  C9                           RET                           ; Done
3159                    
3160    1904  21 00 22  InitAliensP2       LD    HL,$2200                ; Player 2 data area
3161    1907  C3 C3 01                     JP    $01C3                   ; Initialize player 2 aliens
3162                    
3163    190A  CD D8 14  PlyrShotAndBump    CALL  PlayerShotHit           ; Player's shot collision detection
3164    190D  C3 97 15                     JP    RackBump                ; Change alien deltaX and deltaY when rack bumps edges
3165                    
3166                    ; Get the current player's alive status
3167                    
3168    1910  21 E7 20  CurPlyAlive        LD    HL,Player1Alive         ; Alive flags
3169    1913  3A 67 20                     LD    A,(PlayerDataMSB)       ; Player 1 or 2
3170    1916  0F                           RRCA                          ; Will be 1 if player 1
3171    1917  D8                           RET   C                       ; Return if player 1
3172    1918  23                           INC   HL                      ; Bump to player 2
3173    1919  C9                           RET                           ; Done
3174                    
3175                    ; Print score header ' SCORE<1> HI-SCORE SCORE<2> '
3176                    
3177    191A  0E 1C     DrawScoreHead      LD    C,28                    ; Length of message
3178    191C  21 1E 24                     LD    HL,$241E                ; Screen coordinates
3179    191F  11 E4 1A                     LD    DE,Msg_ScoreHeading     ; Score header message
3180    1922  C3 F3 08                     JP    PrintMessage            ; Print score header
3181                    
3182    1925  21 F8 20                     LD    HL,P1Score              ; Player 1 score descriptor
3183    1928  C3 31 19                     JP    DrawScore               ; Print score
3184                    
3185    192B  21 FC 20                     LD    HL,P2Score              ; Player 2 score descriptor
3186    192E  C3 31 19                     JP    DrawScore               ; Print score
3187                    
3188                    ; Print score
3189                    ; HL = descriptor
3190                    
3191    1931  5E        DrawScore          LD    E,(HL)                  ; Get score LSB
3192    1932  23                           INC   HL                      ; Next
3193    1933  56                           LD    D,(HL)                  ; Get score MSB
3194    1934  23                           INC   HL                      ; Next
3195    1935  7E                           LD    A,(HL)                  ; Get coordinate LSB
3196    1936  23                           INC   HL                      ; Next
3197    1937  66                           LD    H,(HL)                  ; Get coordinate MSB
3198    1938  6F                           LD    L,A                     ; Set LSB
3199    1939  C3 AD 09                     JP    Print4Digits            ; Print 4 digits in DE
3200                    
3201                    ; Print message 'CREDIT '
3202                    
3203    193C  0E 07     PrintCredit        LD    C,7                     ; Length of message
3204    193E  21 01 35                     LD    HL,$3501                ; Screen coordinates
3205    1941  11 A9 1F                     LD    DE,Msg_Credit           ; Pointer to string 'CREDIT '
3206    1944  C3 F3 08                     JP    PrintMessage            ; Print message
3207                    
3208                    ; Display number of credits on screen
3209                    
3210    1947  3A EB 20  DrawNumCredits     LD    A,(NumCoins)            ; Number of credits
3211    194A  21 01 3C                     LD    HL,$3C01                ; Screen coordinates
3212    194D  C3 B2 09                     JP    DrawHexByte             ; Character to screen
3213                    
3214    1950  21 F4 20  PrintHiScore       LD    HL,HiScore              ; Hi Score descriptor
3215    1953  C3 31 19                     JP    DrawScore               ; Print Hi-Score
3216                    
3217                    ; Print scores (with header) and credits (with label)
3218                    
3219    1956  CD 5C 1A  DrawStatus         CALL  ClearScreen             ; Clear the screen
3220    1959  CD 1A 19                     CALL  DrawScoreHead           ; Print score header
3221    195C  CD 25 19                     CALL  $1925                   ; Print player 1 score
3222    195F  CD 2B 19                     CALL  $192B                   ; Print player 2 score
3223    1962  CD 50 19                     CALL  PrintHiScore            ; Print hi score
3224    1965  CD 3C 19                     CALL  PrintCredit             ; Print message 'CREDIT'
3225    1968  C3 47 19                     JP    DrawNumCredits          ; Number of credits
3226                    
3227    196B  CD DC 19                     CALL  SoundBits3Off           ; From 170B with B=FB. Turn off player shot sound
3228    196E  C3 71 16                     JP    $1671                   ; Update high-score if player's score is greater
3229                    
3230    1971  3E 01                        LD    A,$01                   ; Set flag that ...
3231    1973  32 6D 20                     LD    (Invaded),A             ; ... aliens reached bottom of screen
3232    1976  C3 E6 16                     JP    $16E6                   ; End of round
3233                    
3234    1979  CD D7 19                     CALL  DisableGameTasks        ; Disable ISR game tasks
3235    197C  CD 47 19                     CALL  DrawNumCredits          ; Display number of credits on screen
3236    197F  C3 3C 19                     JP    PrintCredit             ; Print message 'CREDIT'
3237                    
3238    1982  32 C1 20                     LD    (IsrSplashTask),A       ; Set ISR splash task
3239    1985  C9                           RET                           ; Done
3240                    
3241                    ; The original code (from TAITO) printed '*TAITO CORPORATION*' on the screen.
3242                    ; When Midway branched the code they changed the code above (overwrote with RET)
3243                    ; so it isn't printed
3244                    
3245    1986  8B 19                        DW    $198B                   ; Remainder of 'JP $198B' after JP byte overwritten by RET above
3246    1988  C3 D6 09                     JP    ClearPlayField          ; Clear playfield and out
3247    198B  21 03 28                     LD    HL,$2803                ; Screen coordinates
3248    198E  11 BE 19                     LD    DE,Msg_TaitoCorp        ; Pointer to string '*TAITO CORPORATION*'
3249    1991  0E 13                        LD    C,19                    ; Message length
3250    1993  C3 F3 08                     JP    PrintMessage            ; Print message
3251                    
3252                    ; The original TAITO code ($1985 - $1995):
3253                    ;                   JP    $198B
3254                    ;                   CALL  ClearPlayField
3255                    ;                   LD    HL,$2803
3256                    ;                   LD    DE,Msg_TaitoCorp
3257                    ;                   LD    C,19
3258                    ;                   JP    PrintMessage
3259                    
3260    1996  00                            NOP
3261    1997  00                            NOP
3262    1998  00                            NOP
3263    1999  00                            NOP
3264                    
3265                    ; There is a hidden message 'TAITO COP' (with no 'R') in the game. It can only be
3266                    ; displayed in the demonstration game during the splash screens. You must enter
3267                    ; two seqences of buttons. Timing is not critical. As long as you eventually get
3268                    ; all the buttons up/down in the correct pattern then the game will register the
3269                    ; sequence
3270                    
3271                    ; 1st: 2start(down) 1start(up)   1fire(down) 1left(down) 1right(down)
3272                    ; 2nd: 2start(up)   1start(down) 1fire(down) 1left(down) 1right(up)
3273                    
3274                    ; Unfortunately MAME does not deliver the simultaneous button presses correctly.
3275                    ; You can see the message in MAME by changing 19A6 to 02 and 19B1 to 02.
3276                    ; Then the 2start(down) is the only sequence
3277                    
3278    199A  3A 1E 20  CheckHiddenMes     LD    A,(HidMessSeq)          ; Has the 1st 'hidden-message' sequence ...
3279    199D  A7                           AND   A                       ; ... been registered?
3280    199E  C2 AC 19                     JP    NZ,$19AC                ; Yes ... go look for the 2nd sequence
3281    19A1  DB 01                        IN    A,(INP1)                ; Get player inputs
3282    19A3  E6 76                        AND   $76                     ; 0111_0110 Keep 2Pstart, 1Pstart, 1Pshot, 1Pleft, 1Pright
3283    19A5  D6 72                        SUB   $72                     ; 0111_0010 1st sequence: 2Pstart, 1Pshot, 1Pleft, 1Pright
3284    19A7  C0                           RET   NZ                      ; Not first sequence ... out
3285    19A8  3C                           INC   A                       ; Flag that 1st sequence ...
3286    19A9  32 1E 20                     LD    (HidMessSeq),A          ; ... has been entered
3287    19AC  DB 01                        IN    A,(INP1)                ; Check inputs for 2nd sequence
3288    19AE  E6 76                        AND   $76                     ; 0111_0110 Keep 2Pstart, 1Pstart, 1Pshot, 1Pleft, 1Pright
3289    19B0  FE 34                        CP    $34                     ; 0011_0100 2nd sequence: 1Pstart, 1Pshot, 1Pleft
3290    19B2  C0                           RET   NZ                      ; If not second sequence ignore
3291    19B3  21 1B 2E                     LD    HL,$2E1B                ; Screen coordinates
3292    19B6  11 F7 0B                     LD    DE,Msg_TaitoCop         ; Pointer to string 'TAITO COP' (no R)
3293    19B9  0E 09                        LD    C,9                     ; Message length
3294    19BB  C3 F3 08                     JP    PrintMessage            ; Print message and out
3295                    
3296    19BE  28 13 00  Msg_TaitoCorp      DB    $28, $13, $00, $08      ; '*TAITO CORPORATION*'
3297    19C2  13 0E 26                     DB    $13, $0E, $26, $02
3298    19C6  0E 11 0F                     DB    $0E, $11, $0F, $0E
3299    19CA  11 00 13                     DB    $11, $00, $13, $08
3300    19CE  0E 0D 28                     DB    $0E, $0D, $28
3301                    
3302                    ; Enable ISR game tasks
3303                    
3304    19D1  3E 01     EnableGameTasks    LD    A,$01                   ; Set ISR ...
3305    19D3  32 E9 20                     LD    (SuspendPlay),A         ; ... game tasks enabled
3306    19D6  C9                           RET                           ; Done
3307                    
3308                    ; Disable ISR game tasks
3309                    ; Clear 20E9 flag
3310                    
3311    19D7  AF        DisableGameTasks   XOR   A                       ; Clear ISR game tasks flag
3312    19D8  C3 D3 19                     JP    $19D3                   ; Save a byte (the RET)
3313    19DB  00                           DB    00                      ; ** Here is the byte saved. I wonder if this was an optimizer pass
3314                    
3315                    ; Turn off bit in sound port
3316                    
3317    19DC  3A 94 20  SoundBits3Off      LD    A,(SoundPort3)          ; Current sound effects value
3318    19DF  A0                           AND   B                       ; Mask bits off
3319    19E0  32 94 20                     LD    (SoundPort3),A          ; Store new hold value
3320    19E3  D3 03                        OUT   (SOUND1),A              ; Change sounds
3321    19E5  C9                           RET                           ; Done
3322                    
3323                    ; Show ships remaining in hold for the player
3324                    
3325    19E6  21 01 27  DrawNumShips       LD    HL,$2701                ; Screen coordinates
3326    19E9  CA FA 19                     JP    Z,ClearRemainderLine    ; None in reserve ... skip display
3327                    
3328                    ; Draw line of ships
3329                    
3330    19EC  11 60 1C  DrawLineOfShips    LD    DE,PlayerSprite         ; Player sprite
3331    19EF  06 10                        LD    B,16                    ; 16 rows
3332    19F1  4F                           LD    C,A                     ; Hold count
3333    19F2  CD 39 14                     CALL  DrawSimpleSprite        ; Display 1-byte sprite to screen
3334    19F5  79                           LD    A,C                     ; Restore remaining
3335    19F6  3D                           DEC   A                       ; All done?
3336    19F7  C2 EC 19                     JP    NZ,DrawLineOfShips      ; No ... keep going
3337                    
3338                    ; Clear remainder of line
3339                    
3340    19FA  06 10     ClearRemainderLine LD    B,16                    ; 16 rows
3341    19FC  CD CB 14                     CALL  ClearSmallSprite        ; Clear 1byte sprite at HL
3342    19FF  7C                           LD    A,H                     ; Get Y coordinate
3343    1A00  FE 35                        CP    $35                     ; At edge?
3344    1A02  C2 FA 19                     JP    NZ,ClearRemainderLine   ; No ... do all
3345    1A05  C9                           RET                           ; Done
3346                    
3347                    ; The ISRs set the upper bit of 2072 based on where the beam is. This is compared
3348                    ; to the upper bit of an object's Y coordinate to decide whic ISR should handle
3349                    ; it. When the beam passes the halfway point (or near it ... at scanline 96),
3350                    ; the upper bit is cleared. When the beam reaches the end of the screen the upper
3351                    ; bit is set
3352                    
3353                    ; The task then runs in the ISR if the Y coordiante bit matches the 2072 flag.
3354                    ; Objects that are at the top of the screen (upper bit of Y clear) run in the
3355                    ; mid-screen ISR when the beam has moved to the bottom of the screen. Objects
3356                    ; that are at the bottom of the screen (upper bit of Y set) run in the end-screen
3357                    ; ISR when the beam is moving back to the top
3358                    
3359                    ; The pointer to the object's Y coordinate is passed in DE. CF is set if the
3360                    ; upper bits are the same (the calling ISR should execute the task)
3361                    
3362    1A06  21 72 20  CompYToBeam        LD    HL,VBlankStatus         ; Get the ...
3363    1A09  46                           LD    B,(HL)                  ; ... beam position status
3364    1A0A  1A                           LD    A,(DE)                  ; Get the task structure flag
3365    1A0B  E6 80                        AND   $80                     ; Only upper bits count
3366    1A0D  A8                           XOR   B                       ; XOR them together
3367    1A0E  C0                           RET   NZ                      ; Not the same (CF cleared)
3368    1A0F  37                           SCF                           ; Set the CF if the same
3369    1A10  C9                           RET                           ; Done
3370                    
3371                    ; Alien delay lists. First list is the number of aliens. The second list is the
3372                    ; corresponding delay. This delay is only for the rate of change in the fleet's
3373                    ; sound. The check takes the first num-aliens-value that is lower or the same as
3374                    ; the actual num-aliens on screen
3375                    
3376                    ; The game starts with 55 aliens. The aliens are move/drawn one per interrupt
3377                    ; which means it takes 55 interrupts. The first delay value is 52 ... which is
3378                    ; almost in sync with the number of aliens. It is a tad faster and you can
3379                    ; observe the sound and steps getting out of sync
3380                    
3381    1A11  32 2B 24                     DB    $32, $2B, $24, $1C, $16, $11, $0D, $0A
3382    1A19  08 07 06                     DB    $08, $07, $06, $05, $04, $03, $02, $01
3383    1A21  34 2E 27                     DB    $34, $2E, $27, $22, $1C, $18, $15, $13
3384    1A29  10 0E 0D                     DB    $10, $0E, $0D, $0C, $0B, $09, $07, $05
3385    1A31  FF                           DB    $FF                     ; ** Needless terminator. The list value '1' catches everything
3386                    
3387                    ; Copy from [DE] to [HL], B is number of bytes
3388                    
3389    1A32  1A        BlockCopy          LD    A,(DE)                  ; Copy from [DE] to ...
3390    1A33  77                           LD    (HL),A                  ; ... [HL]
3391    1A34  23                           INC   HL                      ; Next destination
3392    1A35  13                           INC   DE                      ; Next source
3393    1A36  05                           DEC   B                       ; Count in B
3394    1A37  C2 32 1A                     JP    NZ,BlockCopy            ; Do all
3395    1A3A  C9                           RET                           ; Done
3396                    
3397                    ; Load 5 bytes sprite descriptor from [HL]
3398                    
3399    1A3B  5E        ReadDesc           LD    E,(HL)                  ; Descriptor ...
3400    1A3C  23                           INC   HL                      ; ... sprite ...
3401    1A3D  56                           LD    D,(HL)                  ; ...
3402    1A3E  23                           INC   HL                      ; ... picture
3403    1A3F  7E                           LD    A,(HL)                  ; Descriptor ...
3404    1A40  23                           INC   HL                      ; ... screen ...
3405    1A41  4E                           LD    C,(HL)                  ; ...
3406    1A42  23                           INC   HL                      ; ... location
3407    1A43  46                           LD    B,(HL)                  ; Number of bytes in sprite
3408    1A44  61                           LD    H,C                     ; From A,C to ...
3409    1A45  6F                           LD    L,A                     ; ... H,L
3410    1A46  C9                           RET                           ; Done
3411                    
3412                    ; The screen is organized as one-bit-per-pixel
3413                    ; In: HL contains pixel number (bbbbbbbbbbbbbppp)
3414                    ; Convert from pixel number to screen coordinates (without shift)
3415                    ; Shift HL right 3 bits (clearing the top 2 bits) and set the third bit from the left
3416                    
3417    1A47  C5        ConvToScr          PUSH  BC                      ; Hold B (will mangle)
3418    1A48  06 03                        LD    B,3                     ; 3 shifts (divide by 8)
3419    1A4A  7C        ConvToScr1         LD    A,H                     ; H to A
3420    1A4B  1F                           RRA                           ; Shift right (into carry, from doesn't matter)
3421    1A4C  67                           LD    H,A                     ; Back to H
3422    1A4D  7D                           LD    A,L                     ; L to A
3423    1A4E  1F                           RRA                           ; Shift right (from/to carry)
3424    1A4F  6F                           LD    L,A                     ; Back to L
3425    1A50  05                           DEC   B                       ; Do all ...
3426    1A51  C2 4A 1A                     JP    NZ,ConvToScr1           ; ... 3 shifts
3427    1A54  7C                           LD    A,H                     ; H to A
3428    1A55  E6 3F                        AND   $3F                     ; Mask off all but screen (less than or equal 3F)
3429    1A57  F6 20                        OR    $20                     ; Offset into RAM
3430    1A59  67                           LD    H,A                     ; Back to H
3431    1A5A  C1                           POP   BC                      ; Restore B
3432    1A5B  C9                           RET                           ; Done
3433                    
3434                    ; Clear the screen
3435                    ; Thanks to Mark Tankard for pointing out what this really does
3436                    
3437    1A5C  21 00 24  ClearScreen        LD    HL,$2400                ; Screen coordinate
3438    1A5F  36 00     ClearScreen1       LD    (HL),$00                ; Clear it
3439    1A61  23                           INC   HL                      ; Next byte
3440    1A62  7C                           LD    A,H                     ; Have we done ...
3441    1A63  FE 40                        CP    $40                     ; ... all the screen?
3442    1A65  C2 5F 1A                     JP    NZ,ClearScreen1         ; No ... keep going
3443    1A68  C9                           RET                           ; Done
3444                    
3445                    ; Logically OR the player's shields back onto the playfield
3446                    ; DE = sprite, HL = screen, C = bytes per row, B = number of rows
3447                    
3448    1A69  C5        RestoreShields     PUSH  BC                      ; Preserve BC
3449    1A6A  E5                           PUSH  HL                      ; Hold for a bit
3450    1A6B  1A        RestoreShields1    LD    A,(DE)                  ; From sprite
3451    1A6C  B6                           OR    (HL)                    ; OR with screen
3452    1A6D  77                           LD    (HL),A                  ; Back to screen
3453    1A6E  13                           INC   DE                      ; Next sprite
3454    1A6F  23                           INC   HL                      ; Next on screen
3455    1A70  0D                           DEC   C                       ; Row done?
3456    1A71  C2 6B 1A                     JP    NZ,RestoreShields1      ; No ... do entire row
3457    1A74  E1                           POP   HL                      ; Original start
3458    1A75  01 20 00                     LD    BC,32                   ; Bump HL by 32 ...
3459    1A78  09                           ADD   HL,BC                   ; ... one screen row
3460    1A79  C1                           POP   BC                      ; Restore
3461    1A7A  05                           DEC   B                       ; Row counter
3462    1A7B  C2 69 1A                     JP    NZ,RestoreShields       ; Do all rows
3463    1A7E  C9                           RET                           ; Done
3464                    
3465                    ; Remove a ship from the players stash and update the hold indicators on the screen
3466                    
3467    1A7F  CD 2E 09  RemoveShip         CALL  $092E                   ; Get last byte from player data
3468    1A82  A7                           AND   A                       ; Is it 0?
3469    1A83  C8                           RET   Z                       ; Skip
3470    1A84  F5                           PUSH  AF                      ; Preserve number remaining
3471    1A85  3D                           DEC   A                       ; Remove a ship from the stash
3472    1A86  77                           LD    (HL),A                  ; New number of ships
3473    1A87  CD E6 19                     CALL  DrawNumShips            ; Draw the line of ships
3474    1A8A  F1                           POP   AF                      ; Restore number
3475    1A8B  21 01 25                     LD    HL,$2501                ; Screen coordinates
3476    1A8E  E6 0F                        AND   $0F                     ; Make sure it is a digit
3477    1A90  C3 C5 09                     JP    $09C5                   ; Print number remaining
3478                    
3479                    
3480                    ;===============================================================================
3481                    ; DATA FROM HERE DOWN
3482                    ;===============================================================================
3483                    
3484    1A93  00 00                        DB    0, 0
3485                    
3486                    ; Splash screen animation structure 1
3487                    
3488    1A95  00        SplashScrAnimStr1  DB    $00                     ; Image form (increments each draw)
3489    1A96  00                           DB    $00                     ; Delta X
3490    1A97  FF                           DB    $FF                     ; Delta Y is -1
3491    1A98  B8 FE                        DB    $B8, $FE                ; X, Y starting coordinates
3492    1A9A  20 1C                        DW    AlienSprCPos0           ; Base image (small alien)
3493    1A9C  10                           DB    16                      ; Size of image (16 bytes)
3494    1A9D  9E                           DB    $9E                     ; Target Y coordinate
3495    1A9E  00                           DB    $00                     ; Reached Y flag
3496    1A9F  20 1C                        DW    AlienSprCPos0           ; Base image (small alien)
3497                    
3498                    ; The tables at 1CB8 and 1AA1 control how fast shots are created. The speed is based
3499                    ; on the upper byte of the player's score as table $1CB8: 02 10 20 30
3500                    
3501    1AA1  30        ShotReloadRates    DB    $30                     ; <= $0200
3502    1AA2  10                           DB    $10                     ; <= $1000
3503    1AA3  0B                           DB    $0B                     ; <= $2000
3504    1AA4  08                           DB    $08                     ; <= $3000
3505    1AA5  07                           DB    $07                     ; Otherwise fastest shot firing speed
3506                    
3507    1AA6  06 00 0C  Msg_GameOver       DB    $06, $00, $0C, $04      ; 'GAME OVER  PLAYER< >'
3508    1AAA  26 0E 15                     DB    $26, $0E, $15, $04
3509    1AAE  11 26 26                     DB    $11, $26, $26, $0F
3510    1AB2  0B 00 18                     DB    $0B, $00 ,$18, $04
3511    1AB6  11 24 26                     DB    $11, $24, $26, $25
3512                    
3513    1ABA  1B 26 0E  Msg_1or2Players    DB    $1B, $26, $0E, $11      ; '1 OR 2PLAYERS BUTTON '
3514    1ABE  26 1C 0F                     DB    $26, $1C, $0F, $0B
3515    1AC2  00 18 04                     DB    $00, $18, $04, $11
3516    1AC6  12 26 01                     DB    $12, $26, $01, $14
3517    1ACA  13 13 0E                     DB    $13, $13, $0E, $0D
3518    1ACE  26                           DB    $26
3519                    
3520    1ACF  0E 0D 0B  Msg_Only1Player    DB    $0E, $0D, $0B, $18      ; 'ONLY 1PLAYER BUTTON '
3521    1AD3  26 1B 0F                     DB    $26, $1B, $0F, $0B
3522    1AD7  00 18 04                     DB    $00, $18, $04, $11
3523    1ADB  26 26 01                     DB    $26, $26, $01, $14
3524    1ADF  13 13 0E                     DB    $13, $13, $0E, $0D
3525    1AE3  26                           DB    $26
3526                    
3527    1AE4  26 12 02  Msg_ScoreHeading   DB    $26, $12, $02, $0E      ; ' SCORE<1> HI-SCORE SCORE<2> '
3528    1AE8  11 04 24                     DB    $11, $04, $24, $1B
3529    1AEC  25 26 07                     DB    $25, $26, $07, $08
3530    1AF0  3F 12 02                     DB    $3F, $12, $02, $0E
3531    1AF4  11 04 26                     DB    $11, $04, $26, $12
3532    1AF8  02 0E 11                     DB    $02, $0E, $11, $04
3533    1AFC  24 1C 25                     DB    $24, $1C, $25, $26
3534                    
3535                    ;--------------------------- RAM initialization --------------------------------
3536                    
3537                    ; Copied to RAM ($2000) $C0 bytes as initialization. See the description of RAM
3538                    ; variables at the top of this file for the details on this data
3539                    
3540    1B00  01 00 00  Data_CopyToRam     DB    $01, $00, $00, $10, $00, $00, $00, $00
3541    1B08  02 78 38                     DB    $02, $78, $38, $78, $38, $00, $F8, $00
3542    1B10  00 80 00                     DB    $00, $80, $00, $8E, $02, $FF, $05, $0C
3543    1B18  60 1C 20                     DB    $60, $1C, $20, $30, $10, $01, $00, $00
3544    1B20  00 00 00                     DB    $00, $00, $00, $BB, $03, $00, $10, $90
3545    1B28  1C 28 30                     DB    $1C, $28, $30, $01, $04, $00, $FF, $FF
3546    1B30  00 00 02                     DB    $00, $00, $02, $76, $04, $00, $00, $00
3547    1B38  00 00 04                     DB    $00, $00, $04, $EE, $1C, $00, $00, $03
3548    1B40  00 00 00                     DB    $00, $00, $00, $B6, $04, $00, $00, $01
3549    1B48  00 1D 04                     DB    $00, $1D, $04, $E2, $1C, $00, $00, $03
3550    1B50  00 00 00                     DB    $00, $00, $00, $82, $06, $00, $00, $01
3551    1B58  06 1D 04                     DB    $06, $1D, $04, $D0, $1C, $00, $00, $03
3552    1B60  FF 00 C0                     DB    $FF, $00, $C0, $1C, $00, $00, $10, $21
3553    1B68  01 00 30                     DB    $01, $00, $30, $00, $12, $00, $00, $00
3554                    
3555                    ; These don't need to be copied over to RAM (see *** below)
3556                    
3557    1B70  0F 0B 00  Msg_Player1        DB    $0F, $0B, $00, $18      ; 'PLAY PLAYER<1>'
3558    1B74  26 0F 0B                     DB    $26, $0F, $0B, $00
3559    1B78  18 04 11                     DB    $18, $04, $11, $24
3560    1B7C  1B 25                        DB    $1B, $25
3561                    
3562    1B7E  FC 00     Temp_1B7E          DB    $FC, $00
3563                    
3564    1B80  01 FF FF  Temp_1B80          DB    $01, $FF, $FF, $00, $00, $00, $20, $64
3565    1B88  1D D0 29                     DB    $1D, $D0, $29, $18, $02, $54, $1D, $00
3566    1B90  08 00 06                     DB    $08, $00, $06, $00, $00, $01, $40, $00
3567    1B98  01 00 00                     DB    $01, $00, $00, $10, $9E, $00, $20, $1C
3568                    
3569                    ; ***
3570                    ; These don't need to be copied over to RAM I believe this to be a mistake. The constant
3571                    ; at 01E4 is C0, which is the size of this mirror with the added sprite. It should be A0.
3572                    ; I believe there was a macro to size this area and later the splash screens where put in.
3573                    ; Some of the data spilled over into this and the macro automatically included it. No harm
3574                    
3575                    ; Alien sprite type C pulling upside down Y
3576                    
3577    1BA0  00        AlienSprCYA        DB    $00                     ;  [        ]
3578    1BA1  03                           DB    $03                     ;  [**      ]
3579    1BA2  04                           DB    $04                     ;  [  *     ]
3580    1BA3  78                           DB    $78                     ;  [   **** ]
3581    1BA4  14                           DB    $14                     ;  [  * *   ]
3582    1BA5  13                           DB    $13                     ;  [**  *   ]
3583    1BA6  08                           DB    $08                     ;  [   *    ]
3584    1BA7  1A                           DB    $1A                     ;  [ * **   ]
3585    1BA8  3D                           DB    $3D                     ;  [* ****  ]
3586    1BA9  68                           DB    $68                     ;  [   * ** ]
3587    1BAA  FC                           DB    $FC                     ;  [  ******]
3588    1BAB  FC                           DB    $FC                     ;  [  ******]
3589    1BAC  68                           DB    $68                     ;  [   * ** ]
3590    1BAD  3D                           DB    $3D                     ;  [* ****  ]
3591    1BAE  1A                           DB    $1A                     ;  [ * **   ]
3592    1BAF  00                           DB    $00                     ;  [        ]
3593                    
3594    1BB0  00 00 01  Temp_1BB0          DB    $00, $00, $01, $B8, $98, $A0, $1B, $10
3595    1BB8  FF 00 A0                     DB    $FF, $00, $A0, $1B, $00, $00, $00, $00
3596                    
3597                    ;--------------------------- End of initialization copy ------------------------
3598                    
3599                    ; Shot descriptor for splash shooting the extra 'C'
3600                    
3601    1BC0  00 10 00  Temp_1BC0          DB    $00, $10, $00, $0E, $05, $00, $00, $00
3602    1BC8  00 00 07                     DB    $00, $00, $07, $D0, $1C, $C8, $9B, $03
3603                    
3604                    ; Alien sprite C pulling upside down Y. The Y is closer to the ship. This gives
3605                    ; the effect of the Y kind of 'sticking' in the animation
3606                    
3607    1BD0  00        AlienSprCYB        DB    $00                     ;  [        ]
3608    1BD1  00                           DB    $00                     ;  [        ]
3609    1BD2  03                           DB    $03                     ;  [**      ]
3610    1BD3  04                           DB    $04                     ;  [  *     ]
3611    1BD4  78                           DB    $78                     ;  [   **** ]
3612    1BD5  14                           DB    $14                     ;  [  * *   ]
3613    1BD6  0B                           DB    $0B                     ;  [** *    ]
3614    1BD7  19                           DB    $19                     ;  [*  **   ]
3615    1BD8  3A                           DB    $3A                     ;  [ * ***  ]
3616    1BD9  6D                           DB    $6D                     ;  [* ** ** ]
3617    1BDA  FA                           DB    $FA                     ;  [ * *****]
3618    1BDB  FA                           DB    $FA                     ;  [ * *****]
3619    1BDC  6D                           DB    $6D                     ;  [* ** ** ]
3620    1BDD  3A                           DB    $3A                     ;  [ * ***  ]
3621    1BDE  19                           DB    $19                     ;  [*  **   ]
3622    1BDF  00                           DB    $00                     ;  [        ]
3623                    
3624                    ; More RAM initialization copied by $18D9
3625                    
3626    1BE0  00 00 00  Temp_1BE0          DB    $00, $00, $00, $00, $00, $00, $00, $00
3627    1BE8  00 01 00                     DB    $00, $01, $00, $00, $01, $74, $1F, $00
3628    1BF0  80 00 00                     DB    $80, $00, $00, $00, $00, $00, $1C, $2F
3629    1BF8  00 00 1C                     DB    $00, $00, $1C, $27, $00, $00, $1C, $39
3630                    
3631                    ; ALIEN IMAGES
3632                    
3633                    ; Alien sprite type A,B, and C at positions 0
3634                    
3635    1C00  00 00 39  AlienSprAPos0      DB    $00, $00, $39, $79, $7A, $6E, $EC, $FA
3636    1C08  FA EC 6E                     DB    $FA, $EC, $6E, $7A, $79, $39, $00, $00
3637                    
3638    1C10  00 00 00  AlienSprBPos0      DB    $00, $00, $00, $78, $1D, $BE, $6C, $3C
3639    1C18  3C 3C 6C                     DB    $3C, $3C, $6C, $BE, $1D, $78, $00, $00
3640                    
3641    1C20  00 00 00  AlienSprCPos0      DB    $00, $00, $00, $00, $19, $3A, $6D, $FA
3642    1C28  FA 6D 3A                     DB    $FA, $6D, $3A, $19, $00, $00, $00, $00
3643                    
3644                    ; Alien sprite type A,B, and C at positions 1
3645                    
3646    1C30  00 00 38  AlienSprAPos1      DB    $00, $00, $38, $7A, $7F, $6D, $EC, $FA
3647    1C38  FA EC 6D                     DB    $FA, $EC, $6D, $7F, $7A, $38, $00, $00
3648                    
3649    1C40  00 00 00  AlienSprBPos1      DB    $00, $00, $00, $0E, $18, $BE, $6D, $3D
3650    1C48  3C 3D 6D                     DB    $3C, $3D, $6D, $BE, $18, $0E, $00, $00
3651                    
3652    1C50  00 00 00  AlienSprCPos1      DB    $00, $00, $00, $00, $1A, $3D, $68, $FC
3653    1C58  FC 68 3D                     DB    $FC, $68, $3D, $1A, $00, $00, $00, $00
3654                    
3655                    ; WRITE CODE TO TAKE 16 BYTES AND GENERATE DB STATEMENTS AND ASTERIX MATRIX
3656                    
3657                    ; Player sprite, and player exploding sprites
3658                    
3659    1C60  00        PlayerSprite       DB    $00                     ;  [        ]
3660    1C61  00                           DB    $00                     ;  [        ]
3661    1C62  0F                           DB    $0F                     ;  [****    ]
3662    1C63  1F                           DB    $1F                     ;  [*****   ]
3663    1C64  1F                           DB    $1F                     ;  [*****   ]
3664    1C65  1F                           DB    $1F                     ;  [*****   ]
3665    1C66  1F                           DB    $1F                     ;  [*****   ]
3666    1C67  7F                           DB    $7F                     ;  [******* ]
3667    1C68  FF                           DB    $FF                     ;  [********]
3668    1C69  7F                           DB    $7F                     ;  [******* ]
3669    1C6A  1F                           DB    $1F                     ;  [*****   ]
3670    1C6B  1F                           DB    $1F                     ;  [*****   ]
3671    1C6C  1F                           DB    $1F                     ;  [*****   ]
3672    1C6D  1F                           DB    $1F                     ;  [*****   ]
3673    1C6E  0F                           DB    $0F                     ;  [****    ]
3674    1C6F  00                           DB    $00                     ;  [        ]
3675                    
3676    1C70  00 04 01  PlayerBlowupSpr    DB    $00, $04, $01, $13, $03, $07, $B3, $0F
3677    1C78  2F 03 2F                     DB    $2F, $03, $2F, $49, $04, $03, $00, $01
3678                    
3679    1C80  40 08 05                     DB    $40, $08, $05, $A3, $0A, $03, $5B, $0F
3680    1C88  27 27 0B                     DB    $27, $27, $0B, $4B, $40, $84, $11, $48
3681                    
3682                    ; Player shot (bullet) sprite
3683                    
3684    1C90  0F        PlayerShotSpr      DB    $0F                     ;  [****    ]
3685                    
3686                    ; Shot exploding sprite
3687                    
3688    1C91  99 3C 7E  ShotExploding      DB    $99, $3C, $7E, $3D, $BC, $3E, $7C, $99
3689                    
3690    1C99  27 1B 1A  Msg_10Points       DB    $27, $1B, $1A, $26      ; '=10 POINTS' (ran out of space at 1DFE)
3691    1C9D  0F 0E 08                     DB    $0F, $0E, $08, $0D
3692    1CA1  13 12                        DB    $13, $12
3693                    
3694    1CA3  28 12 02  Msg_ScoreAdvance   DB    $28, $12, $02, $0E      ; '*SCORE ADVANCE TABLE*'
3695    1CA7  11 04 26                     DB    $11, $04, $26, $00
3696    1CAB  03 15 00                     DB    $03, $15, $00, $0D
3697    1CAF  02 04 26                     DB    $02, $04, $26, $13
3698    1CB3  00 01 0B                     DB    $00, $01, $0B, $04
3699    1CB7  28                           DB    $28
3700                    
3701                    ; The tables at 1CB8 and 1AA1 control how fast shots are created. The speed is based
3702                    ; on the upper byte of the player's score. For a score of less than or equal 0200 then
3703                    ; the fire speed is 30. For a score less than or equal 1000 the shot speed is 10. Less
3704                    ; than or equal 2000 the speed is 0B. Less than or equal 3000 is 08. And anything
3705                    ; above 3000 is 07
3706                    ;
3707                    ; 1AA1: 30 10 0B 08 07
3708                    
3709    1CB8  02 10 20  AReloadScoreTab    DB    $02, $10, $20, $30
3710                    
3711    1CBC  13 08 0B  Msg_Tilt           DB    $13, $08, $0B, $13      ; 'TILT'
3712                    
3713                    ; Alien exploding sprite
3714                    
3715    1CC0  00 08 49  AlienExplode       DB    $00, $08, $49, $22, $14, $81, $42, $00
3716    1CC8  42 81 14                     DB    $42, $81, $14, $22, $49, $08, $00, $00
3717                    
3718                    ; Squigly shot sprite in 4 animation frames
3719                    
3720    1CD0  44        SquiglyShot        DB    $44                     ;  [  *   * ]
3721    1CD1  AA                           DB    $AA                     ;  [ * * * *]
3722    1CD2  10                           DB    $10                     ;  [    *   ]
3723                    
3724    1CD3  88                           DB    $88                     ;  [   *   *]
3725    1CD4  54                           DB    $54                     ;  [  * * * ]
3726    1CD5  22                           DB    $22                     ;  [ *   *  ]
3727                    
3728    1CD6  10                           DB    $10                     ;  [    *   ]
3729    1CD7  AA                           DB    $AA                     ;  [ * * * *]
3730    1CD8  44                           DB    $44                     ;  [  *   * ]
3731                    
3732    1CD9  22                           DB    $22                     ;  [ *   *  ]
3733    1CDA  54                           DB    $54                     ;  [  * * * ]
3734    1CDB  88                           DB    $88                     ;  [   *   *]
3735                    
3736                    ; Alien shot exploding
3737                    
3738    1CDC  4A 15 BE  AShotExplo         DB    $4A, $15, $BE, $3F, $5E, $25
3739                    
3740                    ; Alien shot ... the plunger looking one, in four frames
3741                    
3742    1CE2  04        PlungerShot        DB    $04                     ;  [  *     ]
3743    1CE3  FC                           DB    $FC                     ;  [  ******]
3744    1CE4  04                           DB    $04                     ;  [  *     ]
3745                    
3746    1CE5  10                           DB    $10                     ;  [    *   ]
3747    1CE6  FC                           DB    $FC                     ;  [  ******]
3748    1CE7  10                           DB    $10                     ;  [    *   ]
3749                    
3750    1CE8  20                           DB    $20                     ;  [     *  ]
3751    1CE9  FC                           DB    $FC                     ;  [  ******]
3752    1CEA  20                           DB    $20                     ;  [     *  ]
3753                    
3754    1CEB  80                           DB    $80                     ;  [       *]
3755    1CEC  FC                           DB    $FC                     ;  [  ******]
3756    1CED  80                           DB    $80                     ;  [       *]
3757                    
3758                    ; Alien shot ... the rolling one, in four frames
3759                    
3760    1CEE  00        RollShot           DB    $00                     ;  [        ]
3761    1CEF  FE                           DB    $FE                     ;  [ *******]
3762    1CF0  00                           DB    $00                     ;  [        ]
3763                    
3764    1CF1  24                           DB    $24                     ;  [  *  *  ]
3765    1CF2  FE                           DB    $FE                     ;  [ *******]
3766    1CF3  12                           DB    $12                     ;  [ *  *   ]
3767                    
3768    1CF4  00                           DB    $00                     ;  [        ]
3769    1CF5  FE                           DB    $FE                     ;  [ *******]
3770    1CF6  00                           DB    $00                     ;  [        ]
3771                    
3772    1CF7  48                           DB    $48                     ;  [   *  * ]
3773    1CF8  FE                           DB    $FE                     ;  [ *******]
3774    1CF9  90                           DB    $90                     ;  [    *  *]
3775                    
3776                    ; Message 'PLAy' with an upside down 'Y' for splash screen
3777                    
3778    1CFA  0F 0B 00  Msg_PlayUY         DB    $0F, $0B, $00, $29      ; 'PLAy'
3779                    
3780    1CFE  00 00     Temp_1CFE          DB    $00, $00
3781                    
3782                    ; This table decides which column a shot will fall from. The column number is read from
3783                    ; the table (1-11) and the pointer increases for the shot type. For instance, the
3784                    ; 'squiggly' shot will fall from columns in this order: 0B, 01, 06, 03. If you play the
3785                    ; game you'll see that order
3786                    
3787                    ; The 'plunger' shot uses index 00-0F (inclusive)
3788                    ; The 'squiggly' shot uses index 06-14 (inclusive)
3789                    ; The 'rolling' shot targets the player
3790                    
3791    1D00  01 07 01  ColFireTable       DB    $01, $07, $01, $01, $01, $04, $0B, $01
3792    1D08  06 03 01                     DB    $06, $03, $01, $01, $0B, $09, $02, $08
3793    1D10  02 0B 04                     DB    $02, $0B, $04, $07, $0A
3794                    
3795                    ; This appears to be part of the column-firing table, but it is never used.
3796                    ; Perhaps this was originally intended for the 'rolling' shot but then the
3797                    ; 'rolling' was change to target the player specifically
3798                    
3799    1D15  05 02 05  Temp_1D15          DB    $05, $02, $05, $04, $06, $07, $08, $0A
3800    1D1D  06 0A 03                     DB    $06, $0A, $03
3801                    
3802                    ; Shield image pattern. 2 bytes per column x 22 = 44 bytes
3803                    
3804    1D20  FF 0F FF  ShieldImage        DB    $FF, $0F, $FF, $1F, $FF, $3F, $FF, $7F
3805    1D28  FF FF FC                     DB    $FF, $FF, $FC, $FF, $F8, $FF, $F0, $FF
3806    1D30  F0 FF F0                     DB    $F0, $FF, $F0, $FF, $F0, $FF, $F0, $FF
3807    1D38  F0 FF F0                     DB    $F0, $FF, $F0, $FF, $F8, $FF, $FC, $FF
3808    1D40  FF FF FF                     DB    $FF, $FF, $FF, $FF, $FF, $7F, $FF, $3F
3809    1D48  FF 1F FF                     DB    $FF, $1F, $FF, $0F
3810                    
3811    1D4C  05 10 15  Temp_1D4C          DB    $05, $10, $15, $30      ; Table of possible saucer scores
3812    1D50  94 97 9A  Temp_1D50          DB    $94, $97, $9A, $9D      ; Table of corresponding string prints
3813                                                                     ; for each score. Prefix address $1D
3814                    
3815                    ; 208D points here to the score given when the saucer is shot. It advances every time the
3816                    ; player-shot is removed. The code wraps after 15, but there are 16 values in this table.
3817                    ; This is a bug in the code at 044E (thanks to Colin Dooley for finding this)
3818                    ; Thus the one and only 300 comes up every 15 shots (after an initial 8)
3819                    
3820    1D54  10 05 05  SaucerScrTab       DB    $10, $05, $05, $10, $15, $10, $10, $05
3821    1D5C  30 10 10                     DB    $30, $10, $10, $10, $05, $15, $10, $05
3822                    
3823                    ; Alien Saucer Sprite, and exploding version
3824                    
3825    1D64  00        SpriteSaucer       DB    $00                     ;  [        ]
3826    1D65  00                           DB    $00                     ;  [        ]
3827    1D66  00                           DB    $00                     ;  [        ]
3828    1D67  00                           DB    $00                     ;  [        ]
3829    1D68  04                           DB    $04                     ;  [  *     ]
3830    1D69  0C                           DB    $0C                     ;  [  **    ]
3831    1D6A  1E                           DB    $1E                     ;  [ ****   ]
3832    1D6B  37                           DB    $37                     ;  [*** **  ]
3833    1D6C  3E                           DB    $3E                     ;  [ *****  ]
3834    1D6D  7C                           DB    $7C                     ;  [  ***** ]
3835    1D6E  74                           DB    $74                     ;  [  * *** ]
3836    1D6F  7E                           DB    $7E                     ;  [ ****** ]
3837    1D70  7E                           DB    $7E                     ;  [ ****** ]
3838    1D71  74                           DB    $74                     ;  [  * *** ]
3839    1D72  7C                           DB    $7C                     ;  [  ***** ]
3840    1D73  3E                           DB    $3E                     ;  [ *****  ]
3841    1D74  37                           DB    $37                     ;  [*** **  ]
3842    1D75  1E                           DB    $1E                     ;  [ ****   ]
3843    1D76  0C                           DB    $0C                     ;  [  **    ]
3844    1D77  04                           DB    $04                     ;  [  *     ]
3845    1D78  00                           DB    $00                     ;  [        ]
3846    1D79  00                           DB    $00                     ;  [        ]
3847    1D7A  00                           DB    $00                     ;  [        ]
3848    1D7B  00                           DB    $00                     ;  [        ]
3849                    
3850    1D7C  00 22 00  SpriteSaucerExp    DB    $00, $22, $00, $A5, $40, $08, $98, $3D
3851    1D84  B6 3C 36                     DB    $B6, $3C, $36, $1D, $10, $48, $62, $B6
3852    1D8C  1D 98 08                     DB    $1D, $98, $08, $42, $90, $08, $00, $00
3853                    
3854    1D94  26 1F 1A  SaucerScoreStr     DB    $26, $1F, $1A           ; _50
3855    1D97  1B 1A 1A                     DB    $1B, $1A, $1A           ; 100
3856    1D9A  1B 1F 1A                     DB    $1B, $1F, $1A           ; 150
3857    1D9D  1D 1A 1A                     DB    $1D, $1A, $1A           ; 300
3858                    
3859                    ; Score table for hitting alien type
3860                    
3861    1DA0  10        AlienScores        DB    $10                     ; Bottom 2 rows
3862    1DA1  20                           DB    $20                     ; Middle row
3863    1DA2  30                           DB    $30                     ; Highest row
3864                    
3865                    ; Starting Y coordinates for aliens at beginning of rounds. The first round is initialized
3866                    ; to $78 at 07EA. After that this table is used for 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, and
3867                    ; 9th. The 10th starts over at 1DA3 (60).
3868                    
3869    1DA3  60 50 48  AlienStartTable    DB    $60, $50, $48, $48, $48, $40, $40, $40
3870                    
3871    1DAB  0F 0B 00  Msg_PlayY          DB    $0F, $0B, $00, $18      ; 'PLAY' with normal Y
3872                    
3873    1DAF  12 0F 00  Msg_Invaders       DB    $12, $0F, $00, $02      ; 'SPACE  INVADERS'
3874    1DB3  04 26 26                     DB    $04, $26, $26, $08
3875    1DB7  0D 15 00                     DB    $0D, $15, $00, $03
3876    1DBB  04 11 12                     DB    $04, $11, $12
3877                    
3878                    ; Tables used to draw 'SCORE ADVANCE TABLE' and Alien Scores information
3879                    
3880    1DBE  0E 2C 68  ScoreAdvanceTable  DW    $2C0E, SpriteSaucer + 4 ; Flying Saucer (**why +4 ?)
3881    1DC2  0C 2C 20                     DW    $2C0C, AlienSprCPos0    ; Alien C, sprite 0
3882    1DC6  0A 2C 40                     DW    $2C0A, AlienSprBPos1    ; Alien B, sprite 1
3883    1DCA  08 2C 00                     DW    $2C08, AlienSprAPos0    ; Alien A, sprite 0
3884    1DCE  FF                           DB    $FF                     ; End of list
3885                    
3886    1DCF  0E 2E E0  AlienScoreTable    DW    $2E0E, Msg_Mystery      ; '=? MYSTERY'
3887    1DD3  0C 2E EA                     DW    $2E0C, Msg_30Points     ; '=30 POINTS'
3888    1DD7  0A 2E F4                     DW    $2E0A, Msg_20Points     ; '=20 POINTS'
3889    1DDB  08 2E 99                     DW    $2E08, Msg_10Points     ; '=10 POINTS'
3890    1DDF  FF                           DB    $FF                     ; End of list
3891                    
3892    1DE0  27 38 26  Msg_Mystery        DB    $27, $38, $26, $0C      ; '=? MYSTERY'
3893    1DE4  18 12 13                     DB    $18, $12, $13, $04
3894    1DE8  11 18                        DB    $11, $18
3895                    
3896    1DEA  27 1D 1A  Msg_30Points       DB    $27, $1D, $1A, $26      ; '=30 POINTS'
3897    1DEE  0F 0E 08                     DB    $0F, $0E, $08, $0D
3898    1DF2  13 12                        DB    $13, $12
3899                    
3900    1DF4  27 1C 1A  Msg_20Points       DB    $27, $1C, $1A, $26      ; '=20 POINTS'
3901    1DF8  0F 0E 08                     DB    $0F, $0E, $08, $0D
3902    1DFC  13 12                        DB    $13, $12
3903                    
3904                    ; The '=10 POINTS' message is at 1C99, apparently to keep the font table at 1E00
3905                    
3906    1DFE  00 00                        DB    $00, $00                ; Padding to put font table at 1E00
3907                    
3908                    
3909                    ;=========================================================================================
3910                    ; Font sprites, 8 byte each
3911                    ;=========================================================================================
3912                    ; Some of the font characters at the end were never needed. The ROM overwrites these
3913                    ; characters with data near; for instance, 1F90 would be a character but has the
3914                    ; 'INSERT COIN' message. The '?' character is at 1FC0 and is used in messages as is
3915                    ; 1FF8 '-'
3916                    
3917    1E00  00 1F 24  FontSet            DB    $00, $1F, $24, $44, $24, $1F, $00, $00  ; 00 = A
3918    1E08  00 7F 49                     DB    $00, $7F, $49, $49, $49, $36, $00, $00  ; 01 = B
3919    1E10  00 3E 41                     DB    $00, $3E, $41, $41, $41, $22, $00, $00  ; 02 = C
3920    1E18  00 7F 41                     DB    $00, $7F, $41, $41, $41, $3E, $00, $00  ; 03 = D
3921    1E20  00 7F 49                     DB    $00, $7F, $49, $49, $49, $41, $00, $00  ; 04 = E
3922    1E28  00 7F 48                     DB    $00, $7F, $48, $48, $48, $40, $00, $00  ; 05 = F
3923    1E30  00 3E 41                     DB    $00, $3E, $41, $41, $45, $47, $00, $00  ; 06 = G
3924    1E38  00 7F 08                     DB    $00, $7F, $08, $08, $08, $7F, $00, $00  ; 07 = H
3925                    
3926    1E40  00 00 41                     DB    $00, $00, $41, $7F, $41, $00, $00, $00  ; 08 = I
3927    1E48  00 02 01                     DB    $00, $02, $01, $01, $01, $7E, $00, $00  ; 09 = J
3928    1E50  00 7F 08                     DB    $00, $7F, $08, $14, $22, $41, $00, $00  ; 0A = K
3929    1E58  00 7F 01                     DB    $00, $7F, $01, $01, $01, $01, $00, $00  ; 0B = L
3930    1E60  00 7F 20                     DB    $00, $7F, $20, $18, $20, $7F, $00, $00  ; 0C = M
3931    1E68  00 7F 10                     DB    $00, $7F, $10, $08, $04, $7F, $00, $00  ; 0D = N
3932    1E70  00 3E 41                     DB    $00, $3E, $41, $41, $41, $3E, $00, $00  ; 0E = O
3933    1E78  00 7F 48                     DB    $00, $7F, $48, $48, $48, $30, $00, $00  ; 0F = P
3934                    
3935    1E80  00 3E 41                     DB    $00, $3E, $41, $45, $42, $3D, $00, $00  ; 10 = Q
3936    1E88  00 7F 48                     DB    $00, $7F, $48, $4C, $4A, $31, $00, $00  ; 11 = R
3937    1E90  00 32 49                     DB    $00, $32, $49, $49, $49, $26, $00, $00  ; 12 = S
3938    1E98  00 40 40                     DB    $00, $40, $40, $7F, $40, $40, $00, $00  ; 13 = T
3939    1EA0  00 7E 01                     DB    $00, $7E, $01, $01, $01, $7E, $00, $00  ; 14 = U
3940    1EA8  00 7C 02                     DB    $00, $7C, $02, $01, $02, $7C, $00, $00  ; 15 = V
3941    1EB0  00 7F 02                     DB    $00, $7F, $02, $0C, $02, $7F, $00, $00  ; 16 = W
3942    1EB8  00 63 14                     DB    $00, $63, $14, $08, $14, $63, $00, $00  ; 17 = X
3943                    
3944    1EC0  00 60 10                     DB    $00, $60, $10, $0F, $10, $60, $00, $00  ; 18 = Y
3945    1EC8  00 43 45                     DB    $00, $43, $45, $49, $51, $61, $00, $00  ; 19 = Z
3946    1ED0  00 3E 45                     DB    $00, $3E, $45, $49, $51, $3E, $00, $00  ; 1A = 0
3947    1ED8  00 00 21                     DB    $00, $00, $21, $7F, $01, $00, $00, $00  ; 1B = 1
3948    1EE0  00 23 45                     DB    $00, $23, $45, $49, $49, $31, $00, $00  ; 1C = 2
3949    1EE8  00 42 41                     DB    $00, $42, $41, $49, $59, $66, $00, $00  ; 1D = 3
3950    1EF0  00 0C 14                     DB    $00, $0C, $14, $24, $7F, $04, $00, $00  ; 1E = 4
3951    1EF8  00 72 51                     DB    $00, $72, $51, $51, $51, $4E, $00, $00  ; 1F = 5
3952                    
3953    1F00  00 1E 29                     DB    $00, $1E, $29, $49, $49, $46, $00, $00  ; 20 = 6
3954    1F08  00 40 47                     DB    $00, $40, $47, $48, $50, $60, $00, $00  ; 21 = 7
3955    1F10  00 36 49                     DB    $00, $36, $49, $49, $49, $36, $00, $00  ; 22 = 8
3956    1F18  00 31 49                     DB    $00, $31, $49, $49, $4A, $3C, $00, $00  ; 23 = 9
3957    1F20  00 08 14                     DB    $00, $08, $14, $22, $41, $00, $00, $00  ; 24 = <
3958    1F28  00 00 41                     DB    $00, $00, $41, $22, $14, $08, $00, $00  ; 25 = >
3959    1F30  00 00 00                     DB    $00, $00, $00, $00, $00, $00, $00, $00  ; 26 = SPACE
3960    1F38  00 14 14                     DB    $00, $14, $14, $14, $14, $14, $00, $00  ; 27 = '='
3961                    
3962    1F40  00 22 14                     DB    $00, $22, $14, $7F, $14, $22, $00, $00  ; 28 = *
3963    1F48  00 03 04                     DB    $00, $03, $04, $78, $04, $03, $00, $00  ; 29 = Inverted Y
3964                    
3965                    ; Font characters $2A to $37 re-purposed as message strings and sprites...
3966                    
3967    1F50  24 1B 26  Msg_1or2Plyrs      DB    $24, $1B, $26, $0E      ; '<1 OR 2 PLAYERS>  '
3968    1F54  11 26 1C                     DB    $11, $26, $1C, $26
3969    1F58  0F 0B 00                     DB    $0F, $0B, $00, $18
3970    1F5C  04 11 12                     DB    $04, $11, $12, $25
3971    1F60  26 26                        DB    $26, $26
3972                    
3973    1F62  28 1B 26  Msg_1Coin          DB    $28, $1B, $26, $0F      ; '*1 PLAYER  1 COIN '
3974    1F66  0B 00 18                     DB    $0B, $00, $18, $04
3975    1F6A  11 26 26                     DB    $11, $26, $26, $1B
3976    1F6E  26 02 0E                     DB    $26, $02, $0E, $08
3977    1F72  0D 26                        DB    $0D, $26
3978                    
3979    1F74  01 01 00  DemoCommands       DB    $01, $01, $00, $00      ; (1=Right, 2=Left)
3980    1F78  01 00 02                     DB    $01, $00, $02, $01
3981    1F7C  00 02 01                     DB    $00, $02, $01, $00
3982                    
3983                    ; Small alien pushing Y back onto screen, version A
3984                    
3985    1F80  60 10 0F  AlienSprCA         DB    $60, $10, $0F, $10, $60, $30, $18, $1A
3986    1F88  3D 68 FC                     DB    $3D, $68, $FC, $FC, $68, $3D, $1A, $00
3987                    
3988    1F90  08 0D 12  Msg_InsertCoin     DB    $08, $0D, $12, $04      ; 'INSERT  COIN'
3989    1F94  11 13 26                     DB    $11, $13, $26, $26
3990    1F98  02 0E 08                     DB    $02, $0E, $08, $0D
3991                    
3992    1F9C  0D 2A 50  CreditTable        DW    $2A0D, Msg_1or2Plyrs    ; '<1 OR 2 PLAYERS>  ' to screen at 2A0D
3993    1FA0  0A 2A 62                     DW    $2A0A, Msg_1Coin        ; '*1 PLAYER  1 COIN ' to screen at 2A0A
3994    1FA4  07 2A E1                     DW    $2A07, Msg_2Coins       ; '*2 PLAYERS 2 COINS' to screen at 2A07
3995    1FA8  FF                           DB    $FF                     ; Terminates 'table print'
3996                    
3997    1FA9  02 11 04  Msg_Credit         DB    $02, $11, $04, $03      ; 'CREDIT ' (with space on the end)
3998    1FAD  08 13 26                     DB    $08, $13, $26
3999                    
4000                    ; Small alien pushing Y back onto screen, version B
4001                    
4002    1FB0  00 60 10  AlienSprCB         DB    $00, $60, $10, $0F, $10, $60, $38, $19
4003    1FB8  3A 6D FA                     DB    $3A, $6D, $FA, $FA, $6D, $3A, $19, $00
4004                    
4005                    ; Font character '?'
4006                    
4007    1FC0  00 20 40  Char38_Query       DB    $00, $20, $40, $4D, $50, $20, $00, $00  ; 38 = '?'
4008                    
4009                    ; Font characters $39 to $3E re-purposed also...
4010                    
4011    1FC8  00                           DB    $00
4012                    
4013                    ; Splash screen animation structure 3
4014                    
4015    1FC9  00        SplashScrAnimStr3  DB    $00                     ; Image form (increments each draw)
4016    1FCA  00                           DB    $00                     ; Delta X
4017    1FCB  FF                           DB    $FF                     ; Delta Y is -1
4018    1FCC  B8                           DB    $B8                     ; X coordinate
4019    1FCD  FF                           DB    $FF                     ; Y starting coordinate
4020    1FCE  80 1F                        DW    AlienSprCA              ; Base image (small alien with Y)
4021    1FD0  10                           DB    $10                     ; Size of image (16 bytes)
4022    1FD1  97                           DB    $97                     ; Target Y coordinate
4023    1FD2  00                           DB    $00                     ; Reached Y flag
4024    1FD3  80 1F                        DW    AlienSprCA              ; Base image (small alien with Y)
4025                    
4026                    ; Splash screen animation structure 4
4027                    
4028    1FD5  00        SplashScrAnimStr4  DB    $00                     ;Image form (increments each draw)
4029    1FD6  00                           DB    $00                     ; Delta X
4030    1FD7  01                           DB    $01                     ; Delta Y is -1
4031    1FD8  D0                           DB    $D0                     ; X coordinate
4032    1FD9  22                           DB    $22                     ; Y starting coordinate
4033    1FDA  20 1C                        DW    AlienSprCPos0           ; Base image (small alien)
4034    1FDC  10                           DB    $10                     ; Size of image (16 bytes)
4035    1FDD  94                           DB    $94                     ; Target Y coordinate
4036    1FDE  00                           DB    $00                     ; Reached Y flag
4037    1FDF  20 1C                        DW    AlienSprCPos0           ; Base image (small alien)
4038                    
4039    1FE1  28 1C 26  Msg_2Coins         DB    $28, $1C, $26, $0F      ; '*2 PLAYERS 2 COINS'
4040    1FE5  0B 00 18                     DB    $0B, $00, $18, $04
4041    1FE9  11 12 26                     DB    $11, $12, $26, $1C
4042    1FED  26 02 0E                     DB    $26, $02, $0E, $08
4043    1FF1  0D 12                        DB    $0D, $12
4044                    
4045    1FF3  0F 14 12  Msg_Push           DB    $0F, $14, $12, $07      ; 'PUSH ' (with space on the end)
4046    1FF7  26                           DB    $26
4047                    
4048                    ; Font character $3F '-'
4049                    
4050    1FF8  00 08 08  Char3F_Dash        DB    $00, $08, $08, $08, $08, $08, $00, $00  ; 3F = '-'

Assembly generated 0 errors and 0 warnings
Assembly completed in 342 ms

